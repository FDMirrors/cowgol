sub find_bootstrap_type(identifier_id: uint16): (type_id: uint16)
    var subroutine: [SubroutineThing] := find_thing(find_main_subroutine()) as [SubroutineThing];
    type_id := deref_symbol_in_namespace_or_fail(identifier_id, subroutine.namespace_id);
end sub;

sub pointer_of(type_id: uint16, index_type_id: uint16): (ptr_type_id: uint16)
    var buf: PointerThing;
    buf.thing_type := THING_POINTERT;
    buf.thing_size := PointerThing@bytes;
    buf.width := 2;
    buf.element_type_id := type_id;
    buf.index_type_id := index_type_id;
    ptr_type_id := add_thing_by_value(&buf as [Thing]);
end sub;

sub element_of(type_id: uint16): (element_type_id: uint16)
    var type: [WithElementsThing] := find_thing(type_id) as [WithElementsThing];
    if (type.thing_type == THING_POINTERT) or (type.thing_type == THING_ARRAYT) then
        element_type_id := type.element_type_id;
    else
        element_type_id := 0;
    end if;
end sub;

sub array_of(type_id: uint16, element_count: uint16, index_type_id: uint16): (array_type_id: uint16)
    var typething: [TypeThing] := find_thing(type_id) as [TypeThing];

    var buf: ArrayThing;
    buf.thing_type := THING_ARRAYT;
    buf.thing_size := ArrayThing@bytes;
    buf.width := element_count * typething.width;
    buf.element_type_id := type_id;
    buf.element_count := element_count;
    buf.index_type_id := index_type_id;
    array_type_id := add_thing_by_value(&buf as [Thing]);
end sub;

sub get_type_of_thing(thing_id: uint16): (type_id: uint16)
    var thing: [TypedThing] := find_thing(thing_id) as [TypedThing];
    if (thing.thing_type & THING_TYPED) == 0 then
        type_id := 0;
    else
        type_id := thing.type_id;
    end if;
end sub;

# assumes type_id == 0 for numbers
sub get_width_of_type(type_id: uint16): (width: uint16)
    if type_id == 0 then
        width := 0;
    else
        var type: [TypeThing] := find_thing(type_id) as [TypeThing];
        width := type.width;
    end if;
end sub;

sub get_width_of_thing(thing_id: uint16): (width: uint16)
    var type_id: uint16 := get_type_of_thing(thing_id);
    if type_id == 0 then
        width := 0;
    else
        width := get_width_of_type(type_id);
    end if;
end sub;

sub print_raw_type_name(type_id: uint16)
    var brackets: uint8 := 0;
    loop
        var ptr_type: [PointerThing] := find_thing(type_id) as [PointerThing];
        if ptr_type.thing_type != THING_POINTERT then
            break;
        end if;
        brackets := brackets + 1;
        print_char('[');
        type_id := ptr_type.element_type_id;
    end loop;

    var id: uint16 := find_name_of_value(type_id);
    if id != 0 then
        show_identifier(id);
    else
        print("<anonymous>");
    end if;

    while brackets > 0 loop
        print_char(']');
        brackets := brackets - 1;
    end loop;
end sub;

sub print_type_name(type_id: uint16)
    var array_type: [ArrayThing] := find_thing(type_id) as [ArrayThing];
    if array_type.thing_type == THING_ARRAYT then
        print_raw_type_name(array_type.element_type_id);
        print_char('[');
        print_i16(array_type.element_count);
        print_char(']');
    else
        print_raw_type_name(type_id);
    end if;
end sub;
