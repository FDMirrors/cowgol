# longjmps out of the program.
var __exitstack: uint8;
@bytes 0xBA;               # TSX
@bytes 0x8E, &__exitstack; # STX __exitstack
sub exit(status: uint8)
    @bytes 0xAE, &__exitstack; # LDX __exitstack
    @bytes 0x9A;               # TXS
end sub;

var __params: uint16[3] @segment(0x81);
var __temp1: uint32 @segment(0x81);
var __temp2: uint32 @segment(0x81);

# On entry, X=word size
sub __copy()
    @bytes 0xCA;                 # DEX
    @bytes 0x8A;                 # TXA
    @bytes 0xA8;                 # TAY

    # again:
    @bytes 0xB1, >&__params+2;   # LDA (__params+2), Y
    @bytes 0x91, >&__params+0;   # STA (__params+0), Y
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF9;           # BPL again
end sub;

# On entry, A=shift amount, X=word size
sub __lsl()
    @bytes 0xA8;                 # TAY (cheap cmp #0)
    @bytes 0xD0, 0x03;           # BNE $+3
    @bytes 0x4C, &__copy;        # JMP __copy

    var count: uint8 @segment(0x81);
    var width: uint8 @segment(0x81);
    @bytes 0x85, >&count;        # STA count
    @bytes 0xCA;                 # DEX
    @bytes 0x86, >&width;        # STX width

    # Copy the value from src to dest, shifting once as we go.

shiftagain:
    @bytes 0xA0, 0x00;           # LDY #0
    @bytes 0xA6, >&width;        # LDX width
    @bytes 0x18;                 # CLC
    # loop:
    @bytes 0xB1, >&__params+2;   # LDA (__params+2), Y
    @bytes 0x2A;                 # ROL A
    @bytes 0x91, >&__params+0;   # STA (__params+0), Y
    @bytes 0xC8;                 # INY
    @bytes 0xCA;                 # DEX
    @bytes 0x10, 0xF7;           # BPL loop

    @bytes 0xC6, >&count;        # DEC count
    @bytes 0xF0, 0x0B;           # BEQ exit

    # We need to shift more, so we do it in-place in dest.

    @bytes 0xA5, >&__params+0;   # LDA __params+0
    @bytes 0x85, >&__params+2;   # STA __params+2
    @bytes 0xA5, >&__params+1;   # LDA __params+1
    @bytes 0x85, >&__params+3;   # STA __params+3
    goto shiftagain;
end sub;

sub __lsl16()
    @bytes 0xA2, 0x02;           # LDX #2
    @bytes 0x4C, &__lsl;         # JMP __lsl
end sub;

sub __lsl32()
    @bytes 0xA2, 0x04;           # LDX #4
    @bytes 0x4C, &__lsl;         # JMP __lsl
end sub;

# On entry, A=shift amount, X=word size, Y=0xFF for signed or 0x00 for unsigned
sub __lsr_asr()
    var signed: uint8 @segment(0x81);
    @bytes 0x84, >&signed;       # STY signed

    @bytes 0xA8;                 # TAY (cheap cmp #0)
    @bytes 0xD0, 0x03;           # BNE $+3
    @bytes 0x4C, &__copy;        # JMP __copy

    var count: uint8 @segment(0x81);
    var width: uint8 @segment(0x81);
    @bytes 0x85, >&count;        # STA count
    @bytes 0xCA;                 # DEX
    @bytes 0x86, >&width;        # STX width

    # Copy the value from src to dest, shifting once as we go.

shiftagain:
    @bytes 0xA4, >&width;        # LDY width
    @bytes 0x18;                 # CLC

    # Prime the carry bit with the sign, so it propagates in if needed.
    @bytes 0xB1, >&__params+2;   # LDA (__params+2), Y
    @bytes 0x25, >&signed;       # AND signed
    @bytes 0x0A;                 # ASL A

    # loop:
    @bytes 0xB1, >&__params+2;   # LDA (__params+2), Y
    @bytes 0x6A;                 # ROR A
    @bytes 0x91, >&__params+0;   # STA (__params+0), Y
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF8;           # BPL loop

    @bytes 0xC6, >&count;        # DEC count
    @bytes 0xF0, 0x0B;           # BEQ exit

    # We need to shift more, so we do it in-place in dest.

    @bytes 0xA5, >&__params+0;   # LDA __params+0
    @bytes 0x85, >&__params+2;   # STA __params+2
    @bytes 0xA5, >&__params+1;   # LDA __params+1
    @bytes 0x85, >&__params+3;   # STA __params+3
    goto shiftagain;
end sub;

sub __lsr16()
    @bytes 0xA2, 0x02;           # LDX #2 --- word width
    @bytes 0xA0, 0x00;           # LDY #0 --- unsigned
    @bytes 0x4C, &__lsr_asr;     # JMP __lsr
end sub;

sub __lsr32()
    @bytes 0xA2, 0x04;           # LDX #4 --- word width
    @bytes 0xA0, 0x00;           # LDY #0 --- unsigned
    @bytes 0x4C, &__lsr_asr;     # JMP __lsr
end sub;

sub __asr16()
    @bytes 0xA2, 0x02;           # LDX #2 --- word width
    @bytes 0xA0, 0xFF;           # LDY #255 --- signed
    @bytes 0x4C, &__lsr_asr;     # JMP __asr
end sub;

sub __asr32()
    @bytes 0xA2, 0x04;           # LDX #4 --- word width
    @bytes 0xA0, 0xFF;           # LDY #255 --- signed
    @bytes 0x4C, &__lsr_asr;     # JMP __asr
end sub;

# A/X -> A quotient, X remainder
sub __divmodu8()
    var num: uint8 @segment(0x81);
    var den: uint8 @segment(0x81);
    @bytes 0x85, >&num;          # STA num
    @bytes 0x86, >&den;          # STX den

    @bytes 0xA9, 0x00;           # LDA #0
    @bytes 0xA2, 0x08;           # LDX #8
    @bytes 0x06, >&num;          # ASL num

    # again:
    @bytes 0x2A;                 # ROL A
    @bytes 0xC5, >&den;          # CMP den
    @bytes 0x90, 0x02;           # BCC $+2
    @bytes 0xE5, >&den;          # SBC den
    @bytes 0x26, >&num;          # ROL num
    @bytes 0xCA;                 # DEX
    @bytes 0xD0, 0xF4;           # BNE again

    @bytes 0xAA;                 # TAX
    @bytes 0xA5, >&num;          # LDA num
end sub;

sub divmod8(left: uint8, right: uint8): (quotient: uint8, remainder: uint8)
    @bytes 0xAD, &left;          # LDA left
    @bytes 0xAE, &right;         # LDX right
    __divmodu8();
    @bytes 0x8D, &quotient;      # STA quotient
    @bytes 0x8E, &remainder;     # STA remainder
end sub;

# On entry, A=word size
sub __mul()
    var count: uint8 @segment(0x81);
    var widthm1: uint8 @segment(0x81);
    var left: uint8[4] @segment(0x81);
    var right: uint8[4] @segment(0x81);
    @bytes 0xA8;                 # TAY
    @bytes 0x88;                 # DEY
    @bytes 0x84, >&widthm1;      # STY widthm1
    @bytes 0x0A;                 # ASL A
    @bytes 0x0A;                 # ASL A
    @bytes 0x0A;                 # ASL A
    @bytes 0x85, >&count;        # STA count

    # First, copy left and right into the work area, and clear the result.

# again:
    @bytes 0x98;                 # TYA
    @bytes 0xAA;                 # TAX
    @bytes 0xB1, >&__params+2;   # LDA (__params+2), Y
    @bytes 0x95, >&left;         # STA left, X
    @bytes 0xB1, >&__params+4;   # LDA (__params+4), Y
    @bytes 0x95, >&right;        # STA right, X
    @bytes 0xA9, 0x00;           # LDA #0
    @bytes 0x95, >&__temp2;      # STA __temp2, X --- only need to clear the top half
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xEF;           # BPL loop

    # Now the multiply.

shift:
    # Shift right right.
    @bytes 0xA6, >&widthm1;      # LDX widthm1
    @bytes 0x18;                 # CLC
    # loop:
    @bytes 0x76, >&right;        # ROR right, X
    @bytes 0xCA;                 # DEX
    @bytes 0x10, 0xFB;           # BPL loop
    @bytes 0x90, 0x0F;           # BCC rotate

    # Add left to the upper half of the result.
    @bytes 0xA2, 0x00;           # LDX #0
    @bytes 0xA4, >&widthm1;      # LDY widthm1
    @bytes 0x18;                 # CLC
    # loop:
    @bytes 0xB5, >&__temp2;      # LDA __temp2, X
    @bytes 0x75, >&left;         # ADC left, X
    @bytes 0x95, >&__temp2;      # STA __temp2, X
    @bytes 0xE8;                 # INX
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF6;           # BPL loop

# rotate:
    # Now rotate the result right. (In two halves because of the split result.)
    @bytes 0xA6, >&widthm1;      # LDX widthm1
    # loop:
    @bytes 0x76, >&__temp2;      # ROR __temp2, X
    @bytes 0xCA;                 # DEX
    @bytes 0x10, 0xFB;           # BPL loop

    @bytes 0xA6, >&widthm1;      # LDX widthm1
    # loop:
    @bytes 0x76, >&__temp1;      # ROR __temp1, X
    @bytes 0xCA;                 # DEX
    @bytes 0x10, 0xFB;           # BPL loop

    # Decrement bit count and optionally go again.
    @bytes 0xC6, >&count;        # DEC count
    @bytes 0xD0, 0xD5;           # BNE shift

    # Now copy the result out.

    @bytes 0xA6, >&widthm1;      # LDX widthm1
    # loop:
    @bytes 0x8A;                 # TXA
    @bytes 0xA8;                 # TAY
    @bytes 0xB5, >&__temp1;      # LDA __temp1, X
    @bytes 0x91, >&__params+0;   # STA (__params+0), Y
    @bytes 0xCA;                 # DEX
    @bytes 0x10, 0xF7;           # BPL loop
end sub;

sub __mul8()
    @bytes 0xA9, 0x01;           # LDA #1
    @bytes 0x4C, &__mul;         # JMP __mul
end sub;

sub __mul16()
    @bytes 0xA9, 0x02;           # LDA #2
    @bytes 0x4C, &__mul;         # JMP __mul
end sub;

sub __mul32()
    @bytes 0xA9, 0x04;           # LDA #4
    @bytes 0x4C, &__mul;         # JMP __mul
end sub;

# Performs unsigned dividend / divisor = quotient:remainder.
# On entry, A=word size
# On exit, __temp1 is quotient, __temp2 is remainder
sub __divu()
    var widthm1: uint8 @segment(0x81);
    var bitcount: uint8 @segment(0x81);
    var scrap: uint8[4] @segment(0x80); # not in zero page

    @bytes 0xA8;                 # TAY
    @bytes 0x88;                 # DEY
    @bytes 0x84, >&widthm1;      # STY widthm1
    @bytes 0x0A;                 # ASL A
    @bytes 0x0A;                 # ASL A
    @bytes 0x0A;                 # ASL A
    @bytes 0x85, >&bitcount;     # STA bitcount

    # Copy left into quotient; clear remainder.

# again:
    @bytes 0xB1, >&__params+2;   # LDA (__params+2), Y -- left
    @bytes 0xAA;                 # TAX
    @bytes 0x96, >&__temp1;      # STX __temp1, Y
    @bytes 0xA2, 0x00;           # LDX #0
    @bytes 0x96, >&__temp2;      # STX __temp2, Y
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF4;           # BPL again

    # Shift dividend left.

# mainloop:
    @bytes 0xA2, 0x00;           # LDX #0
    @bytes 0xA4, >&widthm1;      # LDY widthm1
    @bytes 0x18;                 # CLC
# again:
    @bytes 0x36, >&__temp1;      # ROL __temp1, X
    @bytes 0xE8;                 # INX
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xFA;           # BPL again

    # Shift stray bit into remainder.

    @bytes 0xA2, 0x00;           # LDX #0
    @bytes 0xA4, >&widthm1;      # LDY widthm1
# again:
    @bytes 0x36, >&__temp2;      # ROL __temp2, X
    @bytes 0xE8;                 # INX
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xFA;           # BPL again

    # Attempt to subtract the divisor from the remainder, storing the result in temp storage,
    # so we can see if it fits.

    @bytes 0xA6, >&widthm1;      # LDX widthm1
    @bytes 0xA0, 0x00;           # LDY #0
    @bytes 0x38;                 # SEC
# again:
    @bytes 0xB9, &__temp2;       # LDA __temp2, Y
    @bytes 0xF1, >&__params+4;   # SBC (__params+4), Y
    @bytes 0x99, &scrap;         # STA scrap, Y
    @bytes 0xC8;                 # INY
    @bytes 0xCA;                 # DEX
    @bytes 0x10, 0xF4;           # BPL again

    # Skip if it doesn't fit.

    @bytes 0x90, 0x0C;           # BCC skip

    # Make the temp value the new remainder.

    @bytes 0xA4, >&widthm1;      # LDY widthm1
# again:
    @bytes 0xBE, &scrap;         # LDX scrap, Y -- absolute
    @bytes 0x96, >&__temp2;      # STX __temp2, Y -- zero page
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF8;           # BPL again

    # ...and increment the result, because this one fit.

    @bytes 0xE6, >&__temp1+0;    # INC __temp1+0

# skip:
    @bytes 0xC6, >&bitcount;     # DEC bitcount
    @bytes 0xD0, 0xC8;           # BNE mainloop
end sub;

# Performs unsigned dividend / divisor = quotient:remainder.
# On entry, A=word size
# On exit, __temp1 is dividend, __temp2 is remainder
sub __divs()
	var widthm1: uint8 @segment(0x81);
	var quotientsign: uint8 @segment(0x81);
    var remaindersign: uint8 @segment(0x81);
	var newleft: uint32;
	var newright: uint32;

    @bytes 0x48;                 # PHA
    @bytes 0xA8;                 # TAY
	@bytes 0x88;                 # DEY
	@bytes 0x84, >&widthm1;      # STY widthm1

	@bytes 0xB1, >&__params+2;   # LDA (__params+2), Y -- left
	@bytes 0x85, >&remaindersign; # STA remaindersign
	@bytes 0x51, >&__params+4;   # EOR (__params+4), Y -- right
	@bytes 0x85, >&quotientsign; # STA quotientsign

	# Ensure that left is positive.

	@bytes 0xB1, >&__params+2;   # LDA (__params+2), Y -- left
	@bytes 0x10, 0x19;           # BPL notneg

	@bytes 0xA6, >&widthm1;      # LDX widthm1
    @bytes 0xA0, 0x00;           # LDY #0
    @bytes 0x38;                 # SEC
# again:
    @bytes 0xA9, 0x00;           # LDA #0
    @bytes 0xF1, >&__params+2;   # SBC (__params+2), Y
	@bytes 0x99, &newleft;       # STA newleft, Y
	@bytes 0xC8;                 # INY
	@bytes 0xCA;                 # DEX
	@bytes 0x10, 0xF5;           # BPL again

	# Y is widthm1+1 now, so adjust
    @bytes 0x88;                 # DEY

	@bytes 0xA9, >&newleft;      # LDA #>newleft
	@bytes 0x85, >&__params+2;   # STA __params+2
	@bytes 0xA9, <&newleft;      # LDA #<newleft
	@bytes 0x85, >&__params+3;   # STA __params+3

    # Ensure that right is positive.

	@bytes 0xB1, >&__params+4;   # LDA (__params+4), Y -- right
	@bytes 0x10, 0x19;           # BPL notneg

	@bytes 0xA6, >&widthm1;      # LDX widthm1
    @bytes 0xA0, 0x00;           # LDY #0
    @bytes 0x38;                 # SEC
# again:
    @bytes 0xA9, 0x00;           # LDA #0
    @bytes 0xF1, >&__params+4;   # SBC (__params+4), Y
	@bytes 0x99, &newright;      # STA newright, Y
    @bytes 0xC8;                 # INY
    @bytes 0xCA;                 # DEX
	@bytes 0x10, 0xF5;           # BPL again

	# Y is widthm1+1 now, so adjust
    @bytes 0x88;                 # DEY

	@bytes 0xA9, >&newright;     # LDA #>newright
	@bytes 0x85, >&__params+4;   # STA __params+4
	@bytes 0xA9, <&newright;     # LDA #<newright
	@bytes 0x85, >&__params+5;   # STA __params+5

    # Restore the width field, and actually do the division.

    @bytes 0x68;                 # PLA
    @bytes 0x20, &__divu;        # JSR __divu

    # If we need the quotient to be negative, negate it.

    @bytes 0xA5, >&quotientsign; # LDA >quotientsign
    @bytes 0x10, 0x0F;           # BPL dontnegatequotient

    @bytes 0xA4, >&widthm1;      # LDY widthm1
    @bytes 0xA2, 0x00;           # LDX #0
    @bytes 0x38;                 # SEC
# again:
    @bytes 0xA9, 0x00;           # LDA #0
    @bytes 0xF5, >&__temp1;      # SBC __temp1, X
    @bytes 0x95, >&__temp1;      # STA __temp1, X
    @bytes 0xE8;                 # INX
    @bytes 0x88;                 # DEY
	@bytes 0x10, 0xF6;           # BPL again
# dontnegatequotient:

    # Likewise for the remainder.

    @bytes 0xA5, >&remaindersign; # LDA >remaindersign
    @bytes 0x10, 0x0F;           # BPL dontnegateremainder

    @bytes 0xA4, >&widthm1;      # LDY widthm1
    @bytes 0xA2, 0x00;           # LDX #0
    @bytes 0x38;                 # SEC
# again:
    @bytes 0xA9, 0x00;           # LDA #0
    @bytes 0xF5, >&__temp2;      # SBC __temp2, X
    @bytes 0x95, >&__temp2;      # STA __temp2, X
    @bytes 0xE8;                 # INX
    @bytes 0x88;                 # DEY
	@bytes 0x10, 0xF6;           # BPL again
# dontnegateremainder:

end sub;

sub __divu16()
    @bytes 0xA9, 0x02;           # LDA #2
    @bytes 0x20, &__divu;        # JSR __divu

    # Copy dividend to result.

    @bytes 0xA0, 0x01;           # LDY #1 -- width minus 1
    @bytes 0x4C, &__copy_div_result; # JMP __copy_div_result
end sub;

sub __divu32()
    @bytes 0xA9, 0x04;           # LDA #4
    @bytes 0x20, &__divu;        # JSR __divu

    @bytes 0xA0, 0x03;           # LDY #3 -- width minus 1
    @bytes 0x4C, &__copy_div_result; # JMP __copy_div_result
end sub;

sub __copy_div_result()
# again:
    @bytes 0xB9, &__temp1;       # LDA __temp1, Y
    @bytes 0x91, >&__params+0;   # STA (__params+0), Y
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF8;           # BPL again
end sub;

sub __divs16()
    @bytes 0xA9, 0x02;           # LDA #2
    @bytes 0x20, &__divs;        # JSR __divs

    @bytes 0xA0, 0x01;           # LDY #1 -- width minus 1
    @bytes 0x4C, &__copy_div_result; # JMP __copy_div_result
end sub;

sub __divs32()
    @bytes 0xA9, 0x04;           # LDA #4
    @bytes 0x20, &__divs;        # JSR __divs

    @bytes 0xA0, 0x03;           # LDY #3 -- width minus 1
    @bytes 0x4C, &__copy_div_result; # JMP __copy_div_result
end sub;

sub __modu16()
    @bytes 0xA9, 0x02;           # LDA #2
    @bytes 0x20, &__divu;        # JSR __divu

    # Copy dividend to result.

    @bytes 0xA0, 0x01;           # LDY #1 -- width minus 1
    @bytes 0x4C, &__copy_mod_result; # JMP __copy_mod_result
end sub;

sub __modu32()
    @bytes 0xA9, 0x04;           # LDA #4
    @bytes 0x20, &__divu;        # JSR __divu

    @bytes 0xA0, 0x03;           # LDY #3 -- width minus 1
    @bytes 0x4C, &__copy_mod_result; # JMP __copy_mod_result
end sub;

sub __mods16()
    @bytes 0xA9, 0x02;           # LDA #2
    @bytes 0x20, &__divs;        # JSR __divs

    @bytes 0xA0, 0x01;           # LDY #1 -- width minus 1
    @bytes 0x4C, &__copy_mod_result; # JMP __copy_mod_result
end sub;

sub __mods32()
    @bytes 0xA9, 0x04;           # LDA #4
    @bytes 0x20, &__divs;        # JSR __divs

    @bytes 0xA0, 0x03;           # LDY #3 -- width minus 1
    @bytes 0x4C, &__copy_mod_result; # JMP __copy_mod_result
end sub;

sub __copy_mod_result()
# again:
    @bytes 0xB9, &__temp2;       # LDA __temp2, Y
    @bytes 0x91, >&__params+0;   # STA (__params+0), Y
    @bytes 0x88;                 # DEY
    @bytes 0x10, 0xF8;           # BPL again
end sub;

sub divmodu32(left: uint32, right: uint32): (quotient: uint32, remainder: uint32)
	@bytes 0xA9, >&quotient;     # LDA #>quotient
	@bytes 0x85, >&__params+0;   # STA __params+0
	@bytes 0xA9, <&quotient;     # LDA #>quotient
	@bytes 0x85, >&__params+1;   # STA __params+1
	@bytes 0xA9, >&left;         # LDA #>left
	@bytes 0x85, >&__params+2;   # STA __params+2
	@bytes 0xA9, <&left;         # LDA #>left
	@bytes 0x85, >&__params+3;   # STA __params+3
	@bytes 0xA9, >&right;        # LDA #>right
	@bytes 0x85, >&__params+4;   # STA __params+4
	@bytes 0xA9, <&right;        # LDA #>right
	@bytes 0x85, >&__params+5;   # STA __params+5
    @bytes 0x20, &__divu32;      # JSR __divu32
	@bytes 0xA9, >&remainder;    # LDA #>remainder
	@bytes 0x85, >&__params+0;   # STA __params+0
	@bytes 0xA9, <&remainder;    # LDA #<remainder
	@bytes 0x85, >&__params+1;   # STA __params+1
    @bytes 0xA0, 0x03;           # LDY #3 -- width minus 1
    @bytes 0x4C, &__copy_mod_result; # JMP __copy_mod_result
end sub;

sub divmods32(left: int32, right: int32): (quotient: int32, remainder: int32)
	@bytes 0xA9, >&quotient;     # LDA #>quotient
	@bytes 0x85, >&__params+0;   # STA __params+0
	@bytes 0xA9, <&quotient;     # LDA #>quotient
	@bytes 0x85, >&__params+1;   # STA __params+1
	@bytes 0xA9, >&left;         # LDA #>left
	@bytes 0x85, >&__params+2;   # STA __params+2
	@bytes 0xA9, <&left;         # LDA #>left
	@bytes 0x85, >&__params+3;   # STA __params+3
	@bytes 0xA9, >&right;        # LDA #>right
	@bytes 0x85, >&__params+4;   # STA __params+4
	@bytes 0xA9, <&right;        # LDA #>right
	@bytes 0x85, >&__params+5;   # STA __params+5
    @bytes 0x20, &__divs32;      # JSR __divs32
	@bytes 0xA9, >&remainder;    # LDA #>remainder
	@bytes 0x85, >&__params+0;   # STA __params+0
	@bytes 0xA9, <&remainder;    # LDA #<remainder
	@bytes 0x85, >&__params+1;   # STA __params+1
    @bytes 0xA0, 0x03;           # LDY #3 -- width minus 1
    @bytes 0x4C, &__copy_mod_result; # JMP __copy_mod_result
end sub;

sub __mul8u(left: uint8, right: uint8): (result: uint8)
    @bytes 0xA9, 0x00; # LDA #0
    @bytes 0xF0, 0x07; # BEQ start

    # add:
    @bytes 0x18; # CLC
    @bytes 0x6D, &left; # ADC abs
    # loop:
    @bytes 0x0E, &left; # ASL abs
    # start:
    @bytes 0x4E, &right; # LSR abs
    @bytes 0xB0, 0xF4; # BCS add
    @bytes 0xD0, 0xF6; # BNE loop
    @bytes 0x8D, &result; # STA abs
end sub;
