record ArchVarOffsets
    data_offset: int16;
    zp_offset: int16;
end record;

sub arch_classify_vars(ea: [EffectiveAddress])
    sub do_var(var_id: int16, segment: int8)
        var obj: [TypedThing] := find_thing(var_id) as [TypedThing];
        if segment > obj.segment then
            obj.segment := segment;
        end if;
    end sub;

    if is_typed_thing(ea.obj_id) != 0 then
        var segment: int8;
        if (ea.type & EA_DEREF_BEFORE) != 0 then
            segment := SEGMENT_ZEROPAGE;
        else
            segment := SEGMENT_DATA;
        end if;
        do_var(ea.obj_id, segment);
    end if;
    if is_typed_thing(ea.varoff_id) != 0 then
        do_var(ea.obj_id, SEGMENT_DATA);
    end if;
end sub;

sub arch_allocate_var(offsets: [ArchVarOffsets], thing: [TypedThing], width: int16)
    if thing.segment == SEGMENT_ZEROPAGE then
        thing.address := offsets.zp_offset;
        offsets.zp_offset := offsets.zp_offset + width;
    elseif thing.segment == SEGMENT_DATA then
        thing.address := offsets.data_offset;
        offsets.data_offset := offsets.data_offset + width;
    else
        print("bad segment (0x");
        print_hex_i8(thing.segment);
        print(")");
        halt();
    end if;
end sub;

sub arch_propagate_var_offsets(src_offsets: [ArchVarOffsets], dest_offsets: [ArchVarOffsets])
    if src_offsets.zp_offset > dest_offsets.zp_offset then
        dest_offsets.zp_offset := src_offsets.zp_offset;
    end if;

    if src_offsets.data_offset > dest_offsets.data_offset then
        dest_offsets.data_offset := src_offsets.data_offset;
    end if;
end sub;

sub arch_report_offsets(offsets: [ArchVarOffsets])
    print("Zero page: ");
    print_i16(offsets.zp_offset);
    print(" bytes\nData: ");
    print_i16(offsets.data_offset);
    print(" bytes\n");
end sub;
