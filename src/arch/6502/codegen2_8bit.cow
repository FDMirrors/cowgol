sub arch_gen_copy_byte(iop: [BEIop])
    var location: uint8 := find_or_load_value(&iop.left, REG_A|REG_X|REG_Y);
    value_is_changing(&iop.dest);
    make_value_precious_or_save_now(location, &iop.dest);
end sub;

sub arch_gen_not_byte(iop: [BEIop])
    var location: uint8 := find_or_load_value(&iop.left, REG_A);
    value_in_location_will_be_replaced_with(location, &iop.left, &iop.dest);
    write_byte(0x49); # EOR imm
    write_byte(0xFF);
    make_value_precious_or_save_now(location, &iop.dest);
end sub;

sub gen_regular_alu(iop: [BEIop], opcode: uint8)
    $if DEBUG
        print("* GENERATE: byte aluop 0x");
        print_hex_i8(opcode);
        print(": ");
        print_ea(&iop.left);
        print(", ");
        print_ea(&iop.right);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    var location: uint8 := find_or_load_value(&iop.left, REG_A);
    value_in_location_will_be_replaced_with(location, &iop.left, &iop.dest);

    aluop_value(&iop.right, opcode);
    make_value_precious_or_save_now(location, &iop.dest);
end sub;

sub arch_gen_and_byte(iop: [BEIop])
    gen_regular_alu(iop, 0x2D); # AND abs
end sub;

sub arch_gen_or_byte(iop: [BEIop])
    gen_regular_alu(iop, 0x0D); # ORA abs
end sub;

sub arch_gen_eor_byte(iop: [BEIop])
    gen_regular_alu(iop, 0x4D); # EOR abs
end sub;

sub gen_incdec(iop: [BEIop], value: int8)
    var location: uint8 := find_or_load_value(&iop.left, REG_X|REG_Y);
    value_in_location_will_be_replaced_with(location, &iop.left, &iop.dest);

    var opcode: uint8;
    if value == 1 then
        if location == REG_X then
            opcode := 0xE8; # INX
        else
            opcode := 0xC8; # INY
        end if;
    else
        if location == REG_X then
            opcode := 0xCA; # INX
        else
            opcode := 0x88; # INY
        end if;
    end if;
    write_byte(opcode);

    make_value_precious_or_save_now(location, &iop.dest);
end sub;

sub arch_gen_add_byte(iop: [BEIop])
    var location: uint8;
    var opcode: uint8;

    if is_number_thing(iop.right.obj_id) != 0 then
        var value: int8 := get_value_of_number(iop.right.obj_id) as int8;
        if (value == 1) or (value == -1) then
            gen_incdec(iop, value);
            return;
        end if;
    end if;

    write_byte(0x18); # CLC
    gen_regular_alu(iop, 0x6D); # ADC abs
end sub;

sub arch_gen_sub_byte(iop: [BEIop])
    var location: uint8;
    var opcode: uint8;

    if is_number_thing(iop.right.obj_id) != 0 then
        var value: int8 := get_value_of_number(iop.right.obj_id) as int8;
        if (value == 1) or (value == -1) then
            gen_incdec(iop, 0-value);
            return;
        end if;
    end if;

    write_byte(0x38); # SEC
    gen_regular_alu(iop, 0xED); # SBC abs
end sub;

sub lsl_lsr_byte(iop: [BEIop], opcode: uint8, signed: uint8)
    sub signed_shift_adjustment()
        if signed != 0 then
            write_word(0x80C9); # CMP #80
        end if;
    end sub;

    find_or_load_fixed_value(&iop.left, REG_A);
    value_in_location_will_be_replaced_with(REG_A, &iop.left, &iop.dest);

    if is_number_thing(iop.right.obj_id) != 0 then
        var shifts: uint8 := get_value_of_number(iop.right.obj_id) as uint8;
        var maxshifts: uint8;
        if signed == 0 then
            maxshifts := 6;
        else
            maxshifts := 3;
        end if;
        if (shifts >= 0) and (shifts <= maxshifts) then
            while shifts != 0 loop
                signed_shift_adjustment();
                write_byte(opcode);
                shifts := shifts - 1;
            end loop;
            make_value_precious_or_save_now(REG_A, &iop.dest);
            return;
        end if;
    end if;

    var shiftby: uint8 := find_or_load_value(&iop.right, REG_X|REG_Y);
    flush_cached_values(shiftby);

    var entrylabel: uint8 := create_label();
    var looplabel: uint8 := create_label();
    write_cg_6502_conditional_iop(0x80, entrylabel);
    write_label_iop(looplabel);
    signed_shift_adjustment();
    write_byte(opcode);

    write_label_iop(entrylabel);
    if shiftby == REG_X then
        write_byte(0xCA); # DEX
    else
        write_byte(0x88); # DEY
    end if;
    write_cg_6502_conditional_iop(0x10, looplabel);

    make_value_precious_or_save_now(REG_A, &iop.dest);
end sub;

sub arch_gen_lsl_byte(iop: [BEIop])
    lsl_lsr_byte(iop, 0x0A, 0); # ASL A
end sub;

sub arch_gen_lsr_byte(iop: [BEIop])
    lsl_lsr_byte(iop, 0x4A, 0); # LSR A
end sub;

sub arch_gen_asr_byte(iop: [BEIop])
    lsl_lsr_byte(iop, 0x6A, 1); # ROR A
end sub;

sub divu_modu_byte(iop: [BEIop], resultreg: uint8, discardreg: uint8)
    find_or_load_fixed_value(&iop.left, REG_A);
    find_or_load_fixed_value(&iop.right, REG_X);
    value_in_location_will_be_replaced_with(resultreg, &iop.left, &iop.dest);

    # This routine preserves Y.
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_DIVMODU8), 0);

    make_value_precious_or_save_now(resultreg, &iop.dest);
    flush_cached_values(discardreg);
end sub;

sub arch_gen_divu_byte(iop: [BEIop])
    divu_modu_byte(iop, REG_A, REG_X);
end sub;

sub arch_gen_modu_byte(iop: [BEIop])
    divu_modu_byte(iop, REG_X, REG_A);
end sub;
