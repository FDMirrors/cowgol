var string_table: [int8] := LOMEM;
var string_table_top: uint16 := 0;

sub print_string(id: uint16)
    var objectlen: uint8 := string_table[id];
    var i: uint8 := 1;
    while i < objectlen loop
        print_char(string_table[id + i]);
        i := i + 1;
    end loop;
end sub;

string_table[0] := 0;
sub lookup_string(out id: uint16)
    var objectlen: uint8;
    id := 0;
    loop
        objectlen := string_table[id];
        if objectlen == 0 then
            break;
        end if;

        if objectlen == (buffer_index+1) then
            if compare_memory(&input_buffer[0], &string_table[id+1], objectlen - 1) == 0 then
                return;
            end if;
        end if;

        id := id + objectlen;
    end loop;

    objectlen := buffer_index + 1;
    string_table[id] := objectlen;
    copy_memory(&input_buffer[0], &string_table[id+1], buffer_index);
    string_table_top := id + objectlen;
    string_table[string_table_top] := 0;
end sub;

sub identify_token(out tokenid: uint16)
    tokenid := lookup_token();
    if tokenid != 0 then
        return;
    end if;

    tokenid := lookup_string() | 32768;
end sub;

sub read_identifier()
    loop
        input_buffer[buffer_index] := current_byte;
        buffer_index := buffer_index + 1;

        var type: int8 := classify_char_type(peeked_byte);
        if (type != ALPHABETIC) & (type != DIGIT) then
            break;
        end if;
        next_byte();
    end loop;

    input_buffer[buffer_index] := 0;

    var id: uint16 := identify_token();
    print("<");
    print_hex_i16(id);
    print(">");
end sub;

sub read_number()
    loop
        input_buffer[buffer_index] := current_byte;
        buffer_index := buffer_index + 1;

        if classify_char_type(peeked_byte) != DIGIT then
            break;
        end if;
        next_byte();
    end loop;

    input_buffer[buffer_index] := 0;
    print("number<>");
end sub;

sub read_symbol()
    if current_byte == '-' then
        if classify_char_type(peeked_byte) == DIGIT then
            read_number();
            return;
        end if;
    end if;

    input_buffer[0] := current_byte;
    if peeked_byte == '=' then
        input_buffer[1] := peeked_byte;
        buffer_index := 2;
        next_byte();
    else
        buffer_index := 1;
    end if;

    var id: uint16 := lookup_token();
    if id == 0 then
        print("unparseable symbol '");
        print_buffer();
        print("'");
        error_with_location();
    end if;
    print("<");
    print_hex_i16(id);
    print(">");
end sub;

next_byte();
next_byte();
loop
    if current_byte == -1 then
        break;
    end if;

    buffer_index := 0;
    var type: int8 := classify_char_type(current_byte);
    if type == NEWLINE then
        line_number := line_number + 1;
    elseif type == WHITESPACE then
    elseif type == ALPHABETIC then
        read_identifier();
    elseif type == SYMBOL then
        read_symbol();
    elseif type == DIGIT then
        read_number();
    else
        print("unknown char type ");
        print_i8(type);
        error_with_location();
    end if;
    next_byte();
end loop;
print_newline();

print("string table size: ");
print_i16(string_table_top);
print_newline();
