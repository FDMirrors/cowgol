var token_count: uint16 := 0;

sub emit_token(tokenid: uint16)
    token_count := token_count + 1;
    print("<");
    print_hex_i16(tokenid);
    print(">");
end sub;

sub read_identifier()
    loop
        input_buffer[buffer_index] := current_byte;
        buffer_index := buffer_index + 1;

        var type: int8 := classify_char_type(peeked_byte);
        if (type != ALPHABETIC) & (type != DIGIT) then
            break;
        end if;
        next_byte();
    end loop;

    var tokenid: uint16 := lookup_token();
    if tokenid == 0 then
        tokenid := find_thing_by_value(THING_IDENTIFIER, buffer_index, &input_buffer[0]);
        tokenid := tokenid | TOKEN_STRING;
    end if;

    emit_token(tokenid);
end sub;

sub read_number()
    loop
        input_buffer[buffer_index] := current_byte;
        buffer_index := buffer_index + 1;

        if classify_char_type(peeked_byte) != DIGIT then
            break;
        end if;
        next_byte();
    end loop;

    input_buffer[buffer_index] := 0;
    print("number<>");
end sub;

sub read_symbol()
    if current_byte == '-' then
        if classify_char_type(peeked_byte) == DIGIT then
            read_number();
            return;
        end if;
    end if;

    input_buffer[0] := current_byte;
    if peeked_byte == '=' then
        input_buffer[1] := peeked_byte;
        buffer_index := 2;
        next_byte();
    else
        buffer_index := 1;
    end if;

    var tokenid: uint16 := lookup_token();
    if tokenid == 0 then
        print("unparseable symbol '");
        print_buffer();
        print("'");
        error_with_location();
    end if;
    emit_token(tokenid);
end sub;

next_byte();
next_byte();
loop
    if current_byte == -1 then
        break;
    end if;

    buffer_index := 0;
    var type: int8 := classify_char_type(current_byte);
    if type == NEWLINE then
        line_number := line_number + 1;
    elseif type == WHITESPACE then
    elseif type == ALPHABETIC then
        read_identifier();
    elseif type == SYMBOL then
        read_symbol();
    elseif type == DIGIT then
        read_number();
    else
        print("unknown char type ");
        print_i8(type);
        error_with_location();
    end if;
    next_byte();
end loop;
print_newline();

print("thing table size: ");
print_i16(thing_table_top);
print_newline();
save_thing_table("things.dat");

print("tokens emitted: ");
print_i16(token_count);
print_newline();
