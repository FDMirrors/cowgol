sub do_bytes(iop: [BytesIop])
    file_putblock(outfd, &iop.bytes[0] as [int8], iop.byte_count);
end sub;

sub address_of(iop: [AddressIop]): (address: uint16)
    var thing: [DataThing] := find_thing(iop.thing_id) as [DataThing];
    address := arch_calculate_address(thing) + iop.offset;
 end sub;

sub do_address(iop: [AddressIop])
    var address: uint16 := address_of(iop);
    file_putblock(outfd, &address as [int8], address@bytes);
end sub;

sub do_addresshi(iop: [AddressIop])
    var address: uint16 := address_of(iop);
    file_putchar(outfd, address >> 8);
end sub;

sub do_addresslo(iop: [AddressIop])
    var address: uint16 := address_of(iop);
    file_putchar(outfd, address);
end sub;

sub emit_subroutine()
    file_seek(outfd, arch_calculate_fileoffset(current_subroutine as [DataThing]));
    print("0x");
    print_hex_i16(arch_calculate_address(current_subroutine as [DataThing]));
    print(": ");
    show_name_of(current_subroutine_id);
    print_newline();

    loop
        var iop: [Iop] := read_iop();
        var iopkind: uint8 := iop.iop_kind;

        if iopkind == IOP_END then
            break;
        elseif iopkind == IOP_BYTES then
            do_bytes(iop as [BytesIop]);
        elseif iopkind == IOP_ADDRESS then
            do_address(iop as [AddressIop]);
        elseif iopkind == IOP_ADDRESSHI then
            do_addresshi(iop as [AddressIop]);
        elseif iopkind == IOP_ADDRESSLO then
            do_addresslo(iop as [AddressIop]);
        else
            arch_emit_iop(iop);
        end if;
    end loop;
end sub;

sub emit_subroutines()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        current_subroutine_id := iheader.thing_id;
        current_subroutine := find_thing(current_subroutine_id) as [SubroutineThing];
        if current_subroutine.segment <= SEGMENT_OMIT then
            print("bad subroutine segment");
            halt();
        else
            current_subroutine.segment := SEGMENT_CODE;
            emit_subroutine();
        end if;
    end loop;
end sub;

sub emit_constants()
    var thing: [StringThing];
    var id: uint16 := 1;

    sub emit()
        file_seek(outfd, arch_calculate_fileoffset(thing as [DataThing]));
        file_seek(strings_fd, thing.string_id + 1);

        #print("0x");
        #print_hex_i16(arch_calculate_address(thing as [DataThing]));
        #print(": ");
        #show_name_of(id);
        #print_newline();

        var len: uint8 := thing.string_size;
        while len != 0 loop
            var c: int8 := file_getchar(strings_fd);
            file_putchar(outfd, c);
            len := len - 1;
        end loop;
        file_putchar(outfd, 0);
    end sub;

    loop
        thing := &thing_table[id] as [StringThing];
        if thing.thing_size == 0 then
            break;
        end if;
        if thing.thing_type == THING_STRING then
            if thing.segment == SEGMENT_CONST then
                emit();
            end if;
        end if;
        id := id + thing.thing_size;
    end loop;
end sub;

arch_emit_header();
emit_subroutines();
emit_constants();

file_close(outfd);
