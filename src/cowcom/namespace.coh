sub LookupSymbolInNamespace(namespace: [Namespace], name: string): (symbol: [Symbol])
	symbol := namespace.first;
	while symbol != (0 as [Symbol]) loop
		if StrCmp(symbol.name, name) == 0 then
			while symbol.kind == TYPEDEF loop
				symbol := symbol.alias;
			end loop;
			return;
		end if;
		symbol := symbol.next;
	end loop;
	symbol := (0 as [Symbol]);
end sub;

sub LookupSymbol(namespace: [Namespace], name: string): (symbol: [Symbol])
	if namespace == (0 as [Namespace]) then
		namespace := &current_subr.namespace;
	end if;
	
	while namespace != (0 as [Namespace]) loop
		symbol := LookupSymbolInNamespace(namespace, name);
		if symbol != (0 as [Symbol]) then
			return;
		end if;
		namespace := namespace.parent;
	end loop;

	symbol := (0 as [Symbol]);
end sub;

sub AddToNamespace(namespace: [Namespace], symbol: [Symbol])
	if namespace.last == (0 as [Symbol]) then
		namespace.first := symbol;
		namespace.last := symbol;
	else
		namespace.last.next := symbol;
		namespace.last := symbol;
	end if;
end sub;

# Consumes the string in Token
sub AddSymbol(namespace: [Namespace], token: [Token]): (symbol: [Symbol])
	if namespace == (0 as [Namespace]) then
		namespace := &current_subr.namespace;
	end if;

	symbol := Alloc(@bytesof Symbol) as [Symbol];
	if token != (0 as [Token]) then
		if LookupSymbolInNamespace(namespace, token.string) != (0 as [Symbol]) then
			StartError();
			print("symbol '");
			print(token.string);
			print("' is already defined");
			EndError();
		end if;

		symbol.name := token.string;
		token.string := (0 as string);
	end if;

	AddToNamespace(namespace, symbol);
end sub;

# Consumes the string in Token
sub AddAlias(namespace: [Namespace], token: [Token], real: [Symbol]): (symbol: [Symbol])
	symbol := AddSymbol(namespace, token);
	symbol.kind := TYPEDEF;
	symbol.alias := real;
end sub;

sub AddAliasString(name: string, real: [Symbol])
	var token: Token;
	token.string := name;
	var symbol := AddAlias(0 as [Namespace], &token, real);
end sub;

sub CheckNotPartialType(type: [Symbol])
	if type.typedata.kind == TYPE_PARTIAL then
		StartError();
		print("'");
		print(type.name);
		print("' is a partial type");
		EndError();
	end if;
end sub;

sub MakeNumberType(width: uint8, alignment: uint8, is_signed: uint8, name: string): (symbol: [Symbol])
	symbol := Alloc(@bytesof Symbol) as [Symbol];
	symbol.kind := TYPE;
	symbol.typedata.kind := TYPE_NUMBER;
	symbol.typedata.width := width as uint16;
	symbol.typedata.stride := width as uint16;
	symbol.typedata.alignment := alignment;
	symbol.typedata.numbertype.is_signed := is_signed;
	symbol.name := name;
	AddToNamespace(&current_subr.namespace, symbol);
end sub;

