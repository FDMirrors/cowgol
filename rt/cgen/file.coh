# System call numbers are here:
# https://w3challs.com/syscalls/?arch=arm_thumb

const FCB_BUFFER := 512;
record FCB
	fd: uint32;
	bufferptr: uint16; # byte just read
	dirty: uint8;
	block: uint32;
	buffer: uint8[FCB_BUFFER];
end record;

sub fcb_i_blockin(fcb: [FCB])
	MemSet(&fcb.buffer[0], 0, FCB_BUFFER);

	var fd := fcb.fd;
	var dma := &fcb.buffer[0];
	var pos := fcb.block << 9;
	@asm "pread(", fd, ", (void*)(intptr_t)", dma, ", ", FCB_BUFFER, ", ", pos, ");";

	fcb.dirty := 0;
end sub;

sub fcb_i_blockout(fcb: [FCB])
	if fcb.dirty != 0 then
		var fd := fcb.fd;
		var dma := &fcb.buffer[0];
		var pos := fcb.block << 9;
		@asm "pwrite(", fd, ", (void*)(intptr_t)", dma, ", ", FCB_BUFFER, ", ", pos, ");";
		fcb.dirty := 0;
	end if;
end sub;

sub fcb_i_changeblock(fcb: [FCB], newblock: uint32)
	if newblock != fcb.block then
		fcb_i_blockout(fcb);
		fcb.block := newblock;
		fcb_i_blockin(fcb);
	end if;
end sub;

sub fcb_i_open(fcb: [FCB], filename: [uint8], flags: uint32): (errno: uint8)
	MemSet(fcb as [uint8], 0, @bytesof FCB);
	fcb.bufferptr := FCB_BUFFER - 1;
	fcb.block := -1;

	@asm "errno = 0;";
	var fd: int32;
	@asm fd, " = open((char*)(intptr_t)", filename, ", ", flags, ", ", 0o666, ");";
	fcb.fd := fd as uint32;
	if fd < 0 then
		@asm errno, " = errno;";
	else
		errno := 0;
	end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8)
	(errno) := fcb_i_open(fcb, filename, 0o0000); # O_RDONLY
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8)
	(errno) := fcb_i_open(fcb, filename, 0o0002); # O_RDWR
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8)
	(errno) := fcb_i_open(fcb, filename, 0o1102); # O_RDWR|O_CREAT|O_TRUNC
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8)
	fcb_i_blockout(fcb);

	var fd := fcb.fd;
	@asm "errno = 0;";
	@asm "close(", fd, ");";
	@asm errno, " = errno;";
end sub;

sub FCBSeek(fcb: [FCB], pos: uint32)
	pos := pos - 1; # seek to *previous* character
	var newblock := pos >> 9;
	var newptr := (pos as uint16) & (FCB_BUFFER-1);
	fcb_i_changeblock(fcb, newblock);
	fcb.bufferptr := newptr;
end sub;

sub FCBPos(fcb: [FCB]): (pos: uint32)
	pos := ((fcb.block << 9) | (fcb.bufferptr as uint32)) + 1;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32)
	fcb_i_blockout(fcb);

	var fd := fcb.fd;
	@asm len, " = lseek(", fd, ", 0, SEEK_END);";
	len := (len + FCB_BUFFER - 1) & ~(FCB_BUFFER - 1);
end sub;

sub fcb_i_nextchar(fcb: [FCB])
	fcb.bufferptr := fcb.bufferptr + 1;
	if fcb.bufferptr == FCB_BUFFER then
		fcb_i_changeblock(fcb, fcb.block + 1);
		fcb.bufferptr := 0;
	end if;
end sub;

sub FCBGetChar(fcb: [FCB]): (c: uint8)
	fcb_i_nextchar(fcb);
	c := fcb.buffer[fcb.bufferptr];
end sub;

sub FCBPutChar(fcb: [FCB], c: uint8)
	fcb_i_nextchar(fcb);
	fcb.buffer[fcb.bufferptr] := c;
	fcb.dirty := 1;
end sub;

include "common-file.coh";

