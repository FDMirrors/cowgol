
sub print_queue()
    print("queue: ");
    var i: uint8 := 0;
    while i < queue_depth loop
        print(" 0x");
        print_hex_i8(queue[i].iop_kind);
        i := i + 1;
    end loop;
end sub;

sub apply_rules()
    if global_stack_rules() == 1 then
        return;
#    if arch_rules() == 1 then
#        return;
#    elseif global_rules() == 1 then
#        return;
    else
        print("unmatched iops: ");
        print_queue();
        halt();
    end if;
end sub;

sub process_subroutine(subroutine_id: uint16)
    var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
    print("subroutine: ");
    show_name_of(subroutine_id);
    print_newline();

    init_stack();
    init_temporaries();
    queue_depth := 0;
    run_out_of_iops := 0;
    init_allocator();

    loop
        fill_queue();
        print_stack();
        print_queue(); print_newline();

        if queue[0].iop_kind == IOP_END then
            break;
        end if;

        apply_rules();
    end loop;
    write_end_iop();
end sub;

sub process()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        write_iop_header(iheader);
        process_subroutine(iheader.thing_id);
    end loop;
    write_terminating_iop_header();
end sub;

print("CODEGEN\n");
load_thing_table("things.dat");
init_iop_reader("iops.dat");
init_iop_writer("iops-out.dat");
process();
save_thing_table("things.dat");

