record CpmFCB
	dr: uint8;
	f: uint8[11];
	ex: uint8;
	s1: uint8;
	s2: uint8;
	rc: uint8;
	d: uint8[16];
	cr: uint8;
	r: uint16;
	r2: uint8;
end record;

record FCB
	cpm: CpmFCB;
	buffer: uint8[128];
	bufferptr: uint8;
	dirty: uint8;
end record;

sub memset(buf: [uint8], byte: uint8, len: uint16)
	var bufend := buf + len;
	loop
		if buf == bufend then
			return;
		end if;
		[buf] := byte;
		buf := buf + 1;
	end loop;
end sub;

sub file_i_init(file: [FCB], filename: [uint8])
	sub fill(dest: [uint8], src: [uint8], len: uint8): (srcout: [uint8])
		loop
			var c := [src];
			if (c == 0) or (c == '.') then
				c := ' ';
			elseif (c == '*') then
				c := '?';
			else
				src := src + 1;
			end if;
			if (c >= 'a') and (c <= 'z') then
				c := c - ('a' - 'A');
			end if;
			[dest] := c;
			dest := dest + 1;

			len := len - 1;
			if len == 0 then
				break;
			end if;
		end loop;
		srcout := src;
	end sub;

	memset(file as [uint8], 0, @bytesof FCB);
	memset(&file.cpm.f[0] as [uint8], ' ', 11);
	filename := fill(&file.cpm.f[0], filename, 8);

	loop
		var c := [filename];
		if c == 0 then
			return;
		end if;
		if c == '.' then
			break;
		end if;
		filename := filename + 1;
	end loop;

	filename := fill(&file.cpm.f[8], filename+1, 3);
end sub;

sub fcb_i_gbpb(fcb: [FCB], c: uint8)
	var cpmfcb := &fcb.cpm;
	var dma := &fcb.buffer[0];

	@asm "mvi c, 27"; # SET DMA
	@asm "lhld", dma;
	@asm "xchg";
	@asm "call 5";

	@asm "lda", c;
	@asm "mov c, a";
	@asm "lhld", cpmfcb;
	@asm "xchg";
	@asm "call 5";
end sub;

sub fcb_i_blockin(fcb: [FCB])
	memset(&fcb.buffer[0], 0, 128);
	fcb_i_gbpb(fcb, 33); # READ RANDOM
	fcb.dirty := 0;
end sub;

sub fcb_i_blockout(fcb: [FCB])
	if fcb.dirty != 0 then
		fcb_i_gbpb(fcb, 34); # WRITE RANDOM
		fcb.dirty := 0;
	end if;
end sub;

sub fcb_i_changeblock(fcb: [FCB], newblock: uint16)
	if newblock != fcb.cpm.r then
		fcb_i_blockout(fcb);
		fcb.cpm.r := newblock;
		fcb_i_blockin(fcb);
	end if;
end sub;

sub fcb_i_convert_a_to_error()
	@asm "cpi 0xff";
	@asm "mvi a, 0";
	@asm "rnz";
	@asm "inc a";
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8)
	file_i_init(fcb, filename);

	var cpmfcb := &fcb.cpm;
	@asm "mvi c, 15"; # OPEN_FILE
	@asm "lhld", cpmfcb;
	@asm "xchg";
	@asm "call 5";
	@asm "call", fcb_i_convert_a_to_error;
	@asm "sta", errno;

	if errno == 0 then
		fcb_i_blockin(fcb);
	end if;
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8)
	(errno) := FCBOpenIn(fcb, filename);
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8)
	file_i_init(fcb, filename);

	var cpmfcb := &fcb.cpm;
	@asm "mvi c, 19"; # DELETE_FILE
	@asm "lhld", cpmfcb;
	@asm "xchg";
	@asm "call 5";

	@asm "mvi c, 22"; # CREATE_FILE
	@asm "lhld", cpmfcb;
	@asm "xchg";
	@asm "call 5";
	@asm "call", fcb_i_convert_a_to_error;
	@asm "sta", errno;

	if errno == 0 then
		fcb_i_blockin(fcb);
	end if;
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8)
	fcb_i_blockout(fcb);

	var cpmfcb := &fcb.cpm;
	@asm "mvi c, 16"; # CLOSE_FILE
	@asm "lhld", cpmfcb;
	@asm "xchg";
	@asm "call 5";
	@asm "call", fcb_i_convert_a_to_error;
	@asm "sta", errno;
end sub;

sub FCBSeek(fcb: [FCB], pos: uint32)
	var newblock := (pos >> 7) as uint16;
	var newptr := (pos as uint8) & 127;
	fcb_i_changeblock(fcb, newblock);
	fcb.bufferptr := newptr;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32)
	var oldblock := fcb.cpm.r;

	var cpmfcb := &fcb.cpm;
	@asm "mvi c, 35"; # COMPUTE FILE SIZE
	@asm "lhld", cpmfcb;
	@asm "xchg";
	@asm "call 5";

	len := ([&fcb.cpm.r as [uint32]] & 0x00ffffff) << 7;
	fcb.cpm.r := oldblock;
end sub;

