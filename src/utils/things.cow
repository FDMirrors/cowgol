record Thing
    thing_type: uint8;
    payload: int8[0];
end record;

# If you add anything here, remember to update the size in mk-token-names.awk.
record RootThing: Thing
    archsizes: ArchSizes;
    code_size: uint16;
    const_size: uint16;
    main_subroutine_id: uint16;
end record;

record IdentifierThing: Thing
    string_id: uint16;
end record;

record TokenThing: IdentifierThing
    token_flags: uint8;
end record;

record NamespaceThing: Thing
    previous_namespace: uint16;
    first_symbol: uint16;
end record;

record MemberThing: Thing
    type_id: uint16;
    offset: uint16;
end record;

record SymbolThing: Thing
    name_id: uint16;
    value_id: uint16;
    next_symbol: uint16;
end record;

record LabelThing: Thing
    label: uint8;
end record;

record TypeThing: Thing
    width: uint16;
end record;

record RecordThing: TypeThing
    superclass_id: uint16;
    namespace_id: uint16;
end record;

record NumericThing: TypeThing
end record;

record WithElementsThing: TypeThing
    element_type_id: uint16;
    index_type_id: uint16;
end record;

record PointerThing: WithElementsThing
end record;

record ArrayThing: WithElementsThing
    element_count: uint16;
end record;

const SEGMENT_UNKNOWN := 0; # here, the address field is used for record-keeping
const SEGMENT_OMIT := 1;
const SEGMENT_CODE := 2;
const SEGMENT_CONST := 3;

record DataThing: Thing
    segment: uint8;
    address: uint16; # or sundry other things if segment == SEGMENT_UNKNOWN
end record;

record StringThing: DataThing
    string_id: uint16;
    string_size: uint8;
end record;

record NumberThing: DataThing
    value: int32;
end record;

record AddressOfThing: DataThing
    thing_id: uint16;
    offset: uint16;
end record;

record SubroutineThing: DataThing
    namespace_id: uint16;
    label_count: uint8;
    input_parameter_count: uint8;
    output_parameter_count: uint8;
end record;

record TypedThing: DataThing
    owner_id: uint16;
    type_id: uint16;
end record;

record VariableThing: TypedThing
end record;

const DIRECTION_IN  := 0;
const DIRECTION_OUT := 1;
record ParameterThing: VariableThing
    direction: uint8;
end record;

const THING_SUBROUTINE := 1;
const THING_VARIABLE   := 2;
const THING_PARAMETER  := 3;
const THING_ADDRESSOF  := 4;
const THING_RECORDT    := 5;
const THING_POINTERT   := 6;
const THING_ARRAYT     := 7;
const THING_CONSTANTT  := 8;
const THING_UNSIGNEDT  := 9;
const THING_SIGNEDT    := 10;

const THING_STRING     := 11;
const THING_IDENTIFIER := 12;
const THING_NUMBER     := 13;
const THING_NAMESPACE  := 14;
const THING_TOKEN      := 15;
const THING_SYMBOL     := 16;
const THING_MEMBER     := 17;
const THING_ROOT       := 18; # singleton
const THING_LABEL      := 19;

const THING_CLASS_DATA         := 0b0000_0001;
const THING_CLASS_TYPE         := 0b0000_0010;
const THING_CLASS_WITHMEMBERS  := 0b0000_0100;
const THING_CLASS_WITHELEMENTS := 0b0000_1000;
const THING_CLASS_SCALAR       := 0b0001_0000;
const THING_CLASS_NUMERIC      := 0b0010_0000;
const THING_CLASS_TYPED        := 0b0100_0000;

var thing_classes: uint8[11] := {
    0,                                                       # null
    THING_CLASS_DATA,                                        # THING_SUBROUTINE
    THING_CLASS_DATA|THING_CLASS_TYPED,                      # THING_VARIABLE
    THING_CLASS_DATA|THING_CLASS_TYPED,                      # THING_PARAMETER
    THING_CLASS_DATA,                                        # THING_ADDRESSOF
    THING_CLASS_TYPE|THING_CLASS_WITHMEMBERS,                # THING_RECORDT
    THING_CLASS_TYPE|THING_CLASS_SCALAR|THING_CLASS_WITHMEMBERS|THING_CLASS_WITHELEMENTS, # THING_POINTERT
    THING_CLASS_TYPE|THING_CLASS_WITHELEMENTS,               # THING_ARRAYT
    THING_CLASS_TYPE|THING_CLASS_SCALAR|THING_CLASS_NUMERIC, # THING_CONSTANTT
    THING_CLASS_TYPE|THING_CLASS_SCALAR|THING_CLASS_NUMERIC, # THING_UNSIGNEDT
    THING_CLASS_TYPE|THING_CLASS_SCALAR|THING_CLASS_NUMERIC, # THING_SIGNEDT
};

var thing_sizes: uint8[20] := {
    0,                     # null
    SubroutineThing@bytes, # THING_SUBROUTINE
    VariableThing@bytes,   # THING_VARIABLE
    ParameterThing@bytes,  # THING_PARAMETER
    AddressOfThing@bytes,  # THING_ADDRESSOF
    RecordThing@bytes,     # THING_RECORDT
    PointerThing@bytes,    # THING_POINTERT
    ArrayThing@bytes,      # THING_ARRAYT
    TypeThing@bytes,       # THING_CONSTANTT
    TypeThing@bytes,       # THING_UNSIGNEDT
    TypeThing@bytes,       # THING_SIGNEDT
    StringThing@bytes,     # THING_STRING
    IdentifierThing@bytes, # THING_IDENTIFIER
    NumberThing@bytes,     # THING_NUMBER
    NamespaceThing@bytes,  # THING_NAMESPACE
    TokenThing@bytes,      # THING_TOKEN
    SymbolThing@bytes,     # THING_SYMBOL
    MemberThing@bytes,     # THING_MEMBER
    RootThing@bytes,       # THING_ROOT
    LabelThing@bytes,      # THING_LABEL
};

var thing_table: int8[THINGSTABLE_SIZE];
var thing_table_top: uint16 := 1;
thing_table[thing_table_top] := 0;

var root: [RootThing];

sub check_for_thing_table_overflow()
    if thing_table_top > thing_table@size then
        print("thing table overflow\n");
        exit(1);
    end if;
end sub;

sub create_thing(type: uint8, size: uint8): (id: uint16)
    id := thing_table_top;
    var thing: [Thing] := &thing_table[id] as [Thing];
    zero_memory(thing as [int8], (size + 1) as uint16);
    thing.thing_type := type;
    thing_table_top := thing_table_top + (size as uint16);
    check_for_thing_table_overflow();
end sub;

sub find_thing(id: uint16): (thing: [Thing])
    if id >= thing_table_top then
        print("thing id 0x");
        print_hex_i16(id);
        print(" out of bounds");
        print_newline();
        exit(1);
    end if;

    thing := &thing_table[id] as [Thing];
end sub;

sub next_thing(thing_id: uint16): (new_id: uint16)
    var thing: [Thing] := find_thing(thing_id);
    new_id := thing_id + (thing_sizes[thing.thing_type] as uint16);
end sub;

sub get_thing_type(thing_id: uint16): (type: uint8)
    if thing_id == 0 then
        type := 0;
    else
        var thing: [Thing] := find_thing(thing_id);
        type := thing.thing_type;
    end if;
end sub;

sub is_thing_type(id: uint16, type: uint8): (yes: uint8)
    if get_thing_type(id) == type then
        yes := 1;
    else
        yes := 0;
    end if;
end sub;

sub get_thing_class(id: uint16): (class: uint8)
    var type: uint8 := get_thing_type(id);
    if type >= thing_classes@size then
        class := 0;
    else
        class := thing_classes[type];
    end if;
end sub;

sub is_thing_class(id: uint16, mask: uint8): (yes: uint8)
    if (get_thing_class(id) & mask) != 0 then
        yes := 1;
    else
        yes := 0;
    end if;
end sub;

sub find_thing_by_value(template: [Thing]): (id: uint16)
    id := 1;
    loop
        var thing: [Thing] := &thing_table[id] as [Thing];
        if thing.thing_type == 0 then
            break;
        end if;
        if thing.thing_type == template.thing_type then
            if thing.thing_type == template.thing_type then
                if compare_memory(template as [int8], thing as [int8], thing_sizes[thing.thing_type] as uint16) == 0 then
                    return;
                end if;
            end if;
        end if;

        id := next_thing(id);
    end loop;

    id := 0;
end sub;

sub add_thing(template: [Thing]): (id: uint16)
    id := thing_table_top;
    var size: uint16 := thing_sizes[template.thing_type] as uint16;
    copy_memory(template as [int8], &thing_table[id], size);
    thing_table_top := id + size;
    check_for_thing_table_overflow();
    thing_table[thing_table_top] := 0;
end sub;

sub add_thing_by_value(template: [Thing]): (id: uint16)
    id := find_thing_by_value(template);
    if id == 0 then
        id := add_thing(template);
    end if;
end sub;

sub add_number_by_value(value: int32): (id: uint16)
    var buf: NumberThing;
    zero_memory(&buf as [int8], buf@bytes);
    buf.thing_type := THING_NUMBER;
    buf.value := value;
    id := add_thing_by_value(&buf as [Thing]);
end sub;

sub get_value_of_number(thing_id: uint16): (value: int32)
    if thing_id == 0 then
        value := 0;
    else
        var thing: [NumberThing] := find_thing(thing_id) as [NumberThing];
        value := thing.value;
    end if;
end sub;

sub add_addressof_by_value(thing_id: uint16, offset: uint16): (id: uint16)
    var buf: AddressOfThing;
    zero_memory(&buf as [int8], buf@bytes);
    buf.thing_type := THING_ADDRESSOF;
    buf.thing_id := thing_id;
    buf.offset := offset;
    id := add_thing_by_value(&buf as [Thing]);
end sub;

sub find_token_by_string(string_id: uint16): (id: uint16)
    id := 1;
    loop
        var thing: [IdentifierThing] := &thing_table[id] as [IdentifierThing];
        if thing.thing_type == 0 then
            break;
        elseif (thing.thing_type == THING_TOKEN) and (thing.string_id == string_id) then
            return;
        end if;
        id := next_thing(id);
    end loop;

    id := 0;
end sub;

sub find_symbol_by_value(value_id: uint16): (symbol_id: uint16)
    symbol_id := 1;
    loop
        var thing: [SymbolThing] := &thing_table[symbol_id] as [SymbolThing];
        if thing.thing_type == 0 then
            break;
        end if;
        if (thing.thing_type == THING_SYMBOL) and (thing.value_id == value_id) then
            return;
        end if;

        symbol_id := next_thing(symbol_id);
    end loop;
    symbol_id := 0;
end sub;

sub find_name_of_value(value_id: uint16): (identifier_id: uint16)
    var symbol_id: uint16 := find_symbol_by_value(value_id);
    if symbol_id != 0 then
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        identifier_id := symbol.name_id;
    else
        identifier_id := 0;
    end if;
end sub;

sub show_identifier(identifier_id: uint16)
    if identifier_id == 0 then
        print("(null)");
        return;
    end if;

    var thing: [Thing] := find_thing(identifier_id);
    if (thing.thing_type == THING_STRING) then
        var stringthing: [StringThing] := thing as [StringThing];
        show_string(stringthing.string_id);
    elseif (thing.thing_type == THING_TOKEN) or (thing.thing_type == THING_IDENTIFIER) then
        var identifierthing: [IdentifierThing] := thing as [IdentifierThing];
        show_string(identifierthing.string_id);
    else
        print("(not an identifier: 0x");
		print_hex_i16(identifier_id);
		print_char(':');
        print_hex_i8(thing.thing_type);
        print(")");
    end if;
end sub;

sub get_token_flags(token_id: uint16): (token_flags: uint8)
    var token: [TokenThing] := find_thing(token_id) as [TokenThing];
    if token.thing_type == THING_TOKEN then
        token_flags := token.token_flags;
    else
        token_flags := 0;
    end if;
end sub;

sub is_data_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_DATA);
end sub;

sub is_type_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_TYPE);
end sub;

sub is_typed_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_TYPED);
end sub;

sub is_number_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_type(thing_id, THING_NUMBER);
end sub;

sub is_string_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_type(thing_id, THING_STRING);
end sub;

sub is_addressof_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_type(thing_id, THING_ADDRESSOF);
end sub;

sub is_identifier_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_type(thing_id, THING_IDENTIFIER);
end sub;

sub is_number_type_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_NUMERIC);
end sub;

sub is_signed_type_thing(thing_id: uint16): (yes: uint8)
    var type: uint8 := get_thing_type(thing_id);
    if (type == THING_SIGNEDT) or (type == THING_CONSTANTT) then
        yes := 1;
    else
        yes := 0;
    end if;
end sub;

sub is_indexable_type_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_WITHELEMENTS);
end sub;

sub is_memberable_type_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_WITHMEMBERS);
end sub;

sub is_scalar_type_thing(thing_id: uint16): (yes: uint8)
    yes := is_thing_class(thing_id, THING_CLASS_SCALAR);
end sub;

sub save_thing_table(filename: [int8])
    print("writing thing table: ");
    print_i16(thing_table_top);
    print(" bytes\n");

    file_save(filename, &thing_table[0], thing_table_top);
end sub;

sub load_thing_table(filename: [int8])
    print("reading thing table: ");
    thing_table_top := file_load(filename, &thing_table[0], thing_table@size);
    print_i16(thing_table_top);
    print(" bytes\n");

    if thing_table_top > thing_table@size then
        print("thing table on disk too big (your configuration is broken)\n");
        exit(1);
    end if;
    thing_table[thing_table_top] := 0;

    root := find_thing(1) as [RootThing];
end sub;

sub print_thing(thing_id: uint16)
    if thing_id == 0 then
        print("(null)");
        return;
    end if;

    sub print_prefix(s: [int8], thing_id: uint16)
        print(s);
        print_char('.');
        print_hex_i16(thing_id);
        print_char(':');
    end sub;

    if is_number_thing(thing_id) != 0 then
        print_char('#');
        print_i32(get_value_of_number(thing_id) as uint32);
        print_char('.');
        print_hex_i16(thing_id);
    elseif is_identifier_thing(thing_id) != 0 then
        print_prefix("ID", thing_id);
        show_identifier(thing_id);
    elseif is_string_thing(thing_id) != 0 then
        print_prefix("STR", thing_id);
        show_identifier(thing_id);
    else
        var identifier_id: uint16 := find_name_of_value(thing_id);
        if is_type_thing(thing_id) != 0 then
            print("TYPE");
            var typething: [TypeThing] := find_thing(thing_id) as [TypeThing];
            print_i16(typething.width);
            print_prefix("", thing_id);
        elseif is_typed_thing(thing_id) != 0 then
            print_prefix("VAR", thing_id);
        else
            var thingtype: uint8 := get_thing_type(thing_id);
            if thingtype == THING_SUBROUTINE then
                print_prefix("SUB", thing_id);
            elseif thingtype == THING_ADDRESSOF then
                print_prefix("ADR", thing_id);
            else
                print_prefix("UNK", thing_id);
            end if;
        end if;

        if identifier_id != 0 then
            show_identifier(identifier_id);
        else
            print("(anonymous)");
        end if;
    end if;
end sub;
