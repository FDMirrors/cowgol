var current_namespace_id: uint16;

sub find_symbol_in_namespace(identifier_id: uint16, namespace_id: uint16): (symbol_id: uint16)
    var namespace_thing: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];
    symbol_id := namespace_thing.first_symbol;

    while symbol_id != 0 loop
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        if symbol.name_id == identifier_id then
            return;
        end if;
        symbol_id := symbol.next_symbol;
    end loop;

    symbol_id := 0;
end sub;

sub find_symbol_recursively(identifier_id: uint16, namespace_id: uint16): (symbol_id: uint16)
    while namespace_id != 0 loop
        symbol_id := find_symbol_in_namespace(identifier_id, namespace_id);
        if symbol_id != 0 then
            return;
        end if;

        var namespace_thing: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];
        namespace_id := namespace_thing.previous_namespace;
    end loop;

    symbol_id := 0;
end sub;

sub find_symbol(identifier_id: uint16): (symbol_id: uint16)
    symbol_id := find_symbol_recursively(identifier_id, current_namespace_id);
end sub;

sub find_symbol_or_fail(identifier_id: uint16): (symbol_id: uint16)
    symbol_id := find_symbol(identifier_id);
    if symbol_id == 0 then
        print("symbol ");
        show_identifier(identifier_id);
        print(" not found in any scope");
        halt();
    end if;
end sub;

sub deref_symbol(identifier_id: uint16): (value_id: uint16)
    var symbol_id: uint16 := find_symbol(identifier_id);
    if symbol_id != 0 then
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        value_id := symbol.value_id;
    else
        value_id := 0;
    end if;
end sub;

sub deref_symbol_or_fail(identifier_id: uint16): (value_id: uint16)
    var symbol_id: uint16 := find_symbol_or_fail(identifier_id);
    var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
    value_id := symbol.value_id;
end sub;

sub add_symbol(identifier_id: uint16, value_id: uint16, namespace_id: uint16)
    if find_symbol_in_namespace(identifier_id, namespace_id) != 0 then
        print("symbol ");
        show_identifier(identifier_id);
        print(" is already defined in this namespace");
        halt();
    end if;

    var symbol_id: uint16 := create_thing(THING_SYMBOL, SymbolThing@bytes);
    var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
    var namespace_thing: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];

    symbol.next_symbol := namespace_thing.first_symbol;
    namespace_thing.first_symbol := symbol_id;
    symbol.name_id := identifier_id;
    symbol.value_id := value_id;
end sub;

sub find_main_subroutine(): (subroutine_id: uint16)
    var root: [RootThing] := find_thing(1) as [RootThing];
    subroutine_id := root.main_subroutine_id;
end sub;

sub find_nth_parameter(subroutine_id: uint16, direction: uint8, parameter: uint8):
        (parameter_id: uint16)
    var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
    var parameter_count: uint8;
    if direction == DIRECTION_IN then
        parameter_count := subroutine.input_parameter_count;
    else
        parameter_count := subroutine.output_parameter_count;
    end if;

    var namespace_thing: [NamespaceThing] := find_thing(subroutine.namespace_id) as [NamespaceThing];
    var symbol_id: uint16 := namespace_thing.first_symbol;
    var symbol: [SymbolThing];
    var parameter_thing: [ParameterThing];
    var i: uint8 := parameter_count - parameter;
    while i > 0 loop
        if symbol_id == 0 then
            print("asked for ");
            if direction == DIRECTION_IN then
                print("input");
            else
                print("output");
            end if;
            print(" parameter ");
            print_i8(parameter);
            print(" of ");
            show_name_of(subroutine_id);
            print(", which has ");
            print_i8(parameter_count);
            halt();
        end if;
        symbol := find_thing(symbol_id) as [SymbolThing];
        parameter_id := symbol.value_id;
        parameter_thing := find_thing(parameter_id) as [ParameterThing];
        if (parameter_thing.thing_type == THING_PARAMETER)
                and (parameter_thing.direction == direction) then
            i := i - 1;
            if i == 0 then
                return;
            end if;
        end if;
        symbol_id := symbol.next_symbol;
    end loop;
end sub;
