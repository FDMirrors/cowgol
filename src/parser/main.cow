var break_label_id: uint16;
var continue_label_id: uint16;
var if_true_label_id: uint16;
var if_false_label_id: uint16;
var if_end_label_id: uint16;

sub create_namespace(parent_id: uint16): (namespace_id: uint16)
    namespace_id := create_thing(THING_NAMESPACE, NamespaceThing@bytes);
    var namespace_thing: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];
    namespace_thing.previous_namespace := parent_id;
end sub;

sub create_function(): (subroutine_id: uint16, namespace_id: uint16)
    subroutine_id := create_thing(THING_SUBROUTINE, SubroutineThing@bytes);
    namespace_id := create_namespace(current_namespace_id);
    var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
    subroutine.namespace_id := namespace_id;
end sub;

sub push_loop()
    lexical_push(break_label_id);
    lexical_push(continue_label_id);
    lexical_push(TOKEN_LOOP);
end sub;

sub pop_loop()
    emit_goto(continue_label_id);
    emit_label(break_label_id);

    lexical_pop_scope_type(TOKEN_LOOP);
    continue_label_id := lexical_pop();
    break_label_id := lexical_pop();
end sub;

sub push_if()
    lexical_push(if_true_label_id);
    lexical_push(if_false_label_id);
    lexical_push(if_end_label_id);
    lexical_push(TOKEN_IF);
end sub;

sub pop_if()
    lexical_pop_scope_type(TOKEN_IF);
    if_end_label_id := lexical_pop();
    if_false_label_id := lexical_pop();
    if_true_label_id := lexical_pop();
end sub;

sub push_subroutine()
    lexical_push(break_label_id);
    lexical_push(continue_label_id);
    lexical_push(if_true_label_id);
    lexical_push(if_false_label_id);
    lexical_push(if_end_label_id);
    lexical_push(current_subroutine_id);
    lexical_push(current_namespace_id);
    lexical_push(ioptab_size);
    lexical_push(TOKEN_SUB);
end sub;

sub pop_subroutine()
    lexical_pop_scope_type(TOKEN_SUB);
    flush_iops(current_subroutine_id, lexical_pop());
    current_namespace_id := lexical_pop();
    current_subroutine_id := lexical_pop();
    if_end_label_id := lexical_pop();
    if_false_label_id := lexical_pop();
    if_end_label_id := lexical_pop();
    continue_label_id := lexical_pop();
    break_label_id := lexical_pop();
end sub;

sub create_bootstrap_type(identifier_id: uint16): (type: [NumericThing])
    var type_id: uint16 := create_thing(THING_CONSTANTT, NumericThing@bytes);
    add_symbol(identifier_id, type_id, current_namespace_id);
    type := find_thing(type_id) as [NumericThing];
end sub;

sub init_parser()
    current_namespace_id := 0;
    lexical_push(LEX_TOP);

    (current_subroutine_id, current_namespace_id) := create_function();
    root.main_subroutine_id := current_subroutine_id;

    var type: [NumericThing];
    type := create_bootstrap_type(TOKEN_INT8);
    type.thing_type := THING_SIGNEDT;
    type.width := 1;

    type := create_bootstrap_type(TOKEN_UINT8);
    type.thing_type := THING_UNSIGNEDT;
    type.width := 1;

    type := create_bootstrap_type(TOKEN_INT16);
    type.thing_type := THING_SIGNEDT;
    type.width := 2;

    type := create_bootstrap_type(TOKEN_UINT16);
    type.thing_type := THING_UNSIGNEDT;
    type.width := 2;

    type := create_bootstrap_type(TOKEN_INT32);
    type.thing_type := THING_SIGNEDT;
    type.width := 4;

    type := create_bootstrap_type(TOKEN_UINT32);
    type.thing_type := THING_UNSIGNEDT;
    type.width := 4;

    type := create_bootstrap_type(TOKEN_CONSTANTT);
    type.thing_type := THING_CONSTANTT;
    type.width := 0;
end sub;

sub do_sub()
    var old_namespace_id: uint16 := current_namespace_id;

    push_subroutine();
    expect_token(TOKEN_SUB);
    var id: uint16 := expect_identifier();
    (current_subroutine_id, current_namespace_id) := create_function();
    var subroutine: [SubroutineThing] := find_thing(current_subroutine_id) as [SubroutineThing];
    add_symbol(id, current_subroutine_id, old_namespace_id);
    break_label_id := 0;
    continue_label_id := 0;
    if_true_label_id := 0;
    if_false_label_id := 0;
    if_end_label_id := 0;

    sub add_parameter(direction: uint8)
        id := expect_identifier();
        expect_token(TOKEN_COLON);
        var type_id: uint16 := read_type();

        var parameter_id: uint16 := create_thing(THING_PARAMETER, ParameterThing@bytes);
        add_symbol(id, parameter_id, current_namespace_id);
        var parameter: [ParameterThing] := find_thing(parameter_id) as [ParameterThing];
        parameter.direction := direction;
        parameter.type_id := type_id;
        parameter.owner_id := current_subroutine_id;
    end sub;

    sub add_parameter_list(direction: uint8)
        expect_token(TOKEN_OPENPAREN);
        while current_token != TOKEN_CLOSEPAREN loop
            if direction == DIRECTION_OUT then
                subroutine.output_parameter_count := subroutine.output_parameter_count + 1;
            else
                subroutine.input_parameter_count := subroutine.input_parameter_count + 1;
            end if;

            add_parameter(direction);

            if current_token != TOKEN_COMMA then
                break;
            end if;
            next_token();
        end loop;
        expect_token(TOKEN_CLOSEPAREN);
    end sub;

    add_parameter_list(DIRECTION_IN);
    if current_token == TOKEN_COLON then
        next_token();
        add_parameter_list(DIRECTION_OUT);
    end if;

    emit_filename(filename_id);
    emit_linenumber(line_no);
end sub;

sub do_end_sub()
    emit_simple(IOP_RETURN);
    emit_simple(IOP_END);
    pop_subroutine();
end sub;

sub do_var()
    expect_token(TOKEN_VAR);
    var id: uint16 := expect_identifier();
    expect_token(TOKEN_COLON);
    var type_id: uint16 := read_type();

    var variable_id: uint16 := create_thing(THING_VARIABLE, VariableThing@bytes);
    add_symbol(id, variable_id, current_namespace_id);
    var variable: [VariableThing] := find_thing(variable_id) as [VariableThing];
    variable.type_id := type_id;
    variable.owner_id := current_subroutine_id;

    if current_token == TOKEN_SEGMENT then
        next_token();
        expect_token(TOKEN_OPENPAREN);
        variable.segment := do_constant() as uint8;
        expect_token(TOKEN_CLOSEPAREN);
    end if;

    if current_token == TOKEN_ASSIGN then
        emit_fe_push(variable_id);

        next_token();
        do_expression();
        emit_untyped_fe(IOP_FEX_ASSIGN);
    end if;

    expect_token(TOKEN_SEMICOLON);
end sub;

sub do_const()
    expect_token(TOKEN_CONST);
    var id: uint16 := expect_identifier();
    expect_token(TOKEN_ASSIGN);

    var value: int32 := do_constant();
    var number_id: uint16 := add_number_by_value(value);
    add_symbol(id, number_id, current_namespace_id);

    expect_token(TOKEN_SEMICOLON);
end sub;

sub do_record()
    var type_id: uint16;
    var type: [TypeThing];

    expect_token(TOKEN_RECORD);
    var id: uint16 := expect_identifier();
    var record_id: uint16 := create_thing(THING_RECORDT, RecordThing@bytes);
    add_symbol(id, record_id, current_namespace_id);
    var recordp: [RecordThing] := find_thing(record_id) as [RecordThing];

    sub check_recursive_type()
        if type_id == record_id then
            print("recursive type in record (use a pointer instead)");
            halt();
        end if;
    end sub;

    if current_token == TOKEN_COLON then
        next_token();
        type_id := read_type();
        check_recursive_type();
        var superclass: [RecordThing] := find_thing(type_id) as [RecordThing];
        if superclass.thing_type != THING_RECORDT then
            print("you can only inherit from records");
            halt();
        end if;

        recordp.superclass_id := type_id;
        recordp.width := superclass.width;
        recordp.namespace_id := create_namespace(superclass.namespace_id);
    else
        recordp.namespace_id := create_namespace(0);
    end if;

    while current_token != TOKEN_END loop
        id := expect_identifier();
        expect_token(TOKEN_COLON);
        type_id := read_type();
        check_recursive_type();
        type := find_thing(type_id) as [TypeThing];

        var member_id: uint16 := create_thing(THING_MEMBER, MemberThing@bytes);
        add_symbol(id, member_id, recordp.namespace_id);
        var member: [MemberThing] := find_thing(member_id) as [MemberThing];
        member.type_id := type_id;
        member.offset := recordp.width;
        recordp.width := recordp.width + type.width;

        expect_token(TOKEN_SEMICOLON);
    end loop;

    next_token();
    expect_token(TOKEN_RECORD);
    expect_token(TOKEN_SEMICOLON);
end sub;

sub do_label()
    var id: uint16 := expect_identifier();
    expect_token(TOKEN_COLON);

    var label: uint16 := create_label();
    var label_id: uint16 := create_thing(THING_LABEL, LabelThing@bytes);
    add_symbol(id, label_id, current_namespace_id);
    var labelp: [LabelThing] := find_thing(label_id) as [LabelThing];
    labelp.label := label;

    emit_label(label);
end sub;

sub do_assignment()
    do_expression();
    expect_token(TOKEN_ASSIGN);
    do_expression();
    expect_token(TOKEN_SEMICOLON);

    emit_untyped_fe(IOP_FEX_ASSIGN);
end sub;

sub do_goto()
    next_token();
    var id: uint16 := expect_identifier();
    emit_named_goto(id);

    expect_token(TOKEN_SEMICOLON);
end sub;

sub do_generic_loop_opening()
    next_token();
    push_loop();

    continue_label_id := create_label();
    emit_label(continue_label_id);
end sub;

sub do_loop()
    do_generic_loop_opening();
    break_label_id := create_label();
end sub;

sub do_while()
    do_generic_loop_opening();

    var loop_label_id: uint16;
    (loop_label_id, break_label_id) := do_conditional();
    emit_label(loop_label_id);

    expect_token(TOKEN_LOOP);
end sub;

sub do_jump(label_id: uint16)
    next_token();
    expect_token(TOKEN_SEMICOLON);

    if label_id == 0 then
        print("not inside a loop");
        halt();
    end if;

    emit_goto(label_id);
end sub;

sub do_return()
    next_token();
    expect_token(TOKEN_SEMICOLON);
    emit_simple(IOP_RETURN);
end sub;

sub do_generic_if_then()
    if_true_label_id := create_label();
    if_false_label_id := create_label();
    (if_true_label_id, if_false_label_id) := do_conditional();
    expect_token(TOKEN_THEN);
    emit_label(if_true_label_id);
end sub;

sub do_if()
    next_token();
    push_if();
    if_end_label_id := 0;
    do_generic_if_then();
end sub;

sub do_else()
    next_token();
    if if_end_label_id == 0 then
        if_end_label_id := create_label();
    end if;
    emit_goto(if_end_label_id);
    emit_label(if_false_label_id);
    if_false_label_id := 0;
end sub;

sub do_elseif()
    do_else();
    do_generic_if_then();
end sub;

sub do_end_if()
    if if_false_label_id != 0 then
        emit_label(if_false_label_id);
    end if;
    if if_end_label_id != 0 then
        emit_label(if_end_label_id);
    end if;
    pop_if();
end sub;

sub do_functioncall()
    var input_parameters: uint8 := 0;
    var output_parameters: uint8 := 0;

    if current_token == TOKEN_OPENPAREN then
        next_token();
        while current_token != TOKEN_CLOSEPAREN loop
            if output_parameters > 0 then
                expect_token(TOKEN_COMMA);
            end if;
            do_expression();
            output_parameters := output_parameters + 1;
        end loop;
        expect_token(TOKEN_CLOSEPAREN);
        expect_token(TOKEN_ASSIGN);
    end if;

    var id: uint16 := expect_identifier();

    expect_token(TOKEN_OPENPAREN);
    while current_token != TOKEN_CLOSEPAREN loop
        if input_parameters > 0 then
            expect_token(TOKEN_COMMA);
        end if;

        do_expression();
        input_parameters := input_parameters + 1;
    end loop;
    expect_token(TOKEN_CLOSEPAREN);

    var i: uint8 := input_parameters;
    while i > 0 loop
        i := i - 1;
        emit_fe_parameter(IOP_FEX_INPUTPARAM, id, i);
        emit_untyped_fe(IOP_FEX_SWAP);
        emit_untyped_fe(IOP_FEX_ASSIGN);
    end loop;

    var iop: [CallIop] := emit(IOP_CALL, CallIop@bytes) as [CallIop];
    iop.thing_id := id;
    iop.input_parameter_count := input_parameters;
    iop.output_parameter_count := output_parameters;

    i := output_parameters;
    while i > 0 loop
        i := i - 1;
        emit_fe_parameter(IOP_FEX_OUTPUTPARAM, id, i);
        emit_untyped_fe(IOP_FEX_ASSIGN);
    end loop;

    expect_token(TOKEN_SEMICOLON);
end sub;

sub do_end()
    expect_token(TOKEN_END);
    var peeked: uint16 := lexical_peek();
    if current_token != peeked then
        print("can't close a ");
        show_identifier(peeked);
        print(" with a ");
        show_identifier(current_token);
        halt();
    end if;
    if current_token == TOKEN_SUB then
        do_end_sub();
    elseif current_token == TOKEN_LOOP then
        pop_loop();
    elseif current_token == TOKEN_IF then
        do_end_if();
    else
        print("can't close ");
        show_identifier(current_token);
        print(" yet");
        halt();
    end if;
    next_token();
    expect_token(TOKEN_SEMICOLON);
end sub;

sub do_bytes()
    next_token();
    loop
        sub do_address(iop: uint8)
            var identifier_id: uint16 := expect_identifier();
            var offset: int32;
            if current_token == TOKEN_PLUS then
                next_token();
                offset := do_constant();
            elseif current_token == TOKEN_MINUS then
                next_token();
                offset := 0-do_constant();
            else
                offset := 0;
            end if;

            emit_address(iop, identifier_id, offset as int16);
        end sub;

        if current_token == TOKEN_LTOP then
            next_token();
            expect_token(TOKEN_AMPERSAND);
            do_address(IOP_ADDRESSHI);
        elseif current_token == TOKEN_GTOP then
            next_token();
            expect_token(TOKEN_AMPERSAND);
            do_address(IOP_ADDRESSLO);
        elseif current_token == TOKEN_AMPERSAND then
            next_token();
            do_address(IOP_ADDRESS);
        else
            var value: int32 := do_constant();
            emit_byte(value as uint8);
        end if;

        if current_token == TOKEN_SEMICOLON then
            break;
        else
            expect_token(TOKEN_COMMA);
        end if;
    end loop;
    expect_token(TOKEN_SEMICOLON);
end sub;

print("PARSER\n");
load_thing_table(things_dat);
init_parser();
init_tokenreader(tokens_dat);

open_iopfile(iops_dat);
break_label_id := 0;
continue_label_id := 0;
while current_token != 0 loop
    var thing: [Thing] := find_thing(current_token);
    if thing.thing_type == THING_IDENTIFIER then
        if peeked_token == TOKEN_COLON then
            do_label();
        elseif peeked_token == TOKEN_OPENPAREN then
            do_functioncall();
        else
            do_assignment();
        end if;
    elseif current_token == TOKEN_OPENPAREN then
        do_functioncall();
    elseif current_token == TOKEN_SUB then
        do_sub();
    elseif current_token == TOKEN_VAR then
        do_var();
    elseif current_token == TOKEN_CONST then
        do_const();
    elseif current_token == TOKEN_RECORD then
        do_record();
    elseif current_token == TOKEN_END then
        do_end();
    elseif current_token == TOKEN_GOTO then
        do_goto();
    elseif current_token == TOKEN_LOOP then
        do_loop();
    elseif current_token == TOKEN_WHILE then
        do_while();
    elseif current_token == TOKEN_BREAK then
        do_jump(break_label_id);
    elseif current_token == TOKEN_CONTINUE then
        do_jump(continue_label_id);
    elseif current_token == TOKEN_RETURN then
        do_return();
    elseif current_token == TOKEN_IF then
        do_if();
    elseif current_token == TOKEN_ELSE then
        do_else();
    elseif current_token == TOKEN_ELSEIF then
        do_elseif();
    elseif current_token == TOKEN_BYTES then
        do_bytes();
    else
        print("unknown token ");
        show_identifier(current_token);
        halt();
    end if;
end loop;
emit_simple(IOP_RETURN);
emit_simple(IOP_END);
flush_iops(current_subroutine_id, 0);
close_iopfile();

print("thing table size: ");
print_i16(thing_table_top);
print_newline();
save_thing_table(things_dat);
