sub print(ptr: [int8])
    var index: uint8 := 0;
    loop
        var c: int8 := ptr[index];
        if c == 0 then
            return;
        end if;
        print_char(c);
        index := index + 1;
    end loop;
end sub;

sub print_char(char: uint8)
    @bytes 0xAD, &char;        # LDA char
    @bytes 0x4C, 0xE3, 0xFF;   # JMP OSASCII
end sub;

sub print_newline()
    @bytes 0x4C, 0xE7, 0xFF;   # JMP abs
end sub;

sub print_i8(value: uint8)
end sub;

sub print_i16(value: uint16)
end sub;

sub print_i32(value: uint32)
end sub;

sub print_hex_i8(value: uint8)
end sub;

sub print_hex_i16(value: uint16)
end sub;

sub print_hex_i32(value: uint32)
end sub;

sub file_openin(filename: [int8]): (fd: uint8)
end sub;

sub file_openout(filename: [int8]): (fd: uint8)
end sub;

sub file_getblock(fd: uint8, ptr: [int8], length: uint16)
end sub;

sub file_putblock(fd: uint8, ptr: [int8], length: uint16)
end sub;

sub file_seek(fd: uint8, pos: uint32)
end sub;

sub file_ext(fd: uint8): (length: uint32)
end sub;

sub file_eof(fd: uint8): (eof: uint8)
end sub;

sub file_getchar(fd: uint8): (char: int8)
end sub;

sub file_close(fd: uint8)
end sub;

sub exit(status: uint8)
end sub;

sub __add16()
    var lp: [uint16];
    @bytes 0x68;             # PLA
    @bytes 0x8D, >&lp;       # STA lp
    @bytes 0x68;             # PLA
    @bytes 0x8D, >&lp+1;     # STA lp+1

    var buffer: uint8[6];

    @bytes 0xA0, 0x05;       # LDY #5
    # loop:
    @bytes 0xB1, >&lp;       # LDA (lp), Y
    @bytes 0x99, &buffer;    # STA buffer, Y
    @bytes 0x88;             # DEY
    @bytes 0x10, 0xF8;       # BPL loop

    @bytes 0xC8;             # INY (sets Y back to 0)
    @bytes 0xA2, 0x01;       # LDX #1
    @bytes 0x18;             # CLC
    # loop:
    @bytes 0xB1, >&buffer+0; # LDA (buffer+0), Y
    @bytes 0x71, >&buffer+2; # ADC (buffer+2), Y
    @bytes 0x91, >&buffer+4; # STA (buffer+4), Y
    @bytes 0xC8;             # INY
    @bytes 0xCA;             # DEX
    @bytes 0x10, 0xF6;       # BPL loop

    @bytes 0x6C, &lp;        # JMP (lp)
end sub;

sub __mul8u(left: uint8, right: uint8): (result: uint8)
    @bytes 0xA9, 0x00; # LDA #0
    @bytes 0xF0, 0x07; # BEQ start

    # add:
    @bytes 0x18; # CLC
    @bytes 0x6D, &left; # ADC abs
    # loop:
    @bytes 0x0E, &left; # ASL abs
    # start:
    @bytes 0x4E, &right; # LSR abs
    @bytes 0xB0, 0xF4; # BCS add
    @bytes 0xD0, 0xF6; # BNE loop
    @bytes 0x8D, &result; # STA abs
end sub;

var LOMEM: [int8];
var HIMEM: [int8];
