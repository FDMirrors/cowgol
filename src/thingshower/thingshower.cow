sub show_root_thing(thing: [RootThing])
    print("root(main_subroutine_id=");
    print_thing(thing.main_subroutine_id);
    print(" ");
    print_arch_sizes(&thing.archsizes as [ArchSizes]);
    print(" code_size=0x");
    print_hex_i16(thing.code_size);
    print(" const_size=0x");
    print_hex_i16(thing.const_size);
    print(") ");
end sub;

sub show_identifier_thing(thing: [IdentifierThing])
    print("identifier(string_id=");
    show_string(thing.string_id);
    print(") ");
end sub;

sub show_token_thing(thing: [TokenThing])
    print("token(string_id=");
    show_string(thing.string_id);
    print(" token_flags=");
    print_hex_i8(thing.token_flags);
    print(") ");
end sub;

sub show_namespace_thing(thing: [NamespaceThing])
    print("namespace: previous_namespace=0x");
    print_hex_i16(thing.previous_namespace);
    print(" first_symbol=0x");
    print_hex_i16(thing.first_symbol);
end sub;

sub show_symbol_thing(thing: [SymbolThing])
    print("symbol(name_id=0x");
    print_hex_i16(thing.name_id);
    print(" value_id=0x");
    print_hex_i16(thing.value_id);
    print(" next_symbol=0x");
    print_hex_i16(thing.next_symbol);
    print(") ");
end sub;

sub show_data_thing(thing: [DataThing])
    print("data(segment=0x");
    print_hex_i8(thing.segment);
    print(" address=0x");
    print_hex_i16(thing.address);
    print(") ");
end sub;

sub show_string_thing(thing: [StringThing])
    show_data_thing(thing as [DataThing]);
    print("string(");
    show_string(thing.string_id);
    print(") ");
end sub;

sub show_number_thing(thing: [NumberThing])
    show_data_thing(thing as [DataThing]);
    print("number(0x");
    print_hex_i32(thing.value as uint32);
    print(") ");
end sub;

sub show_typed_thing(thing: [TypedThing])
    show_data_thing(thing as [DataThing]);
    print("typed(owner_id=0x");
    print_thing(thing.owner_id);
    print(" type_id=0x");
    print_hex_i16(thing.type_id);
    print(") ");
end sub;

sub show_subroutine_thing(thing: [SubroutineThing])
    show_data_thing(thing as [DataThing]);
    print("subroutine(namespace=0x");
    print_hex_i16(thing.namespace_id);
    print(" label_count=");
    print_i8(thing.label_count);
    print(" input_parameter_count=");
    print_i8(thing.input_parameter_count);
    print(" output_parameter_count=");
    print_i8(thing.output_parameter_count);
    print(") ");
end sub;

sub show_type_thing(thing: [TypeThing])
    print("type(width=");
    print_i16(thing.width);
    print(") ");
end sub;

sub show_withelements_thing(thing: [WithElementsThing])
    show_type_thing(thing as [TypeThing]);
    print("withelements(element_type_id=0x");
    print_hex_i16(thing.element_type_id);
    print(" index_type_id=0x");
    print_hex_i16(thing.index_type_id);
    print(") ");
end sub;

sub show_pointer_thing(thing: [PointerThing])
    show_withelements_thing(thing as [WithElementsThing]);
    print(" pointer");
end sub;

sub show_record_thing(thing: [RecordThing])
    show_type_thing(thing as [TypeThing]);
    print("record(superclass_id=0x");
    print_hex_i16(thing.superclass_id);
    print(" namespace_id=0x");
    print_hex_i16(thing.namespace_id);
    print(") ");
end sub;

sub show_member_thing(thing: [MemberThing])
    print("member(type_id=0x");
    print_hex_i16(thing.type_id);
    print(" offset=0x");
    print_hex_i16(thing.offset);
    print(") ");
end sub;

sub show_variable_thing(thing: [VariableThing])
    show_typed_thing(thing as [TypedThing]);
    print("variable ");
end sub;

sub show_parameter_thing(thing: [ParameterThing])
    show_variable_thing(thing as [VariableThing]);
    print("parameter(direction=");
    print_i8(thing.direction);
    print(") ");
end sub;

sub show_numeric_thing(kind: [int8], thing: [NumericThing])
    show_type_thing(thing as [TypeThing]);
    print(kind);
end sub;

sub show_array_thing(thing: [ArrayThing])
    show_withelements_thing(thing as [WithElementsThing]);
    print("array(element_count=");
    print_i16(thing.element_count);
    print(") ");
end sub;

print("THINGSHOWER\n");
init_string_table();
load_thing_table(things_dat);
var id: uint16 := 1;
loop
    var thing: [Thing] := &thing_table[id] as [Thing];
    if thing.thing_size == 0 then
        break;
    end if;
    print_thing(id);
    print(": ");

    var type: uint8 := thing.thing_type;
    if (type == THING_ROOT) then
        show_root_thing(thing as [RootThing]);
    elseif (type == THING_IDENTIFIER) then
        show_identifier_thing(thing as [IdentifierThing]);
    elseif (type == THING_TOKEN) then
        show_token_thing(thing as [TokenThing]);
    elseif type == THING_NUMBER then
        show_number_thing(thing as [NumberThing]);
    elseif type == THING_STRING then
        show_string_thing(thing as [StringThing]);
    elseif type == THING_NAMESPACE then
        show_namespace_thing(thing as [NamespaceThing]);
    elseif type == THING_SYMBOL then
        show_symbol_thing(thing as [SymbolThing]);
    elseif type == THING_SUBROUTINE then
        show_subroutine_thing(thing as [SubroutineThing]);
    elseif type == THING_SIGNEDT then
        show_numeric_thing("signed_type", thing as [NumericThing]);
    elseif type == THING_UNSIGNEDT then
        show_numeric_thing("unsigned_type", thing as [NumericThing]);
    elseif type == THING_CONSTANTT then
        show_numeric_thing("constant_type", thing as [NumericThing]);
    elseif type == THING_POINTERT then
        show_pointer_thing(thing as [PointerThing]);
    elseif type == THING_RECORDT then
        show_record_thing(thing as [RecordThing]);
    elseif type == THING_MEMBER then
        show_member_thing(thing as [MemberThing]);
    elseif type == THING_VARIABLE then
        show_variable_thing(thing as [VariableThing]);
    elseif type == THING_PARAMETER then
        show_parameter_thing(thing as [ParameterThing]);
    elseif type == THING_ARRAYT then
        show_array_thing(thing as [ArrayThing]);
    else
        print("unknown type ");
        print_i8(type);
    end if;
    print_newline();

    id := id + (thing.thing_size as uint16);
end loop;

deinit_string_table();
