sub read_type(): (type_id: uint16)
    var brackets: uint8 := 0;

    sub mismatched_square_brackets()
        print("mismatched square brackets in type");
        halt();
    end sub;

    sub process_type_modifiers()
        expect_token(TOKEN_INDEX);
        type_id := get_type_of_thing(type_id);
        var thing: [WithElementsThing] := find_thing(type_id) as [WithElementsThing];
        if (thing.thing_type == THING_POINTERT) or (thing.thing_type == THING_ARRAYT) then
            type_id := thing.index_type_id;
        else
            print("@index can only be used on arrays or pointers");
            halt();
        end if;
    end sub;

    while current_token == TOKEN_OPENSQUARE loop
        brackets := brackets + 1;
        next_token();
    end loop;

    var identifier_id: uint16 := expect_identifier();
    type_id := deref_symbol_or_fail(identifier_id);
    if is_typed_thing(type_id) != 0 then
        process_type_modifiers();
    end if;

    loop
        if is_type_thing(type_id) == 0 then
            print("identifier ");
            show_identifier(identifier_id);
            print(" does not refer to a type");
            halt();
        end if;

        if current_token == TOKEN_CLOSESQUARE then
            if brackets == 0 then
                break;
            end if;
            brackets := brackets - 1;
            type_id := pointer_of(type_id, find_bootstrap_symbol(TOKEN_INT16));
            next_token();
        elseif current_token == TOKEN_OPENSQUARE then
            next_token();
            var element_count: uint16 := do_constant() as uint16;
            var index_type_id: uint16;
            if element_count <= 256 then
                index_type_id := find_bootstrap_symbol(TOKEN_UINT8);
            else
                index_type_id := find_bootstrap_symbol(TOKEN_UINT16);
            end if;
            type_id := array_of(type_id, element_count, index_type_id);
            expect_token(TOKEN_CLOSESQUARE);
        else
            break;
        end if;
    end loop;

    if brackets != 0 then
        mismatched_square_brackets();
    end if;
end sub;

