sub get_width_of(node: [Node]): (width: uint8)
    width := get_width_of_type(node.type_id);
end sub;

sub write_be_iop(iop: [BEIop])
    $if DEBUG
        print("* BE iop 0x");
        print_hex_i8(iop.iop_kind);
        print(" width=");
        print_i8(iop.width);
        print(" left=");
        print_ea(&iop.left);
        print(" right=");
        print_ea(&iop.right);
        print(" dest=");
        print_ea(&iop.dest);
        print_newline();
    $endif

    write_iop(iop as [Iop]);
end sub;

sub simplify_mul(node: [Node])
    var num_id: uint16 := node.right.obj_id;
    if is_number_thing(num_id) != 0 then
        var value: int32 := get_value_of_number(num_id);
        if value == 1 then
            node.iop := IOP_BE_COPY;
            zero_ea(&node.right);
        elseif value == 2 then
            node.iop := IOP_BE_LSL;
            node.right.obj_id := add_number_by_value(1);
        elseif value == 4 then
            node.iop := IOP_BE_LSL;
            node.right.obj_id := add_number_by_value(2);
        elseif value == 8 then
            node.iop := IOP_BE_LSL;
            node.right.obj_id := add_number_by_value(3);
        end if;
    end if;
end sub;

sub reset_be_iop(iop: [BEIop])
    zero_memory(iop as [int8], BEIop@bytes);
    iop.iop_size := BEIop@bytes;
end sub;

sub check_ea(ea: [EffectiveAddress])
    if is_scalar_type_thing(ea.type_id) == 0 then
        print("cannot emit EA ");
        print_ea(ea);
        print(" as it is not scalar");
        halt();
    end if;
end sub;

sub simplify_ea(beiop: uint8, width: uint8, ea: [EffectiveAddress])
    var iop: BEIop;
    var tmpvar_id: uint16 := 0;

    sub maybe_alloc_tmpvar()
        if tmpvar_id == 0 then
            tmpvar_id := alloc_temporary(int16_type);
        else
            ref_temporary(tmpvar_id);
        end if;
    end sub;

    sub lea()
        $if DEBUG
            print("* promoting LEA to copy\n");
        $endif

        maybe_alloc_tmpvar();
        reset_be_iop(&iop);
        iop.iop_kind := IOP_BE_COPY;
        iop.width := 2;
        iop.left.type_id := get_type_of_thing(ea.obj_id);
        iop.left.obj_id := ea.obj_id;
        iop.left.numoff_id := ea.numoff_id;
        iop.left.flags := EA_LEA;
        iop.dest.type_id := int16_type;
        iop.dest.obj_id := tmpvar_id;
        write_be_iop(&iop);
    end sub;

    sub varoffset_into_add()
        maybe_alloc_tmpvar();

        if ea.flags != EA_DEREF then
            lea();
        end if;

        reset_be_iop(&iop);
        iop.iop_kind := IOP_BE_ADD;
        iop.width := 2;
        iop.left.type_id := get_type_of_thing(ea.obj_id);
        if ea.flags == EA_DEREF then
            iop.left.flags := EA_VALUE;
            iop.left.obj_id := ea.obj_id;
            iop.dest.type_id := iop.left.type_id;
        else
            iop.left.flags := EA_VALUE;
            iop.left.obj_id := tmpvar_id;
            iop.left.type_id := pointer_of(iop.left.type_id, uint16_type);
            iop.dest.type_id := iop.left.type_id;
        end if;
        iop.right.obj_id := ea.varoff_id;
        iop.right.type_id := get_type_of_thing(iop.right.obj_id);
        iop.dest.obj_id := tmpvar_id;
        write_be_iop(&iop);

        deref_temporary(ea.obj_id);
        ea.obj_id := tmpvar_id;
        ea.type_id := iop.dest.type_id;
        if ea.flags == EA_LEA then
            ea.flags := EA_VALUE;
        else
            ea.flags := EA_DEREF;
        end if;
        ea.varoff_id := 0;
    end sub;

    sub deref_numoffset_into_add()
        if tmpvar_id == 0 then
            tmpvar_id := alloc_temporary(ea.type_id);
        else
            ref_temporary(tmpvar_id);
        end if;

        reset_be_iop(&iop);
        iop.iop_kind := IOP_BE_ADD;
        iop.width := 2;
        iop.left.type_id := get_type_of_thing(ea.obj_id);
        iop.left.obj_id := ea.obj_id;
        iop.left.flags := EA_VALUE;
        iop.right.type_id := uint16_type;
        iop.right.obj_id := ea.numoff_id;
        iop.dest.type_id := iop.left.type_id;
        iop.dest.obj_id := tmpvar_id;
        write_be_iop(&iop);

        deref_temporary(ea.obj_id);
        ea.obj_id := tmpvar_id;
        ea.flags := EA_DEREF;
        ea.numoff_id := 0;
    end sub;

    if (ea.flags == EA_LEA) and (beiop != IOP_BE_COPY) then
        lea();
        ea.obj_id := tmpvar_id;
        ea.numoff_id := 0;
        ea.varoff_id := 0;
        ea.flags := EA_VALUE;
    end if;

    if ea.varoff_id != 0 then
        var varoff_id: uint16 := ea.varoff_id;
        var type_id: uint16 := get_type_of_thing(varoff_id);
        var type: [TypeThing] := find_thing(type_id) as [TypeThing];

        if (type.thing_type != THING_UNSIGNEDT) or (type.width != 1) then
            if type.width == 2 then
                ref_temporary(varoff_id);
            else
                varoff_id := alloc_temporary(int16_type);
                reset_be_iop(&iop);
                if type.thing_type == THING_SIGNEDT then
                    iop.iop_kind := IOP_BE_SEXT;
                else
                    iop.iop_kind := IOP_BE_ZEXT;
                end if;
                iop.width := 2;
                iop.left.obj_id := ea.varoff_id;
                iop.left.type_id := type_id;
                iop.dest.obj_id := varoff_id;
                iop.dest.type_id := int16_type;
                write_iop(&iop as [Iop]);
                ea.varoff_id := varoff_id;
            end if;

            $if DEBUG
                print("* turning var offset into add\n");
            $endif
            varoffset_into_add();
            deref_temporary(ea.varoff_id);
        end if;
    end if;

    if ea.numoff_id != 0 then
        sub is_number_a_byte(number_id: uint16): (is_valid: uint8)
            var value: int32 := get_value_of_number(number_id);
            if (value >= 0) and (value <= 255) then
                is_valid := 1;
            else
                is_valid := 0;
            end if;
        end sub;

        if ea.flags == EA_DEREF then
            if (width != 1) or (is_number_a_byte(ea.numoff_id) == 0) then
                $if DEBUG
                    print("* turning too-large constant offset of deref into add\n");
                $endif
                deref_numoffset_into_add();
            end if;
        end if;
    end if;
end sub;

sub arch_simplify_node_to(src: [Node], dest: [Node])
    if dest.iop != IOP_FEX_PUSH then
        print("simplify_node_to() where dest is not simplified");
        halt();
    end if;

    if src.iop == IOP_BE_MUL then
        simplify_mul(src);
    end if;

    var destwidth: uint8 := get_width_of(dest);

    var iop: BEIop;
    reset_be_iop(&iop);
    iop.width := destwidth;
    check_ea(&dest.left);
    copy_ea(&dest.left, &iop.dest);
    iop.dest.type_id := dest.type_id;

    if src.iop == IOP_FEX_PUSH then
        iop.iop_kind := IOP_BE_COPY;
    else
        iop.iop_kind := src.iop;
    end if;

    check_ea(&src.left);
    copy_ea(&src.left, &iop.left);
    check_ea(&src.left);
    copy_ea(&src.right, &iop.right);

    simplify_ea(iop.iop_kind, destwidth, &iop.left);
    if (iop.iop_kind & IOP_TYPE_MASK) == IOP_TYPE_BACKEND_3OP then
        simplify_ea(iop.iop_kind, destwidth, &iop.right);
    end if;
    simplify_ea(iop.iop_kind, destwidth, &iop.dest);

    write_be_iop(&iop);
end sub;

sub arch_simplify_conditional_iop(iop: [BEConditionalIop])
    check_ea(&iop.left);
    check_ea(&iop.right);
    simplify_ea(iop.iop_kind, iop.width, &iop.left);
    simplify_ea(iop.iop_kind, iop.width, &iop.right);

    write_iop(iop as [Iop]);
end sub;
