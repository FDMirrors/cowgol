sub get_width_of_ea(ea: [EffectiveAddress]): (width: uint16)
    if ea.type_id == 0 then
        print("untyped EA ");
        print_ea(ea);
        halt();
    end if;

    width := get_width_of_type(ea.type_id);
end sub;

sub cant_do_2op(iop: [BEIop], op: [int8])
    print("can't do ");
    print_ea(&iop.left);
    print_char('(');
    print_i8(get_width_of_ea(&iop.left) as uint8);
    print(") ");
    print(op);
    print(" -> ");
    print_ea(&iop.dest);
    print_char('(');
    print_i8(get_width_of_ea(&iop.dest) as uint8);
    print(") width ");
    print_i8(iop.width);
    halt();
end sub;

sub cant_do_3op(iop: [BEIop], op: [int8])
    print("can't do ");
    print_ea(&iop.left);
    print_char('(');
    print_i8(get_width_of_ea(&iop.left) as uint8);
    print(") ");
    print(op);
    print(" ");
    print_ea(&iop.right);
    print_char('(');
    print_i8(get_width_of_ea(&iop.right) as uint8);
    print(") -> ");
    print_ea(&iop.dest);
    print_char('(');
    print_i8(get_width_of_ea(&iop.dest) as uint8);
    print(") width ");
    print_i8(iop.width);
    halt();
end sub;

sub arch_init_codegen()
    reg_reset();
end sub;

sub arch_gen_before(ea: [EffectiveAddress])
    if (ea.obj_id != 0) and (ea.flags == EA_DEREF) then
		$if DEBUG
			print("* writing back precious values because of pointer access: ");
			print_ea(ea);
			print_newline();
		$endif

        #write_back_precious_values(REG_MASK);
    end if;
end sub;

sub arch_gen_after(ea: [EffectiveAddress])
    if (ea.obj_id != 0) and (ea.flags == EA_DEREF) then
		$if DEBUG
			print("* flushing cached values because of pointer access: ");
			print_ea(ea);
			print_newline();
		$endif

        #flush_cached_values(REG_MASK);
    end if;
end sub;

sub arch_gen_beginning_of_instruction()
	$if DEBUG
		#print_newline();
		#print_cache();
	$endif
    reg_unlock_all();
end sub;

sub arch_gen_return()
    reg_evict(ALL_REGS);
    write_byte(0xC9); # RET
end sub;

sub arch_gen_call(iop: [CallIop])
    reg_evict(ALL_REGS);
    write_byte(0xCD); # CALL
    write_address_iop(IOP_ADDRESS, iop.thing_id, 0);
end sub;

sub arch_gen_tail_call(iop: [CallIop])
    reg_evict(ALL_REGS);
    write_byte(0xC3); # JP
    write_address_iop(IOP_ADDRESS, iop.thing_id, 0);
end sub;

sub arch_gen_label(iop: [LabelIop])
    reg_evict(ALL_REGS);
    write_iop(iop as [Iop]);
end sub;

sub arch_gen_goto(iop: [GotoIop])
    reg_evict(ALL_REGS);
    write_cg_conditional_iop(0xC3, iop.label); # Unconditional
end sub;

sub arch_gen_copy(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_copy_byte(iop);
    elseif iop.width == 2 then
        arch_gen_copy_word(iop);
    else
        cant_do_2op(iop, "copy");
    end if;
end sub;

sub arch_gen_not(iop: [BEIop])
    cant_do_2op(iop, "not");
end sub;

sub arch_gen_and(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_regular_alu_byte(iop, 0xE6); # and *
    elseif iop.width == 2 then
        arch_gen_regular_alu_word(iop, 0xE6, 0xE6); # and *
    else
        cant_do_3op(iop, "and");
    end if;
end sub;

sub arch_gen_or(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_regular_alu_byte(iop, 0xF6); # or *
    elseif iop.width == 2 then
        arch_gen_regular_alu_word(iop, 0xF6, 0xF6); # and *
    else
        cant_do_3op(iop, "or");
    end if;
end sub;

sub arch_gen_eor(iop: [BEIop])
    cant_do_3op(iop, "eor");
    if iop.width == 1 then
        arch_gen_regular_alu_byte(iop, 0xEE); # xor *
    elseif iop.width == 2 then
        arch_gen_regular_alu_word(iop, 0xEE, 0xEE); # xor *
    else
        cant_do_3op(iop, "eor");
    end if;
end sub;

sub arch_gen_add(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_regular_alu_byte(iop, 0xC6); # add *
    elseif iop.width == 2 then
        arch_gen_add_word(iop);
    else
        cant_do_3op(iop, "add");
    end if;
end sub;

sub arch_gen_sub(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_regular_alu_byte(iop, 0xD6); # sub *
    elseif iop.width == 2 then
        arch_gen_sub_word(iop);
    else
        cant_do_3op(iop, "sub");
    end if;
end sub;

sub arch_gen_lsl(iop: [BEIop])
    cant_do_3op(iop, "lsl");
end sub;

sub arch_gen_lsr(iop: [BEIop])
    cant_do_3op(iop, "lsr");
end sub;

sub arch_gen_asr(iop: [BEIop])
    cant_do_3op(iop, "asr");
end sub;

sub arch_gen_divu(iop: [BEIop])
    cant_do_3op(iop, "divu");
end sub;

sub arch_gen_divs(iop: [BEIop])
    cant_do_3op(iop, "divs");
end sub;

sub arch_gen_modu(iop: [BEIop])
    cant_do_3op(iop, "modu");
end sub;

sub arch_gen_mods(iop: [BEIop])
    cant_do_3op(iop, "mods");
end sub;

sub arch_gen_mul(iop: [BEIop])
    cant_do_3op(iop, "mul");
end sub;

sub arch_gen_zext(iop: [BEIop])
    if iop.width == 2 then
        arch_gen_zext_word(iop);
    else
        cant_do_3op(iop, "zext");
    end if;
end sub;

sub arch_gen_sext(iop: [BEIop])
    cant_do_3op(iop, "sext");
end sub;

sub arch_gen_cmp(ciop: [BEConditionalIop], liop: [LabelIop])
    reg_write_back_precious_values(ALL_REGS);
    if ciop.width == 1 then
        arch_gen_cmp_8bit(ciop, liop);
    else
        print("can't compare");
        halt();
    end if;
end sub;

sub arch_gen_kill(iop: [KillIop])
    $if DEBUG
        print("* GENERATE: kill ");
        print_ea(&iop.ea);
        print_newline();
    $endif

    reg_value_is_not_precious(&iop.ea);
end sub;
