var yy_accept: uint8[222] := {0, 0, 0, 0, 0, 0, 0, 87, 85, 77, 84, 84, 85, 55, 76, 83, 2, 3, 85, 4, 5, 6, 7, 8, 9, 10, 11, 75, 75, 12, 14, 15, 85, 19, 85, 54, 22, 23, 24, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 25, 26, 27, 28, 64, 63, 61, 86, 81, 84, 83, 77, 84, 1, 76, 0, 0, 0, 0, 0, 75, 0, 0, 0, 13, 16, 17, 18, 20, 21, 0, 0, 0, 54, 54, 34, 54, 54, 54, 54, 54, 42, 54, 54, 54, 46, 54, 54, 54, 54, 54, 54, 64, 62, 60, 56, 57, 58, 62, 81, 0, 0, 0, 0, 71, 0, 71, 0, 0, 0, 0, 0, 72, 73, 74, 0, 0, 0, 0, 33, 54, 54, 54, 40, 54, 54, 54, 45, 54, 54, 49, 54, 54, 52, 54, 0, 0, 0, 0, 0, 70, 68, 65, 66, 67, 0, 0, 0, 0, 0, 54, 54, 54, 38, 41, 43, 54, 54, 54, 50, 51, 54, 59, 0, 0, 0, 0, 0, 0, 0, 0, 32, 35, 36, 54, 54, 54, 54, 54, 53, 0, 82, 0, 0, 69, 29, 30, 0, 54, 39, 54, 47, 48, 80, 0, 0, 0, 54, 54, 0, 0, 31, 37, 54, 79, 0, 44, 78, 0, };
var yy_ec: uint8[256] := {0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 25, 26, 27, 28, 1, 29, 30, 31, 30, 32, 33, 30, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 35, 35, 35, 35, 35, 37, 38, 39, 40, 41, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 35, 51, 52, 53, 54, 55, 56, 35, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };
var yy_meta: uint8[70] := {0, 1, 1, 2, 3, 1, 4, 1, 5, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 8, 8, 8, 1, 4, 1, 1, 9, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, };
var yy_base: uint16[236] := {0, 0, 0, 67, 71, 75, 77, 333, 334, 330, 334, 328, 303, 334, 0, 26, 334, 334, 291, 334, 334, 334, 334, 334, 334, 334, 334, 67, 71, 301, 334, 69, 300, 70, 56, 0, 334, 334, 334, 28, 269, 270, 48, 269, 276, 267, 61, 264, 274, 259, 55, 276, 268, 334, 334, 334, 334, 0, 334, 334, 95, 0, 313, 269, 312, 334, 334, 0, 259, 265, 265, 299, 96, 103, 97, 107, 0, 334, 334, 334, 334, 334, 334, 245, 254, 65, 0, 262, 0, 260, 251, 246, 258, 243, 0, 246, 247, 240, 0, 76, 255, 251, 240, 238, 244, 0, 334, 334, 334, 334, 334, 0, 0, 239, 247, 289, 231, 334, 278, 277, 276, 275, 274, 273, 272, 116, 119, 0, 223, 236, 232, 214, 0, 236, 73, 231, 0, 221, 219, 228, 0, 218, 212, 0, 217, 224, 0, 217, 0, 223, 217, 111, 264, 334, 334, 334, 334, 334, 0, 219, 218, 210, 216, 210, 201, 209, 208, 0, 0, 199, 199, 198, 0, 0, 208, 334, 203, 205, 218, 119, 239, 191, 185, 201, 334, 0, 0, 192, 198, 188, 198, 188, 0, 194, 334, 206, 195, 334, 334, 334, 168, 160, 0, 177, 0, 0, 334, 174, 172, 143, 155, 149, 147, 144, 334, 0, 110, 334, 113, 0, 334, 334, 160, 169, 178, 187, 190, 199, 208, 217, 226, 229, 139, 233, 138, 135, };
var yy_def: uint8[236] := {0, 221, 1, 222, 222, 223, 223, 221, 221, 221, 221, 221, 221, 221, 224, 221, 221, 221, 225, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 226, 221, 221, 221, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 221, 221, 221, 221, 227, 221, 221, 228, 229, 221, 221, 221, 221, 221, 224, 221, 221, 221, 221, 230, 221, 221, 221, 231, 221, 221, 221, 221, 221, 221, 221, 221, 221, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 227, 221, 221, 221, 221, 221, 232, 229, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 233, 221, 221, 231, 221, 221, 221, 221, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 234, 221, 221, 221, 221, 221, 221, 221, 221, 221, 235, 221, 221, 221, 221, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 226, 226, 226, 226, 226, 226, 226, 226, 221, 221, 221, 221, 221, 221, 221, 221, 226, 226, 226, 226, 226, 221, 221, 221, 221, 226, 226, 221, 221, 221, 226, 226, 221, 221, 226, 221, 0, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, };
var yy_nxt: uint8[404] := {0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35, 35, 35, 35, 35, 35, 35, 36, 8, 37, 38, 35, 39, 40, 41, 35, 42, 35, 43, 35, 44, 35, 45, 35, 46, 47, 35, 48, 49, 50, 35, 51, 52, 35, 35, 35, 53, 54, 55, 56, 58, 58, 68, 59, 58, 58, 69, 59, 10, 62, 10, 62, 87, 63, 70, 63, 88, 73, 73, 73, 73, 73, 73, 73, 73, 78, 79, 81, 82, 83, 91, 107, 92, 96, 101, 60, 84, 119, 73, 60, 74, 130, 73, 151, 85, 131, 97, 125, 125, 102, 141, 179, 75, 73, 73, 73, 73, 126, 126, 126, 76, 164, 165, 107, 120, 142, 125, 125, 125, 126, 126, 126, 180, 178, 73, 175, 148, 220, 126, 108, 121, 196, 109, 122, 110, 123, 219, 125, 111, 124, 126, 57, 57, 57, 57, 57, 57, 57, 57, 57, 61, 61, 61, 61, 61, 61, 61, 61, 61, 67, 218, 217, 67, 67, 67, 67, 67, 67, 71, 71, 71, 71, 71, 216, 71, 71, 71, 86, 86, 86, 105, 215, 214, 213, 105, 105, 105, 105, 105, 106, 212, 106, 106, 106, 106, 106, 106, 106, 112, 211, 210, 112, 209, 112, 112, 112, 112, 118, 208, 118, 118, 118, 118, 118, 118, 118, 127, 207, 127, 158, 158, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 179, 177, 176, 174, 173, 172, 171, 170, 169, 168, 167, 166, 163, 162, 161, 160, 159, 153, 157, 156, 155, 154, 154, 153, 152, 151, 150, 149, 147, 146, 145, 144, 143, 140, 139, 138, 137, 136, 135, 134, 133, 132, 129, 128, 117, 116, 115, 114, 64, 113, 65, 104, 103, 100, 99, 98, 95, 94, 93, 90, 89, 80, 77, 72, 66, 65, 64, 221, 7, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, };
var yy_chk: uint8[404] := {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 15, 3, 4, 4, 15, 4, 5, 5, 6, 6, 39, 5, 15, 6, 39, 27, 27, 27, 27, 28, 28, 28, 28, 31, 31, 33, 33, 34, 42, 60, 42, 46, 50, 3, 34, 72, 27, 4, 27, 85, 28, 151, 34, 85, 46, 74, 74, 50, 99, 179, 27, 73, 73, 73, 73, 75, 75, 75, 27, 134, 134, 60, 72, 99, 125, 125, 74, 126, 126, 126, 235, 151, 73, 234, 232, 218, 75, 60, 72, 179, 60, 72, 60, 72, 216, 125, 60, 72, 126, 222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 223, 223, 223, 223, 223, 223, 223, 223, 224, 213, 212, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 225, 211, 225, 225, 225, 226, 226, 226, 227, 210, 209, 208, 227, 227, 227, 227, 227, 228, 207, 228, 228, 228, 228, 228, 228, 228, 229, 203, 201, 229, 200, 229, 229, 229, 229, 230, 196, 230, 230, 230, 230, 230, 230, 230, 231, 195, 231, 233, 233, 193, 191, 190, 189, 188, 187, 183, 182, 181, 180, 178, 177, 176, 174, 171, 170, 169, 166, 165, 164, 163, 162, 161, 160, 159, 152, 150, 149, 147, 145, 144, 142, 141, 139, 138, 137, 135, 133, 131, 130, 129, 128, 124, 123, 122, 121, 120, 119, 118, 116, 115, 114, 113, 104, 103, 102, 101, 100, 97, 96, 95, 93, 92, 91, 90, 89, 87, 84, 83, 71, 70, 69, 68, 64, 63, 62, 52, 51, 49, 48, 47, 45, 44, 43, 41, 40, 32, 29, 18, 12, 11, 9, 7, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, };
const STATE_INITIAL := 1;
const STATE_STRING := 3;
const STATE_SKIPPING := 5;
const YY_ACCEPTING_STATE := 221;
sub perform_action(action: uint8)
# actions between 0 and 86: 81
sub actions_from_0_to_43()
# actions between 0 and 43: 42
sub actions_from_0_to_21()
# actions between 0 and 21: 20
sub actions_from_0_to_10()
# actions between 0 and 10: 9
if action == 1 then
 emit_token(TOKEN_NEOP); 
elseif action == 2 then
 emit_token(TOKEN_PERCENT); 
elseif action == 3 then
 emit_token(TOKEN_AMPERSAND); 
elseif action == 4 then
 emit_token(TOKEN_OPENPAREN); 
elseif action == 5 then
 emit_token(TOKEN_CLOSEPAREN); 
elseif action == 6 then
 emit_token(TOKEN_STAR); 
elseif action == 7 then
 emit_token(TOKEN_PLUS); 
elseif action == 8 then
 emit_token(TOKEN_COMMA); 
elseif action == 9 then
 emit_token(TOKEN_MINUS); 
end if;
end sub;
sub actions_from_10_to_21()
# actions between 10 and 21: 11
sub actions_from_10_to_15()
# actions between 10 and 15: 5
if action == 10 then
 emit_token(TOKEN_DOT); 
elseif action == 11 then
 emit_token(TOKEN_SLASH); 
elseif action == 12 then
 emit_token(TOKEN_COLON); 
elseif action == 13 then
 emit_token(TOKEN_ASSIGN); 
elseif action == 14 then
 emit_token(TOKEN_SEMICOLON); 
end if;
end sub;
sub actions_from_15_to_21()
# actions between 15 and 21: 6
if action == 15 then
 emit_token(TOKEN_LTOP); 
elseif action == 16 then
 emit_token(TOKEN_LEFTSHIFT); 
elseif action == 17 then
 emit_token(TOKEN_LEOP); 
elseif action == 18 then
 emit_token(TOKEN_EQOP); 
elseif action == 19 then
 emit_token(TOKEN_GTOP); 
elseif action == 20 then
 emit_token(TOKEN_GEOP); 
end if;
end sub;
if action < 15 then
actions_from_10_to_15();
else
actions_from_15_to_21();
end if;
end sub;
if action < 10 then
actions_from_0_to_10();
else
actions_from_10_to_21();
end if;
end sub;
sub actions_from_21_to_43()
# actions between 21 and 43: 22
sub actions_from_21_to_32()
# actions between 21 and 32: 11
sub actions_from_21_to_26()
# actions between 21 and 26: 5
if action == 21 then
 emit_token(TOKEN_RIGHTSHIFT); 
elseif action == 22 then
 emit_token(TOKEN_OPENSQUARE); 
elseif action == 23 then
 emit_token(TOKEN_CLOSESQUARE); 
elseif action == 24 then
 emit_token(TOKEN_CARET); 
elseif action == 25 then
 emit_token(TOKEN_OPENBRACE); 
end if;
end sub;
sub actions_from_26_to_32()
# actions between 26 and 32: 6
if action == 26 then
 emit_token(TOKEN_PIPE); 
elseif action == 27 then
 emit_token(TOKEN_CLOSEBRACE); 
elseif action == 28 then
 emit_token(TOKEN_TILDE); 
elseif action == 29 then
 emit_token(TOKEN_BYTES); 
elseif action == 30 then
 emit_token(TOKEN_INDEX); 
elseif action == 31 then
 emit_token(TOKEN_SEGMENT); 
end if;
end sub;
if action < 26 then
actions_from_21_to_26();
else
actions_from_26_to_32();
end if;
end sub;
sub actions_from_32_to_43()
# actions between 32 and 43: 11
sub actions_from_32_to_37()
# actions between 32 and 37: 5
if action == 32 then
 emit_token(TOKEN_SIZE); 
elseif action == 33 then
 emit_token(TOKEN_AND); 
elseif action == 34 then
 emit_token(TOKEN_AS); 
elseif action == 35 then
 emit_token(TOKEN_BREAK); 
elseif action == 36 then
 emit_token(TOKEN_CONST); 
end if;
end sub;
sub actions_from_37_to_43()
# actions between 37 and 43: 6
if action == 37 then
 emit_token(TOKEN_CONTINUE); 
elseif action == 38 then
 emit_token(TOKEN_ELSE); 
elseif action == 39 then
 emit_token(TOKEN_ELSEIF); 
elseif action == 40 then
 emit_token(TOKEN_END); 
elseif action == 41 then
 emit_token(TOKEN_GOTO); 
elseif action == 42 then
 emit_token(TOKEN_IF); 
end if;
end sub;
if action < 37 then
actions_from_32_to_37();
else
actions_from_37_to_43();
end if;
end sub;
if action < 32 then
actions_from_21_to_32();
else
actions_from_32_to_43();
end if;
end sub;
if action < 21 then
actions_from_0_to_21();
else
actions_from_21_to_43();
end if;
end sub;
sub actions_from_43_to_86()
# actions between 43 and 86: 39
sub actions_from_43_to_64()
# actions between 43 and 64: 21
sub actions_from_43_to_53()
# actions between 43 and 53: 10
sub actions_from_43_to_48()
# actions between 43 and 48: 5
if action == 43 then
 emit_token(TOKEN_LOOP); 
elseif action == 44 then
 emit_token(TOKEN_NAMESPACE); 
elseif action == 45 then
 emit_token(TOKEN_NOT); 
elseif action == 46 then
 emit_token(TOKEN_OR); 
elseif action == 47 then
 emit_token(TOKEN_RECORD); 
end if;
end sub;
sub actions_from_48_to_53()
# actions between 48 and 53: 5
if action == 48 then
 emit_token(TOKEN_RETURN); 
elseif action == 49 then
 emit_token(TOKEN_SUB); 
elseif action == 50 then
 emit_token(TOKEN_THEN); 
elseif action == 51 then
 emit_token(TOKEN_TYPE); 
elseif action == 52 then
 emit_token(TOKEN_VAR); 
end if;
end sub;
if action < 48 then
actions_from_43_to_48();
else
actions_from_48_to_53();
end if;
end sub;
sub actions_from_53_to_64()
# actions between 53 and 64: 11
sub actions_from_53_to_58()
# actions between 53 and 58: 5
if action == 53 then
 emit_token(TOKEN_WHILE); 
elseif action == 54 then
 emit_identifier(); 
elseif action == 55 then
 start_state := STATE_STRING; string_start(); 
elseif action == 56 then
 string_add_char('\n'); 
elseif action == 57 then
 string_add_char('\r'); 
end if;
end sub;
sub actions_from_58_to_64()
# actions between 58 and 64: 6
if action == 58 then
 string_add_char(9); 
elseif action == 59 then
 string_add_char(parse_hex_byte(current_token_start+2)); 
elseif action == 60 then
 string_add_char(tokenbuffer[current_token_start+1]); 
elseif action == 61 then
 start_state := STATE_INITIAL; string_end(); 
elseif action == 62 then
 print("bogus escape"); fail(); 
elseif action == 63 then
 print("unterminated string"); fail(); 
end if;
end sub;
if action < 58 then
actions_from_53_to_58();
else
actions_from_58_to_64();
end if;
end sub;
if action < 53 then
actions_from_43_to_53();
else
actions_from_53_to_64();
end if;
end sub;
sub actions_from_64_to_86()
# actions between 64 and 86: 18
sub actions_from_64_to_75()
# actions between 64 and 75: 11
sub actions_from_64_to_69()
# actions between 64 and 69: 5
if action == 64 then
 string_add_chars(); 
elseif action == 65 then
 emit_small_const('\n'); 
elseif action == 66 then
 emit_small_const('\r'); 
elseif action == 67 then
 emit_small_const(9); 
elseif action == 68 then
 emit_small_const(tokenbuffer[current_token_start+2]); 
end if;
end sub;
sub actions_from_69_to_75()
# actions between 69 and 75: 6
if action == 69 then
 emit_small_const(parse_hex_byte(current_token_start+3)); 
elseif action == 70 then
 print("bogus escape"); fail(); 
elseif action == 71 then
 emit_small_const(tokenbuffer[current_token_start+1]); 
elseif action == 72 then
 emit_number(2, 2); 
elseif action == 73 then
 emit_number(8, 2); 
elseif action == 74 then
 emit_number(16, 2); 
end if;
end sub;
if action < 69 then
actions_from_64_to_69();
else
actions_from_69_to_75();
end if;
end sub;
sub actions_from_75_to_86()
# actions between 75 and 86: 7
if action == 75 then
 emit_number(10, 0); 
elseif action == 78 then
 debugging := 1; 
elseif action == 79 then
 if debugging == 0 then start_state := STATE_SKIPPING; end if; 
elseif action == 80 then
 start_state := STATE_INITIAL; 
elseif action == 83 then
 print("invalid compilation directive"); fail(); 
elseif action == 84 then
 current_line := current_line + 1; 
elseif action == 85 then
 print("unparsable byte 0x"); print_hex_i8(tokenbuffer[current_token_start]); fail(); 
end if;
end sub;
if action < 75 then
actions_from_64_to_75();
else
actions_from_75_to_86();
end if;
end sub;
if action < 64 then
actions_from_43_to_64();
else
actions_from_64_to_86();
end if;
end sub;
if action < 43 then
actions_from_0_to_43();
else
actions_from_43_to_86();
end if;
end sub;
