var current_arg: uint8 := 1;
var current_filename: [int8];
var current_filename_string_id: uint16;
var current_line_number: int16;
var current_fd: int8 := -1;
var current_byte: int8 := -1;
var peeked_byte: int8 := -1;

sub next_raw_byte(): (byte: int8)
    loop
        if current_fd != -1 then
            var eof: uint8;
            (byte, eof) := file_getchar(current_fd);
            if eof != 0 then
                file_close(current_fd);
                current_fd := -1;
                byte := 10;
            elseif byte == 10 then
                current_line_number := current_line_number + 1;
            end if;
            return;
        end if;

        if current_arg != ARGC then
            current_filename := ARGV[current_arg];
            print("opening: ");
            print(current_filename);
            print_newline();
            current_filename_string_id := lookup_string(
                current_filename, string_length(current_filename) as uint8);
            current_arg := current_arg + 1;
            current_fd := file_openin(current_filename);
            current_line_number := 1;
        end if;

        if current_fd == -1 then
            byte := -1;
            return;
        end if;
    end loop;
end sub;

sub next_byte()
    current_byte := peeked_byte;
    peeked_byte := next_raw_byte();
end sub;

sub error_with_location()
    print(" at about line ");
    print_i16(current_line_number as uint16);
    print(" of ");
    if current_filename != (0 as [int8]) then
        print(current_filename);
    else
        print("?");
    end if;
    print_newline();
    save_string_table(strings_dat);
    exit(1);
end sub;

sub print_buffer()
    var i: uint8 := 0;
    while i < buffer_index loop
        print_char(input_buffer[i] as int8);
        i := i + 1;
    end loop;
end sub;
