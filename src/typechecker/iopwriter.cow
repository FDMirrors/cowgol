var iop_out_fd: uint8;
var old_filename_id: uint16;
var old_linenumber: uint16;

sub init_iop_writer(filename: [int8])
    iop_out_fd := file_openout(filename);
end sub;

sub write_iop_header(header: [IHeader])
    file_putblock(iop_out_fd, header as [int8], IHeader@bytes);
    old_filename_id := 0;
    old_linenumber := 0;
end sub;

sub write_terminating_iop_header()
    var buf: IHeader[1];
    buf[0].thing_id := 0;
    buf[0].section := 0;
    write_iop_header(&buf[0]);
end sub;

sub write_iop(iop: [Iop])
    if current_filename_id != old_filename_id then
        var fbuf: FilenameIop[1];
        fbuf[0].iop_size := FilenameIop@bytes;
        fbuf[0].iop_kind := IOP_FILENAME;
        fbuf[0].thing_id := current_filename_id;
        file_putblock(iop_out_fd, &fbuf[0] as [int8], FilenameIop@bytes);
        old_filename_id := current_filename_id;
    end if;

    if current_linenumber != old_linenumber then
        var lbuf: LinenumberIop[1];
        lbuf[0].iop_size := LinenumberIop@bytes;
        lbuf[0].iop_kind := IOP_LINENUMBER;
        lbuf[0].line_number := current_linenumber;
        file_putblock(iop_out_fd, &lbuf[0] as [int8], LinenumberIop@bytes);
        old_linenumber := current_linenumber;
    end if;

    file_putblock(iop_out_fd, iop as [int8], iop.iop_size);
end sub;
