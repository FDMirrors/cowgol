record IHeader
    thing_id: uint16;
end record;

record Iop
    iop_size: uint8;
    iop_kind: uint8;
    payload: int8[0];
end record;


# Important note with regard to the stack machine: there is no DUP instruction.
# The code generator relies on every value on the stack being pushed exactly
# once and popped exactly once (so as to make it easy to determine the lifespan
# of nodes in the operator tree).

const IOP_TYPE_MASK        := 0b1110_0000;

# These are valid for all stages.
const IOP_TYPE_UNTYPED     := 0b0000_0000;
const IOP_END              := 0b0000_0000;
const IOP_CALL             := 0b0000_0001;
const IOP_STRING           := 0b0000_0010;
const IOP_RETURN           := 0b0000_0011;
const IOP_GOTO             := 0b0000_0100;
const IOP_FILENAME         := 0b0000_0101;
const IOP_LINENUMBER       := 0b0000_0110;
const IOP_BYTES            := 0b0000_0111;
const IOP_ADDRESS          := 0b0000_1000;
const IOP_LABEL            := 0b0000_1001;
const IOP_CLONELABEL       := 0b0000_1010;
const IOP_ADDRESSLO        := 0b0000_1011; # AddressIop
const IOP_ADDRESSHI        := 0b0000_1100; # AddressIop
const IOP_NAMEDGOTO        := 0b0000_1101;

# Front-end opcodes: this is the pure stack machine architecture emitted by the
# compiler. These are all FEIops (or subclasses thereof).
const IOP_TYPE_FE          := 0b0010_0000;
const IOP_TYPE_FE_2OP      := 0b0010_0000;
const IOP_FE_CAST          := 0b0010_0000; # ( value -- result )
const IOP_FE_MATERIALISE   := 0b0010_0001; # ( value -- result )
const IOP_FE_ADDRESSOF     := 0b0010_0010; # ( ea -- ptr-to-ea )
const IOP_FE_BYTESOF       := 0b0010_0011; # ( ea -- byte-size )
const IOP_FE_SIZEOF        := 0b0010_0100; # ( ea -- member-count )
const IOP_FE_OFFSET        := 0b0010_0101; # ( ea byte-offset -- ea )
const IOP_FE_INDEX         := 0b0010_0110; # ( ea scale-offset -- ea )
const IOP_FE_NEG           := 0b0010_0111; # ( value -- result )
const IOP_FE_NOT           := 0b0010_1000; # ( value -- result )
const IOP_FE_ZEXT          := 0b0010_1001; # ( value -- result )
const IOP_FE_SEXT          := 0b0010_1010; # ( value -- result )

const IOP_TYPE_FE_3OP      := 0b0011_0000;
const IOP_TYPE_FE_3OP_SIGNED := 1;
const IOP_TYPE_FE_3OP_UNSIGNED_MASK := 0xFE;
const IOP_FE_ADD           := 0b0011_0000; # ( left right -- result )
const IOP_FE_SUB           := 0b0011_0001; # ( left right -- result )
const IOP_FE_MUL           := 0b0011_0010; # ( left right -- result )
const IOP_FE_DIV           := 0b0011_0011; # ( left right -- result )
const IOP_FE_MOD           := 0b0011_0100; # ( left right -- result )
const IOP_FE_AND           := 0b0011_0101; # ( left right -- result )
const IOP_FE_OR            := 0b0011_0110; # ( left right -- result )
const IOP_FE_EOR           := 0b0011_0111; # ( left right -- result )
const IOP_FE_LSHIFT        := 0b0011_1000; # ( value count -- result )
const IOP_FE_RSHIFT        := 0b0011_1001; # ( value count -- result )
const IOP_FE_RSHIFTU       := 0b0011_1010; # ( value count -- result )
const IOP_FE_RSHIFTS       := 0b0011_1011; # ( value count -- result )
const IOP_FE_DIVU          := 0b0011_1100; # ( left right -- result )
const IOP_FE_DIVS          := 0b0011_1101; # ( left right -- result )
const IOP_FE_MODU          := 0b0011_1110; # ( left right -- result )
const IOP_FE_MODS          := 0b0011_1111; # ( left right -- result )

# Additional, special front end iops.
const IOP_TYPE_FEX         := 0b0100_0000;
const IOP_FEX_PUSH         := 0b0100_0000; # ( -- ea ): FEPushIop
const IOP_FEX_INPUTPARAM   := 0b0100_0001; # ( -- ea ): FEParameterIop
const IOP_FEX_OUTPUTPARAM  := 0b0100_0010; # ( -- ea ): FEParameterIop
const IOP_FEX_MEMBEROF     := 0b0100_0100; # ( ea -- ea ): FEMemberIop
const IOP_FEX_BEQ          := 0b0100_0101; # ( left right -- ): FEConditionalIop
const IOP_FEX_BLT          := 0b0100_0110; # ( left right -- ): FEConditionalIop
const IOP_FEX_BGT          := 0b0100_0111; # ( left right -- ): FEConditionalIop
const IOP_FEX_SWAP         := 0b0100_1000; # ( a b -- b a ): Iop
const IOP_FEX_ASSIGN       := 0b0100_1001; # ( dest src -- ): Iop
const IOP_FEX_BLTU         := 0b0100_1010; # ( left right -- ): FEConditionalIop
const IOP_FEX_BLTS         := 0b0100_1011; # ( left right -- ): FEConditionalIop
const IOP_FEX_BGTU         := 0b0100_1100; # ( left right -- ): FEConditionalIop
const IOP_FEX_BGTS         := 0b0100_1101; # ( left right -- ): FEConditionalIop
const IOP_FEX_DROP         := 0b0100_1110; # ( value -- ); Iop

# Backend opcodes, after type checking and conversion out of front end format.
# This is the memory-memory architecture which the real code generator converts
# into machine code.
# 2op instructions (the RHS is ignored).
const IOP_TYPE_BACKEND_2OP := 0b0110_0000;
const IOP_BE_COPY          := 0b0110_0000;
const IOP_BE_SEXT          := 0b0110_0001;
const IOP_BE_ZEXT          := 0b0110_0010;
const IOP_BE_NEG           := 0b0110_0011;
const IOP_BE_NOT           := 0b0110_0100;

# 3op instructions.
const IOP_TYPE_BACKEND_3OP := 0b1000_0000;
const IOP_BE_ADD           := 0b1000_0000;
const IOP_BE_SUB           := 0b1000_0001;
const IOP_BE_MUL           := 0b1000_0010;
const IOP_BE_AND           := 0b1000_0011;
const IOP_BE_OR            := 0b1000_0100;
const IOP_BE_EOR           := 0b1000_0101;
const IOP_BE_DIVS          := 0b1000_0110;
const IOP_BE_DIVU          := 0b1000_0111;
const IOP_BE_MODS          := 0b1000_1000;
const IOP_BE_MODU          := 0b1000_1001;
const IOP_BE_INDEX         := 0b1000_1010;
const IOP_BE_LSL           := 0b1000_1011;
const IOP_BE_LSR           := 0b1000_1100;
const IOP_BE_ASR           := 0b1000_1101;

# Specials.
const IOP_TYPE_BACKEND_SPECIAL := 0b1010_0000;
const IOP_TYPE_COMPARISON_S    := 0b0000_0001;
const IOP_TYPE_COMPARISON_GT   := 0b0000_0010;
const IOP_BE_BLTU              := 0b1010_0000;
const IOP_BE_BLTS              := 0b1010_0001;
const IOP_BE_BGTU              := 0b1010_0010;
const IOP_BE_BGTS              := 0b1010_0011;
const IOP_BE_BEQ               := 0b1010_0100;

const IOP_TYPE_CODEGEN     := 0b1110_0000;
const IOP_CG_6502_COND     := 0b1110_0100;
const IOP_CG_6502_MEM      := 0b1110_0101;

record FilenameIop: Iop
    thing_id: uint16;
end record;

record LinenumberIop: Iop
    line_number: uint16;
end record;

record LabelIop: Iop
    label: uint8;
end record;

record CloneLabelIop: Iop
    src_label: uint8;
    dest_label: uint8;
end record;

record StringIop: Iop
    string_id: uint16;
end record;

record CallIop: Iop
    thing_id: uint16;
    input_parameter_count: uint8;
    output_parameter_count: uint8;
end record;

record GotoIop: Iop
    label: uint8;
end record;

record NamedGotoIop: Iop
    label_id: uint16;
end record;

record BytesIop: Iop
    byte_count: uint8;
    bytes: uint8[8];
end record;

record AddressIop: Iop
    thing_id: uint16;
    offset: uint16;
end record;

record FETypedIop: Iop
    type_id: uint16;
end record;

record FEPushIop: FETypedIop
    thing_id: uint16;
end record;

record FEParameterIop: Iop
    subroutine_id: uint16;
    parameter: uint8;
end record;

record FEMemberIop: FETypedIop
    thing_id: uint16;
end record;

record FEConditionalIop: Iop
    iftrue_label: uint8;
    iffalse_label: uint8;
end record;

const EA_VALUE := 0; # [&obj+numoff+[varoff]]
const EA_DEREF := 1; # [[&obj]+numoff+[varoff]]
const EA_LEA   := 2; # &obj+numoff+[varoff]

record EffectiveAddress
    flags: uint8;
    obj_id: uint16;
    varoff_id: uint16;
    numoff_id: uint16;
    type_id: uint16;
end record;

record BEIop: Iop
    width: uint8;
    left: EffectiveAddress;
    right: EffectiveAddress;
    dest: EffectiveAddress;
end record;

record BEConditionalIop: Iop
    width: uint8;
    left: EffectiveAddress;
    right: EffectiveAddress;
    iftrue_label: uint8;
    iffalse_label: uint8;
end record;

record CG6502MemIop: Iop
    opcode: uint8;
    thing_id: uint16;
    offset: uint16;
end record;

record CG6502ConditionalIop: Iop
    opcode: uint8;
    label: uint8;
end record;

record BiggestIop: BEIop
end record;

sub copy_iop(src: [Iop], dest: [Iop])
    copy_memory(src as [int8], dest as [int8], src.iop_size as uint16);
end sub;

sub copy_ea(src: [EffectiveAddress], dest: [EffectiveAddress])
    copy_memory(src as [int8], dest as [int8], EffectiveAddress@bytes);
end sub;

sub zero_ea(ea: [EffectiveAddress])
    zero_memory(ea as [int8], EffectiveAddress@bytes);
end sub;

sub is_same_ea(ea1: [EffectiveAddress], ea2: [EffectiveAddress]): (result: uint8)
    if compare_memory(ea1 as [int8], ea2 as [int8], EffectiveAddress@bytes) == 0 then
        result := 1;
    else
        result := 0;
    end if;
end sub;

sub is_same_ea_ignoring_type(ea1: [EffectiveAddress], ea2: [EffectiveAddress]): (result: uint8)
    if (ea1.obj_id == ea2.obj_id) and
        (ea1.varoff_id == ea2.varoff_id) and
        (ea1.numoff_id == ea2.numoff_id) and
        (ea1.flags == ea2.flags)
    then
        var w1: uint8 := get_width_of_type(ea1.type_id) as uint8;
        var w2: uint8 := get_width_of_type(ea2.type_id) as uint8;
        if w1 == w2 then
            result := 1;
            return;
        end if;
    end if;
    result := 0;
end sub;

sub print_ea(ea: [EffectiveAddress])
    if ea.flags != EA_LEA then
        print_char('[');
    end if;
    if ea.flags == EA_DEREF then
        print_char('[');
    end if;
    print_thing(ea.obj_id);
    if ea.flags == EA_DEREF then
        print_char(']');
    end if;
    if ea.varoff_id != 0 then
        print("+[");
        print_thing(ea.varoff_id);
        print_char(']');
    end if;
    if ea.numoff_id != 0 then
        print("+#");
        print_i32(get_value_of_number(ea.numoff_id) as uint32);
    end if;
    if ea.flags != EA_LEA then
        print_char(']');
    end if;
    print_char('.');
    print_thing(ea.type_id);
end sub;
