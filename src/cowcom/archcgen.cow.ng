%{
	var uint64_type: [Symbol];
	var int64_type: [Symbol];
	var uint32_type: [Symbol];
	var int32_type: [Symbol];
	var uint16_type: [Symbol];
	var int16_type: [Symbol];
	var uint8_type: [Symbol];
	var int8_type: [Symbol];
	var intptr_type: [Symbol];

	const VARSTACK_SIZE := 64;
	typedef Slot := uint16;
	var varstack: Slot[VARSTACK_SIZE];
	var varsp: uint8;
	var varid: Slot := 1;

	record Extern
		name: string;
		id: uint16;
		next: [Extern];
	end record;

	var externs: [Extern] := (0 as [Extern]);

	sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size)
		var a := (alignment-1) as Size;
		newvalue := (value+a) & ~a;
	end sub;

	sub ArchInitTypes()
		uint64_type := MakeNumberType(8, 8, 0, "uint64");
		int64_type := MakeNumberType(8, 8, 1, "int64");
		uint32_type := MakeNumberType(4, 4, 0, "uint32");
		int32_type := MakeNumberType(4, 4, 1, "int32");
		uint16_type := MakeNumberType(2, 2, 0, "uint16");
		int16_type := MakeNumberType(2, 2, 1, "int16");
		uint8_type := MakeNumberType(1, 1, 0, "uint8");
		int8_type := MakeNumberType(1, 1, 1, "int8");

		intptr_type := uint64_type;
		AddAliasString("intptr", intptr_type);
	end sub;

	sub ArchGuessIntType(min: Arith, max: Arith): (symbol: [Symbol])
		if (min >= 0) and (max <= 255) then
			symbol := uint8_type;
		elseif (min >= -128) and (max <= 127) then
			symbol := int8_type;
		elseif (min >= 0) and (max <= 65535) then
			symbol := uint16_type;
		elseif (min >= -32768) and (max <= 32767) then
			symbol := int16_type;
		elseif (min >= 0) then
			symbol := uint32_type;
		else
			symbol := int32_type;
		end if;
	end sub;

	sub ArchInitVariable(symbol: [Symbol])
		var subr := symbol.vardata.subr;
		var offset := subr.workspace[0];
		offset := ArchAlignUp(offset, symbol.vardata.type.typedata.alignment);
		symbol.vardata.offset := offset;
		subr.workspace[0] := offset + symbol.vardata.type.typedata.width;
	end sub;

	sub ArchInitMember(containing: [Symbol], member: [Symbol], position: Size)
		position := ArchAlignUp(position, member.vardata.type.typedata.alignment);
		member.vardata.offset := position;
		position := position + member.vardata.type.typedata.width;
		if position > containing.typedata.width then
			containing.typedata.width := position;
		end if;
	end sub;

	sub E_symref(sym: [Symbol], off: Size)
		if sym.vardata.externname != (0 as string) then
			E("((i1*)");
			E(sym.vardata.externname);
			E_i16(off as int16);
			E(")");
		else
			EmitByte(COO_ESCAPE_WSREF);
			E_h16(sym.vardata.subr.id);
			E_h8(0);
			E_h16(sym.vardata.offset + off);
		end if;
	end sub;

	sub ArchEndInstruction()
	end sub;

	sub ArchEndGroup()
		E_nl();
	end sub;

	sub PushVid(vid: Slot)
		if varsp == VARSTACK_SIZE then
			SimpleError("varstack overflow");
		end if;
		varstack[varsp] := vid;
		varsp := varsp + 1;
	end sub;

	sub Push(): (vid: Slot)
		vid := varid;
		varid := varid + 1;
		PushVid(vid);
		#E("/* push v");
		#E_u16(vid);
		#E(" at ");
		#E_u8(varsp);
		#E(" */");
	end sub;

	sub CheckVarstackUnderflow()
		if varsp == 0 then
			SimpleError("varstack underflow");
		end if;
	end sub;

	sub Pop(): (vid: Slot)
		CheckVarstackUnderflow();
		varsp := varsp - 1;
		vid := varstack[varsp];
		#E("/* pop v");
		#E_u16(vid);
		#E(" at ");
		#E_u8(varsp);
		#E(" */");
	end sub;

	sub Peek(): (vid: Slot)
		CheckVarstackUnderflow();
		vid := varstack[varsp-1];
	end sub;

	# Note that this *destroys* the source register.
	sub ArchEmitMove(src: RegId, dest: RegId)
	end sub;
%}

wordsize uint32;

register v1 v2 v4 v8 param;

regdata v1 stacked;
regdata v2 stacked;
regdata v4 stacked;
regdata v8 stacked;
regdata param;

// --- Core things ----------------------------------------------------------

gen STARTFILE();
gen ENDFILE();

gen LABEL():b
{
	E_labelref($b.label);
	E(":;\n");
}

gen JUMP():j
{
	E("\tgoto ");
	E_labelref($j.label);
	E(";\n");
}

gen RETURN()
{
	E("\tgoto endsub;\n");
}

// --- Subroutines ----------------------------------------------------------

gen STARTSUB():s
{
	EmitterPushChunk();
	E_h16($s.subr.id);

	E("\n// ");
	E($s.subr.name);
	E(" workspace at ");
	EmitByte(COO_ESCAPE_WSREF);
	E_h16($s.subr.id);
	E("000000");
	E(" length ");
	EmitByte(COO_ESCAPE_WSSIZE);
	E_h16($s.subr.id);
	E("00");
	E("\nvoid ");
	E_subref($s.subr);
	E("(");

	var first: uint8 := 1;
	sub comma()
		if first == 0 then
			E(", ");
		end if;
		first := 0;
	end sub;

	# Output parameters, left to right (the rightmost gets pushed last)

	var count: uint8 := 0;
	while count != $s.subr.num_output_parameters loop
		var param := GetOutputParameter($s.subr, count);
		var pid := Push();

		comma();
		E("i");
		E_u8(param.vardata.type.typedata.width as uint8);
		E("* p");
		E_u16(pid);

		E(" /* ");
		E(param.name);
		E(" */");
		count := count + 1;
	end loop;

	# Input parameters, right to left (the rightmost was pushed last
	# and so is the first C parameter)

	count := $s.subr.num_input_parameters;
	while count != 0 loop
		count := count - 1;
		param := GetInputParameter($s.subr, count);
		pid := Push();

		comma();
		E("i");
		E_u8(param.vardata.type.typedata.width as uint8);
		E(" p");
		E_u16(pid);

		E(" /* ");
		E(param.name);
		E(" */");
	end loop;

	if ($s.subr.num_input_parameters + $s.subr.num_output_parameters) == 0 then
		E("void");
	end if;
	E(") {\n");

	count := 0;
	while count != $s.subr.num_input_parameters loop
		param := GetInputParameter($s.subr, count);
		pid := Pop();

		E("\t*(i");
		E_u8(param.vardata.type.typedata.width as uint8);
		E("*)(intptr_t)(");
		E_symref(param, 0);
		E(") = p");
		E_u16(pid);
		E("; /*");
		E(param.name);
		E(" */\n");

		count := count + 1;
	end loop;
}

gen ENDSUB():s
{
	E("endsub:;\n");

	var count: uint8 := $s.subr.num_output_parameters;
	while count != 0 loop
		count := count - 1;
		var param := GetOutputParameter($s.subr, count);
		var pid := Pop();

		E("\t*p");
		E_u16(pid);
		E(" = *(i");
		E_u8(param.vardata.type.typedata.width as uint8);
		E("*)(intptr_t)(");
		E_symref(param, 0);
		E(");\n");
	end loop;
	E("}\n");
	EmitterDeclareWorkspace($s.subr, 0, $s.subr.workspace[0]);
	EmitterPopChunk('S');
}

gen param := END();
gen param := ARG1(param, v1);
gen param := ARG2(param, v2);
gen param := ARG4(param, v4);
gen param := ARG8(param, v8);

gen v1 := POPARG1();
gen v2 := POPARG2();
gen v4 := POPARG4();
gen v8 := POPARG8();

%{
	sub Call(subr: [Subroutine])
		# Allocate vids for the return parameters.

		var outputvid := varid;
		varid := varid + (subr.num_output_parameters as Slot);

		# Declare variables for the output parameters.

		var count: uint8 := 0;
		while count != subr.num_output_parameters loop
			var param := GetOutputParameter(subr, count);

			E("\ti");
			E_u8(param.vardata.type.typedata.width as uint8);
			E(" v");
			E_u16(outputvid + (count as Slot));
			E(";\n");

			count := count + 1;
		end loop;

		# Emit the function call.

		E("\t");
		E_subref(subr);
		E("(");

		var first: uint8 := 1;
		sub comma()
			if first == 0 then
				E(", ");
			end if;
			first := 0;
		end sub;

		# Output parameters (left to right).

		count := 0;
		while count != subr.num_output_parameters loop
			param := GetOutputParameter(subr, count);

			comma();
			E("&v");
			E_u16(outputvid + (count as Slot));

			count := count + 1;
		end loop;

		# Input parameters (right to left; the rightmost gets pushed last)

		count := 0;
		while count != subr.num_input_parameters loop
			var vid := Pop();
			comma();
			E("v");
			E_u16(vid);

			count := count + 1;
		end loop;

		E(");\n");

		# Now push the output parameters (left to right; the last one will be
		# popped first).

		count := 0;
		while count != subr.num_output_parameters loop
			vid := outputvid + (count as Slot);
			PushVid(vid);
			count := count + 1;
		end loop;
	end sub;
%}

gen CALL(param):s         { Call($s.subr); }
gen v1 := CALLE1(param):s { Call($s.subr); }
gen v2 := CALLE2(param):s { Call($s.subr); }
gen v4 := CALLE4(param):s { Call($s.subr); }
gen v8 := CALLE8(param):s { Call($s.subr); }

// --- Core conversions --------------------------------------------------

%{
	sub LoadConstant(width: uint8, value: Arith)
		var vid := Push();

		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = (i");
		E_u8(width);
		E(")");
		E_i32(value as int32);
		E(";\n");
	end sub;
%}

gen v1 := CONSTANT():c { LoadConstant(1, $c.value); }
gen v2 := CONSTANT():c { LoadConstant(2, $c.value); }
gen v4 := CONSTANT():c { LoadConstant(4, $c.value); }
gen v8 := CONSTANT():c { LoadConstant(8, $c.value); }

gen v8 := ADDRESS():a
{
	var vid := Push();

	E("\ti8 v");
	E_u16(vid);
	E(" = (i8)(intptr_t)(");
	E_symref($a.sym, $a.off);
	E(");\n");
}

// --- Loads and stores -----------------------------------------------------

%{
	sub StoreVV(width: uint8)
		var addrid := Pop();
		var valid := Pop();
		E("\t*(i");
		E_u8(width);
		E("*)(intptr_t)v");
		E_u16(addrid);
		E(" = v");
		E_u16(valid);
		E(";\n");
	end sub;

	sub LoadVV(width: uint8)
		var addrid := Pop();
		var valid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(valid);
		E(" = *(i");
		E_u8(width);
		E("*)(intptr_t)v");
		E_u16(addrid);
		E(";\n");
	end sub;
%}

gen STORE1(v1:val, v8:addr) { StoreVV(1); }
gen STORE2(v2:val, v8:addr) { StoreVV(2); }
gen STORE4(v4:val, v8:addr) { StoreVV(4); }
gen STORE8(v8:val, v8:addr) { StoreVV(8); }

gen v1 := LOAD1(v8:addr) { LoadVV(1); }
gen v2 := LOAD2(v8:addr) { LoadVV(2); }
gen v4 := LOAD4(v8:addr) { LoadVV(4); }
gen v8 := LOAD8(v8:addr) { LoadVV(8); }

// --- Maths ----------------------------------------------------------------

%{
	sub Op2VV(width: uint8, op: string)
		var rhsid := Pop();
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = v");
		E_u16(lhsid);
		E(op);
		E("v");
		E_u16(rhsid);
		E(";\n");
	end sub;

	sub Op2VC(width: uint8, op: string, rhs: Arith)
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = v");
		E_u16(lhsid);
		E(op);
		E("(");
		E_i32(rhs);
		E(");\n");
	end sub;

	sub Op2VVSigned(width: uint8, op: string)
		var rhsid := Pop();
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = (s");
		E_u8(width);
		E(")v");
		E_u16(lhsid);
		E(op);
		E("(s");
		E_u8(width);
		E(")v");
		E_u16(rhsid);
		E(";\n");
	end sub;

	sub Op2VCSigned(width: uint8, op: string, rhs: Arith)
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = v");
		E_u16(lhsid);
		E(op);
		E("(");
		E_i32(rhs);
		E(");\n");
	end sub;
%}

gen v1 := ADD1(v1:lhs, v1:rhs)          { Op2VV(1, "+"); }
gen v2 := ADD2(v2:lhs, v2:rhs)          { Op2VV(2, "+"); }
gen v4 := ADD4(v4:lhs, v4:rhs)          { Op2VV(4, "+"); }
gen v8 := ADD8(v8:lhs, v8:rhs)          { Op2VV(8, "+"); }
gen v1 := ADD1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "+", $rhs.value); }
gen v2 := ADD2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "+", $rhs.value); }
gen v4 := ADD4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "+", $rhs.value); }
gen v8 := ADD8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "+", $rhs.value); }

gen v1 := SUB1(v1:lhs, v1:rhs)          { Op2VV(1, "-"); }
gen v2 := SUB2(v2:lhs, v2:rhs)          { Op2VV(2, "-"); }
gen v4 := SUB4(v4:lhs, v4:rhs)          { Op2VV(4, "-"); }
gen v8 := SUB8(v8:lhs, v8:rhs)          { Op2VV(8, "-"); }
gen v1 := SUB1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "-", $rhs.value); }
gen v2 := SUB2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "-", $rhs.value); }
gen v4 := SUB4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "-", $rhs.value); }
gen v8 := SUB8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "-", $rhs.value); }

gen v1 := MUL1(v1:lhs, v1:rhs)          { Op2VV(1, "*"); }
gen v2 := MUL2(v2:lhs, v2:rhs)          { Op2VV(2, "*"); }
gen v4 := MUL4(v4:lhs, v4:rhs)          { Op2VV(4, "*"); }
gen v8 := MUL8(v8:lhs, v8:rhs)          { Op2VV(8, "*"); }
gen v1 := MUL1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "*", $rhs.value); }
gen v2 := MUL2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "*", $rhs.value); }
gen v4 := MUL4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "*", $rhs.value); }
gen v8 := MUL8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "*", $rhs.value); }

gen v1 := DIVU1(v1:lhs, v1:rhs)         { Op2VV(1, "/"); }
gen v2 := DIVU2(v2:lhs, v2:rhs)         { Op2VV(2, "/"); }
gen v4 := DIVU4(v4:lhs, v4:rhs)         { Op2VV(4, "/"); }
gen v8 := DIVU8(v8:lhs, v8:rhs)         { Op2VV(8, "/"); }
gen v1 := DIVU1(v1:lhs, CONSTANT():rhs) { Op2VC(1, "/", $rhs.value); }
gen v2 := DIVU2(v2:lhs, CONSTANT():rhs) { Op2VC(2, "/", $rhs.value); }
gen v4 := DIVU4(v4:lhs, CONSTANT():rhs) { Op2VC(4, "/", $rhs.value); }
gen v8 := DIVU8(v8:lhs, CONSTANT():rhs) { Op2VC(8, "/", $rhs.value); }

gen v1 := REMU1(v1:lhs, v1:rhs)         { Op2VV(1, "%"); }
gen v2 := REMU2(v2:lhs, v2:rhs)         { Op2VV(2, "%"); }
gen v4 := REMU4(v4:lhs, v4:rhs)         { Op2VV(4, "%"); }
gen v8 := REMU8(v8:lhs, v8:rhs)         { Op2VV(8, "%"); }
gen v1 := REMU1(v1:lhs, CONSTANT():rhs) { Op2VC(1, "%", $rhs.value); }
gen v2 := REMU2(v2:lhs, CONSTANT():rhs) { Op2VC(2, "%", $rhs.value); }
gen v4 := REMU4(v4:lhs, CONSTANT():rhs) { Op2VC(4, "%", $rhs.value); }
gen v8 := REMU8(v8:lhs, CONSTANT():rhs) { Op2VC(8, "%", $rhs.value); }

gen v1 := DIVS1(v1:lhs, v1:rhs)         { Op2VVSigned(1, "/"); }
gen v2 := DIVS2(v2:lhs, v2:rhs)         { Op2VVSigned(2, "/"); }
gen v4 := DIVS4(v4:lhs, v4:rhs)         { Op2VVSigned(4, "/"); }
gen v8 := DIVS8(v8:lhs, v8:rhs)         { Op2VVSigned(8, "/"); }
gen v1 := DIVS1(v1:lhs, CONSTANT():rhs) { Op2VCSigned(1, "/", $rhs.value); }
gen v2 := DIVS2(v2:lhs, CONSTANT():rhs) { Op2VCSigned(2, "/", $rhs.value); }
gen v4 := DIVS4(v4:lhs, CONSTANT():rhs) { Op2VCSigned(4, "/", $rhs.value); }
gen v8 := DIVS8(v8:lhs, CONSTANT():rhs) { Op2VCSigned(8, "/", $rhs.value); }

gen v1 := REMS1(v1:lhs, v1:rhs)         { Op2VVSigned(1, "%"); }
gen v2 := REMS2(v2:lhs, v2:rhs)         { Op2VVSigned(2, "%"); }
gen v4 := REMS4(v4:lhs, v4:rhs)         { Op2VVSigned(4, "%"); }
gen v8 := REMS8(v8:lhs, v8:rhs)         { Op2VVSigned(8, "%"); }
gen v1 := REMS1(v1:lhs, CONSTANT():rhs) { Op2VCSigned(1, "%", $rhs.value); }
gen v2 := REMS2(v2:lhs, CONSTANT():rhs) { Op2VCSigned(2, "%", $rhs.value); }
gen v4 := REMS4(v4:lhs, CONSTANT():rhs) { Op2VCSigned(4, "%", $rhs.value); }
gen v8 := REMS8(v8:lhs, CONSTANT():rhs) { Op2VCSigned(8, "%", $rhs.value); }

gen v1 := AND1(v1:lhs, v1:rhs)          { Op2VV(1, "&"); }
gen v2 := AND2(v2:lhs, v2:rhs)          { Op2VV(2, "&"); }
gen v4 := AND4(v4:lhs, v4:rhs)          { Op2VV(4, "&"); }
gen v8 := AND8(v8:lhs, v8:rhs)          { Op2VV(8, "&"); }
gen v1 := AND1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "&", $rhs.value); }
gen v2 := AND2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "&", $rhs.value); }
gen v4 := AND4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "&", $rhs.value); }
gen v8 := AND8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "&", $rhs.value); }

gen v1 := OR1(v1:lhs, v1:rhs)           { Op2VV(1, "|"); }
gen v2 := OR2(v2:lhs, v2:rhs)           { Op2VV(2, "|"); }
gen v4 := OR4(v4:lhs, v4:rhs)           { Op2VV(4, "|"); }
gen v8 := OR8(v8:lhs, v8:rhs)           { Op2VV(8, "|"); }
gen v1 := OR1(v1:lhs, CONSTANT():rhs)   { Op2VC(1, "|", $rhs.value); }
gen v2 := OR2(v2:lhs, CONSTANT():rhs)   { Op2VC(2, "|", $rhs.value); }
gen v4 := OR4(v4:lhs, CONSTANT():rhs)   { Op2VC(4, "|", $rhs.value); }
gen v8 := OR8(v8:lhs, CONSTANT():rhs)   { Op2VC(8, "|", $rhs.value); }

gen v1 := EOR1(v1:lhs, v1:rhs)          { Op2VV(1, "^"); }
gen v2 := EOR2(v2:lhs, v2:rhs)          { Op2VV(2, "^"); }
gen v4 := EOR4(v4:lhs, v4:rhs)          { Op2VV(4, "^"); }
gen v8 := EOR8(v8:lhs, v8:rhs)          { Op2VV(8, "^"); }
gen v1 := EOR1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "^", $rhs.value); }
gen v2 := EOR2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "^", $rhs.value); }
gen v4 := EOR4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "^", $rhs.value); }
gen v8 := EOR8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "^", $rhs.value); }

%{
	sub Op1V(width: uint8, op: string)
		var valid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = ");
		E(op);
		E("v");
		E_u16(valid);
		E(";\n");
	end sub;
%}

gen v1 := NEG1(v1) { Op1V(1, "-"); }
gen v2 := NEG2(v2) { Op1V(2, "-"); }
gen v4 := NEG4(v4) { Op1V(4, "-"); }
gen v8 := NEG8(v8) { Op1V(8, "-"); }
gen v1 := NOT1(v1) { Op1V(1, "~"); }
gen v2 := NOT2(v2) { Op1V(2, "~"); }
gen v4 := NOT4(v4) { Op1V(4, "~"); }
gen v8 := NOT8(v8) { Op1V(8, "~"); }

// --- Shifts ---------------------------------------------------------------

%{
	sub Shift(width: uint8, type: string, op: string)
		var rhsid := Pop();
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = ((");
		E(type);
		E(")v");
		E_u16(lhsid);
		E(")");
		E(op);
		E("v");
		E_u16(rhsid);
		E(";\n");
	end sub;
%}

gen v1 := LSHIFT1(v1, v1)  { Shift(1, "i1", "<<"); }
gen v2 := LSHIFT2(v2, v1)  { Shift(2, "i2", "<<"); }
gen v4 := LSHIFT4(v4, v1)  { Shift(4, "i4", "<<"); }
gen v8 := LSHIFT8(v8, v1)  { Shift(8, "i8", "<<"); }
gen v1 := RSHIFTU1(v1, v1) { Shift(1, "i1", ">>"); }
gen v2 := RSHIFTU2(v2, v1) { Shift(2, "i2", ">>"); }
gen v4 := RSHIFTU4(v4, v1) { Shift(4, "i4", ">>"); }
gen v8 := RSHIFTU8(v8, v1) { Shift(8, "i8", ">>"); }
gen v1 := RSHIFTS1(v1, v1) { Shift(1, "s1", ">>"); }
gen v2 := RSHIFTS2(v2, v1) { Shift(2, "s2", ">>"); }
gen v4 := RSHIFTS4(v4, v1) { Shift(4, "s4", ">>"); }
gen v8 := RSHIFTS8(v8, v1) { Shift(8, "s8", ">>"); }

// --- Branches -------------------------------------------------------------

%{
	sub Branch(node: [Node], op: string)
		var rhsid := Pop();
		var lhsid := Pop();
		E("\tif (v");
		E_u16(lhsid);
		E(op);
		E("v");
		E_u16(rhsid);
		E(") goto ");
		E_labelref(node.beq0.truelabel);
		E("; else goto ");
		E_labelref(node.beq0.falselabel);
		E(";\n");
	end sub;

	sub BranchSigned(node: [Node], width: uint8, op: string)
		var rhsid := Pop();
		var lhsid := Pop();
		E("\tif ((s");
		E_u8(width);
		E(")v");
		E_u16(lhsid);
		E(op);
		E("(s");
		E_u8(width);
		E(")v");
		E_u16(rhsid);
		E(") goto ");
		E_labelref(node.beq0.truelabel);
		E("; else goto ");
		E_labelref(node.beq0.falselabel);
		E(";\n");
	end sub;

	sub BranchConstant(node: [Node], lhs: Arith, rhs: Arith)
		E("\tgoto ");
		if lhs == rhs then
			E_labelref(node.beq0.truelabel);
		else
			E_labelref(node.beq0.falselabel);
		end if;
		E(";\n");
	end sub;
%}

gen BEQ0(CONSTANT():c1, CONSTANT():c2):b { BranchConstant(self.n[0], $c1.value, $c2.value); }

gen BEQ1(v1:lhs, v1:rhs):b { Branch(self.n[0], "=="); }
gen BEQ2(v2:lhs, v2:rhs):b { Branch(self.n[0], "=="); }
gen BEQ4(v4:lhs, v4:rhs):b { Branch(self.n[0], "=="); }
gen BEQ8(v8:lhs, v8:rhs):b { Branch(self.n[0], "=="); }

gen BLTU1(v1:lhs, v1:rhs):b { Branch(self.n[0], "<"); }
gen BLTU2(v2:lhs, v2:rhs):b { Branch(self.n[0], "<"); }
gen BLTU4(v4:lhs, v4:rhs):b { Branch(self.n[0], "<"); }
gen BLTU8(v8:lhs, v8:rhs):b { Branch(self.n[0], "<"); }

gen BLTS1(v1:lhs, v1:rhs):b { BranchSigned(self.n[0], 1, "<"); }
gen BLTS2(v2:lhs, v2:rhs):b { BranchSigned(self.n[0], 2, "<"); }
gen BLTS4(v4:lhs, v4:rhs):b { BranchSigned(self.n[0], 4, "<"); }
gen BLTS8(v8:lhs, v8:rhs):b { BranchSigned(self.n[0], 8, "<"); }

// --- Case -----------------------------------------------------------------

%{
	sub DoCase(width: uint8)
		var vid := Pop();
		E("\tswitch (v");
		E_u16(vid);
		E(") {\n");

		var whenblock := current_case.whenblocks;
		while whenblock != (0 as [WhenBlock]) loop
			var thiswhen := &whenblock.whens[0];
			while thiswhen != &whenblock.whens[WHEN_BLOCK_SIZE] loop
				if thiswhen.label != 0 then
					E("\t\tcase ");
					var mask: uint32;
					case width is
						when 1: mask := 0xff;
						when 2: mask := 0xffff;
						when 4: mask := 0xffffffff;
					end case;
					E_u32((thiswhen.value as uint32) & mask);
					E(": goto ");
					E_labelref(thiswhen.label);
					E(";\n");
				end if;

				thiswhen := @next thiswhen;
			end loop;
			whenblock := whenblock.next;
		end loop;
		if current_case.else_label != 0 then
			E("\t\tdefault: goto ");
			E_labelref(current_case.else_label);
			E(";\n");
		end if;
		E("\t}\n");
	end sub;
%}

gen CASE1(v1) { DoCase(1); }
gen CASE2(v2) { DoCase(2); }
gen CASE4(v4) { DoCase(4); }
gen CASE8(v8) { DoCase(8); }

//%{
//	sub Whencase(value: Arith, falselabel: LabelRef)
//		var vid := varstack[varsp-1];
//		E("\tif (v");
//		E_u16(vid);
//		E(" != ");
//		E_i32(value);
//		E(") goto ");
//		E_labelref(falselabel);
//		E(";\n");
//	end sub;
//%}
//
//gen STARTCASE1(v1);
//gen STARTCASE2(v2);
//gen STARTCASE4(v4);
//gen STARTCASE8(v8);
//
//gen WHENCASE1():c { Whencase($c.value & 0xff, $c.falselabel); }
//gen WHENCASE2():c { Whencase($c.value & 0xffff, $c.falselabel); }
//gen WHENCASE4():c { Whencase($c.value & 0xffffffff, $c.falselabel); }
//gen WHENCASE8():c { Whencase($c.value, $c.falselabel); }
//
//gen ENDCASE1() { varsp := varsp - 1; }
//gen ENDCASE2() { varsp := varsp - 1; }
//gen ENDCASE4() { varsp := varsp - 1; }
//gen ENDCASE8() { varsp := varsp - 1; }

// --- Casts ----------------------------------------------------------------

%{
	sub Cast(src: uint8, dest: uint8, sext: uint8)
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(dest);
		E(" v");
		E_u16(vid);
		E(" = ");
		if sext != 0 then
			E("(s");
			E_u8(dest);
			E(")(s");
			E_u8(src);
			E(")");
		end if;
		E("v");
		E_u16(lhsid);
		E(";\n");
	end sub;
%}

gen v2 := CAST12(v1):c { Cast(1, 2, $c.sext); }
gen v4 := CAST14(v1):c { Cast(1, 4, $c.sext); }
gen v8 := CAST18(v1):c { Cast(1, 8, $c.sext); }
gen v1 := CAST21(v2):c { Cast(2, 1, $c.sext); }
gen v4 := CAST24(v2):c { Cast(2, 4, $c.sext); }
gen v8 := CAST28(v2):c { Cast(2, 8, $c.sext); }
gen v1 := CAST41(v4):c { Cast(4, 1, $c.sext); }
gen v2 := CAST42(v4):c { Cast(4, 2, $c.sext); }
gen v8 := CAST48(v4):c { Cast(4, 8, $c.sext); }
gen v1 := CAST81(v8):c { Cast(8, 1, $c.sext); }
gen v2 := CAST82(v8):c { Cast(8, 2, $c.sext); }
gen v4 := CAST84(v8):c { Cast(8, 4, $c.sext); }

// --- Strings --------------------------------------------------------------

%{
	var current_string_id: uint16 := 0;

	sub E_string(text: string): (sid: uint16)
		sid := current_string_id;
		current_string_id := current_string_id + 1;

		EmitterPushChunk();
		E_h16(current_subr.id);

		E("const i1 ");
		EmitByte(COO_ESCAPE_THISCOO);
		EmitByte('s');
		E_h16(sid);
		E("[] = { ");

		var first: uint8 := 1;
		loop
			var c := [text];
			text := text + 1;
			if c == 0 then
				break;
			end if;
			if first == 0 then
				E_comma();
			end if;
			first := 0;
			E("0x");
			E_h8(c);
		end loop;

		if first == 0 then
			E_comma();
		end if;
		E("0 };\n");
		EmitterPopChunk('S');
	end sub;
%}

gen v8 := STRING():s
{
	var vid := Push();
	E("\ti8 v");
	E_u16(vid);
	E(" = (i8)(intptr_t)");
	EmitByte(COO_ESCAPE_THISCOO);
	EmitByte('s');
	E_h16(E_string($s.text));
	E(";\n");
}

// --- Array initialisers ------------------------------------------------

%{
	# This is *vile*. We need to emit differentiated bytes... but also,
	# occasionally, pointers. We don't have any type information. So,
	# we can't just emit a byte array because we might need to embed
	# 8-byte pointers into it, which C doesn't allow. Instead, all
	# static initialisers end up as arrays of i8, and we buffer up bytes
	# to emit them in chunks of eight.

	var initialiser_buffer: uint8[8];
	var initialiser_buffer_fill_bytes: uint8 := 0;

	sub FlushInitialiserBuffer()
		if initialiser_buffer_fill_bytes != 0 then
			E("\t{ .i1 = { ");
			var i: uint8 := 0;
			while i != initialiser_buffer_fill_bytes loop
				if i != 0 then
					E_comma();
				end if;
				E("0x");
				E_h8(initialiser_buffer[i]);
				i := i + 1;
			end loop;
			E("}},\n");
			initialiser_buffer_fill_bytes := 0;
		end if;
	end sub;

	sub E_bytes(ptr: [uint8], width: uint8)
		while width != 0 loop
			initialiser_buffer[initialiser_buffer_fill_bytes] := [ptr];
			ptr := ptr + 1;
			initialiser_buffer_fill_bytes := initialiser_buffer_fill_bytes + 1;

			if initialiser_buffer_fill_bytes == @sizeof initialiser_buffer then
				FlushInitialiserBuffer();
			end if;
			width := width - 1;
		end loop;
	end sub;
%}

gen STARTINIT():s
{
	EmitterPushChunk();
	E_h16(current_subr.id);

	E("static data ");
	E($s.sym.vardata.externname);
	E("[] = { // ");
	E($s.sym.name);
	E_nl();

	initialiser_buffer_fill_bytes := 0;
}
	
gen INIT1():c { E_bytes(&$c.value as [uint8], 1); }
gen INIT2():c { E_bytes(&$c.value as [uint8], 2); }
gen INIT4():c { E_bytes(&$c.value as [uint8], 4); }
gen INIT8():c { E_bytes(&$c.value as [uint8], 8); }

gen INITS():s
{
	if initialiser_buffer_fill_bytes != 0 then
		StartError();
		print("bad initialiser alignment: ");
		print_i8(initialiser_buffer_fill_bytes);
		EndError();
	end if;

	E("\t{ .ptr = (void*)");
	EmitByte(COO_ESCAPE_THISCOO);
	EmitByte('s');
	E_h16(E_string($s.text));
	E(" },\n");
}

gen ENDINIT()
{
	FlushInitialiserBuffer();
	E("};\n");
	EmitterPopChunk('S');
}

// --- Inline assembly ------------------------------------------------------

gen ASMSTART()
{
	E_tab();
}

gen ASMTEXT():t
{
	E($t.text);
	E_space();
}

gen ASMSYMBOL():s
{
	if $s.sym.kind == VAR then
		E("*(i");
		E_u8($s.sym.vardata.type.typedata.width as uint8);
		E("*)(intptr_t)(");
		E_symref($s.sym, 0);
		E(")");
	else
		E_subref($s.sym.subr);
	end if;
	E_space();
}

gen ASMVALUE():c
{
	EmitByte('(');
	E_i32($c.value);
	EmitByte(')');
}

gen ASMEND()
{
    E_nl();
}



