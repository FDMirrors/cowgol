#Loads 16-bit code generation on the Z80 is hard.
#
# This is because there are multiple interacting strategies that I need to
# use which all play off each other. In summary, these are:
#
#   - 16-bit adds or subs must have the result (and one of the LHS or RHS)
#     in HL.
#   - 8-bit indirected RHSs must use HL, IX or IY (preferably HL because #     it's much cheaper).
#   - any ALU op which isn't an add or a sub needs to be done a byte at a
#     time and pass through A.
#   - only A, HL, BC, DE, IX, IY can be read or written directly. Only A,
#     B, C, D, E, H, L can be read via indirection.
#   - offsets which aren't 0 have to use IX or IY as the index register.
#   - if all three parameters have offsets, we need to delay writing back
#     the result until we can free up an index register.
#   - if the destination is a DEREF, it needs to be written back to
#     memory immediately; otherwise, leave it in a register pair for
#     later.
#   - lots of things need HL or A for setup, but we frequently need these
#     for the LHS for the arithmetic operation, so we need to set up the
#     RHS first... except when we don't.
#
# ...and possibly more, which is a mess.
#
# We therefore need to know these facts:
#  1. Where are we going to be doing the work? (A, HL, any register.)
#     -> This also tells us whether we're working a byte at a time (via A).
#  2. Where are we leaving the result? (memory, a register pair.)
#
# So, essentially, what we end up needing to do is:
#
#  1. Decide where the work is happening. Decide where the result will be.
#  2. Set up any input pointers.
#  3. Is the work happening in A? Is the result in a DEREF? Do we
#     have a free index register? If so, set up the result pointer now.
#     Otherwise, allocate a spare 8-bit register to stash the low byte of
#     the result in.
#  4. Do the work, leaving the result either in memory (if the output
#     pointer was set up), or in a register pair. If the result needs to
#     go into a DEREF but we don't have a pointer set up, leave the low
#     byte of the result in a random 8-bit register (the high byte ends up
#     in A).
#     -> If any of the operands are a DEREF while we're doing this,
#        we need to mutate the pointer. The same pointer might be being
#        used for multiple operands, so make sure to only mutate it once
#        per byte.
#  5. Is the result going into a DEREF? Is the pointer not set up? If so,
#     set one up now, and write the result back.
#
# Yikes.
#
# I worked through some examples, and it gets painfully complicated, so
# I'm going to make the simplifying assumption that the destination is
# *always* a register pair. This will then be written back as a seperate
# stage. This makes slightly less efficient code, as if the result is a
# DEREF then we need two additional register copies... but it makes the
# logic much simpler and does allow us to cache the result (subject to
# pointer aliasing rules).
#
# Some examples:
#
#   a := b + c
#     work is: in HL (because 16-bit add)
#     result is: in HL (because 16-bit add)
#     pointers: none (values are loaded into register pairs)
#     load LHS: ld hl, (b)
#     load RHS: ld bc, (c)
#     do work:  add hl, bc
#     save result: nop, we're leaving it in HL
#
#   a := b & c
#     work is: in A (because it's an and)
#     result is: in any register pair
#     pointers: none (values are loaded into register pairs)
#     result is: in HL
#     load LHS: ld hl, (c)
#     load RHS: ld bc, (b)
#     do work:  ld a, l; and c; ld l, a
#               ld a, h; and b; ld h, a
#     save result: nop, we're leaving it in HL
#
#   a := b + c[0]
#     work is: in A (because some params are DEREF and this is ALU)
#     result is: in any register pair
#     pointers: RHS, so load it: ld hl, (c)
#     result is: in BC (because we're leaving it in a register)
#     load LHS: ld bc, (b)
#     load RHS: none (it's a DEREF)
#     do work:  ld a, c; add (hl); inc hl; ld c, a
#               ld a, b; adc (hl); ld b, a
#     save result: nop, we're leaving it in HL
#
#   a[0] := b[0] + c[0]
#     work is: in A (because some params are DEREF and this is ALU)
#     result is: any register pair
#     pointer: RHS, so load it: ld hl, (c)
#     pointer: LHS, so load it: ld bc, (b)
#     result is: in DE (result is DEREF so try to keep HL free)
#     do work: ld a, (bc); add (hl); ld a, e; inc bc; inc hl
#              ld a, (bc); adc (hl); ld a, d
#     save result: ld hl, (a)
#                  ld (hl), e; inc hl; ld (hl), d
#
#   a[1] := b[2] + c[3]
#     work is: in A (because some params are DEREF and this is ALU)
#     result is: any register pair
#     pointer: RHS, offsetted, so load it: ld ix, (c)
#     pointer: LHS, offsetted, so load it: ld iy, (b)
#     result is: in BC (result is DEREF so try to keep HL free)
#     do work: ld a, (iy+2); add (ix+3); ld c, a
#              ld a, (iy+3); adc (ix+4); ld b, a
#     save result: ld ix, (a)
#                  ld (ix+1), c
#                  ld (ix+2), b
#
#   a := b
#     work is: unnecessary
#     result is: any register pair
#     pointers: none
#     load RHS: ld hl, (b)
#     result is: HL
#     save result: nop, leave it in a register
#
#   a := b[0]
#     work is: in BC
#     result is: any register pair
#     pointer: LHS, so load it: ld hl, (b)
#     result is: in BC
#     do work: ld c, (hl); inc hl
#              ld b, (hl)
#     save result: nop, we're leaving it in BC
#
#   a[1] := b[2]
#     work is: in HL
#     result is: any register pair
#     pointer: LHS, offsetted, so load it:  ld ix, (b)
#     result is: in HL
#     do work: ld l, (ix+2)
#              ld h, (ix+3)
#     save result: ld iy, (a)
#                  ld (iy+1), l
#                  ld (iy+2), h

var rhsea: [EffectiveAddress];
var lhsea: [EffectiveAddress];
var destea: [EffectiveAddress];
var workreg: RegSet;
var rhsreg: RegSet;
var rhsptrreg: RegSet;
var lhsreg: RegSet;
var lhsptrreg: RegSet;
var destreg: RegSet;
var tempdestreg: RegSet;
var destdelayed: uint8;

sub reset_16bit_op()
    rhsea := 0 as [EffectiveAddress];
    lhsea := 0 as [EffectiveAddress];
    destea := 0 as [EffectiveAddress];
    rhsreg := 0;
    rhsptrreg := REG_16BIT;
    lhsreg := 0;
    lhsptrreg := REG_16BIT;
    workreg := 0;
    destreg := 0;
    tempdestreg := 0;
    destdelayed := 0;
end sub;

# Load the input pointers needed for the operation.
sub load_16bit_pointers(offset: uint8)
    lhsptrreg := setup_complex_pointer(lhsptrreg, lhsea);
    $if DEBUG
        print("* LHS ptr is ");
        print_regs(lhsptrreg);
        print_newline();
    $endif

    rhsptrreg := setup_complex_pointer(rhsptrreg, rhsea);
    $if DEBUG
        print("* RHS ptr is ");
        print_regs(rhsptrreg);
        print_newline();
    $endif
end sub;

# If the LHS or RHS are simple values, load them into register pairs.
sub load_16bit_input_parameters()
    var c: RegSet := rhsreg;
    rhsreg := 0;
    if rhsea != (0 as [EffectiveAddress]) then
        if (rhsea.flags != EA_DEREF) and (is_number_thing(rhsea.obj_id) == 0) then
            rhsreg := reg_find_or_load(c, rhsea);
        end if;
    end if;
    $if DEBUG
        print("* RHS value is ");
        print_regs(rhsreg);
        print_newline();
    $endif

    c := lhsreg;
    lhsreg := 0;
    if lhsea != (0 as [EffectiveAddress]) then
        if lhsea.flags != EA_DEREF then
            lhsreg := reg_find_or_load(c, lhsea);
        end if;
    end if;
    $if DEBUG
        print("* LHS value is ");
        print_regs(lhsreg);
        print_newline();
    $endif
end sub;

sub prepare_16bit_output_parameter()
    if (destreg == lhsreg) or (destreg == rhsreg) then
        $if DEBUG
            print("* dest reg reuses ");
            print_regs(destreg);
            print_newline();
        $endif
    else
        destreg := reg_alloc(destreg);
        $if DEBUG
            print("* dest (or temporary) reg is ");
            print_regs(destreg);
            print_newline();
        $endif
    end if;
    reg_value_is_changing(destea);
    reg_evict(destreg);
end sub;

sub evict_16bit_mutable_index_registers()
    # Evict the registers which we know we'll be mutating. We do this *now*,
    # after we've set them up, so that new registers don't get allocated on
    # top of things we're using.
    if (lhsptrreg & (REG_BC|REG_HL|REG_DE)) != 0 then
        reg_evict(lhsptrreg);
    end if;
    if (rhsptrreg & (REG_BC|REG_HL|REG_DE)) != 0 then
        reg_evict(rhsptrreg);
    end if;
end sub;

# Reads the LHS into the work register.
sub do_16bit_read(offset: uint8)
    $if DEBUG
        print("* read LHS ");
        print_ea(lhsea);
        print(" -> ");
        print_regs(workreg);
        print(" offset ");
        print_i8(offset);
        print_newline();
    $endif

    var reg: uint8 := halfof_reg(workreg, offset);
    if lhsreg != 0 then
        if lhsreg == workreg then
            return;
        end if;

        reg_copy(halfof_reg(lhsreg, offset), reg);
    elseif lhsptrreg != 0 then
        insn_init();
        insn.datareg := reg;
        insn.otherreg := lhsptrreg;
        if (lhsptrreg & REG_INDEX) != 0 then
            insn.offset := ((get_value_of_number(lhsea.numoff_id) as uint8) + offset) as int16;
        end if;
        insn.mode := MODE_IND;
        insn_load_object();
    elseif is_number_thing(lhsea.obj_id) != 0 then
        print("numbers should be loaded as pairs!");
        halt();
    else
        print("cannot load LHS");
        halt();
    end if;
end sub;

# Performs an ALU operation of the RHS against the work register (which must
# be A).
sub do_16bit_alu(offset: uint8, opcode: uint8)
    $if DEBUG
        print("* alu RHS ");
        print_ea(rhsea);
        print(" A offset ");
        print_i8(offset);
        print_newline();
    $endif

    if workreg != REG_A then
        print("can't ALU against not A");
        halt();
    end if;

    insn_init();
    insn.datareg := REG_A;
    if rhsreg != 0 then
        insn.otherreg := halfof_reg(rhsreg, offset);
        insn.mode := MODE_DIR;
    elseif rhsptrreg != 0 then
        insn.otherreg := rhsptrreg;
        if (rhsptrreg & REG_INDEX) != 0 then
            insn.offset := ((get_value_of_number(rhsea.numoff_id) as uint8) + offset) as int16;
        end if;
        insn.mode := MODE_IND;
    elseif is_number_thing(rhsea.obj_id) != 0 then
        var value: uint16 := get_value_of_number(rhsea.obj_id) as uint16;
        if offset == 1 then
            value := value >> 8;
        end if;
        insn.offset := value as int16;
        insn.mode := MODE_IMM;
    else
        print("cannot load LHS");
        halt();
    end if;
    insn_8bit_aluop(opcode);
end sub;

# Writes the work register into the destination register.
sub do_16bit_write(offset: uint8)
    $if DEBUG
        print("* write work reg ");
        print_regs(workreg);
        print(" to destination register ");
        print_regs(destreg);
        print(" offset ");
        print_i8(offset);
        print_newline();
    $endif

    if (destreg != 0) and (workreg != destreg) then
        reg_copy(halfof_reg(workreg, offset), halfof_reg(destreg, offset));
    end if;
end sub;

# Adjusts any pointers for the second byte.
sub adjust_16bit_pointers(opcode: uint8)
    sub inc(reg: RegSet)
        $if DEBUG
            print("* INCREMENT ");
            print_regs(reg);
            print_newline();
        $endif
        var regnum: uint8 := get_z80_regnum(reg);
        write_byte(opcode | regnum); # inc or dec
    end sub;

    if (lhsptrreg & (REG_BC|REG_DE|REG_HL)) != 0 then
        $if DEBUG
            print("* incrementing LHS ptr\n");
        $endif
        inc(lhsptrreg);
    end if;
    if (lhsptrreg != rhsptrreg) and ((rhsptrreg & (REG_BC|REG_DE|REG_HL)) != 0) then
        $if DEBUG
            print("* incrementing RHS ptr\n");
        $endif
        inc(rhsptrreg);
    end if;
end sub;

# Ensure that the destination is written back (to whereever).
sub write_back_16bit_destination()
    reg_free(lhsptrreg);
    reg_free(rhsptrreg);

    if destea.flags != EA_DEREF then
        $if DEBUG
            print("* leaving result in register\n");
        $endif
        reg_value_is_precious(destea);
    else
        $if DEBUG
            print("* writing back DEREF result\n");
        $endif

        var reg: RegSet := setup_complex_pointer(REG_HL|REG_IX|REG_IY, destea);

        sub write_back_byte(offset: uint8)
            insn_init();
            insn.datareg := halfof_reg(destreg, offset);;
            insn.otherreg := reg;
            if (reg & REG_INDEX) != 0 then
                insn.offset := ((get_value_of_number(destea.numoff_id) as uint8) + offset) as int16;
            end if;
            insn.mode := MODE_IND;
            insn_save_object();
        end sub;

        write_back_byte(0);
        if (reg & REG_INDEX) == 0 then
            reg_evict(reg);
            var regnum: uint8 := get_z80_regnum(reg);
            write_byte(0x03 | regnum); # inc rr
        end if;
        write_back_byte(1);
    end if;

    reg_cache_value(destreg, destea);
end sub;

# Boilerplate setup for mostly-2op operations, which reads the LHS into
# the destination register, ready for in-place mutation or writing back.
sub prepare_16bit_op_where_lhs_is_in_a_reg(iop: [BEIop])
    reset_16bit_op();
    lhsea := &iop.left;
    destea := &iop.dest;

    lhsptrreg := REG_HL|REG_IX|REG_IY; # because our workreg isn't A
    lhsreg := REG_DE|REG_HL;
    destreg := REG_DE|REG_HL;

    load_16bit_pointers(0);
    load_16bit_input_parameters();
    prepare_16bit_output_parameter();
    if lhsreg != 0 then
        $if DEBUG
            print("* reusing LHS as dest reg\n");
        $endif
        destreg := lhsreg;
    end if;
    workreg := destreg;
    reg_evict(workreg);

    do_16bit_read(0);
    do_16bit_write(0);
    adjust_16bit_pointers(0x03); # inc rr
    do_16bit_read(1);
    do_16bit_write(1);
end sub;

sub arch_gen_copy_word(iop: [BEIop])
    $if DEBUG
        print("* GENERATE copy word: ");
        print_ea(&iop.left);
        print(" -> ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    prepare_16bit_op_where_lhs_is_in_a_reg(iop);
    write_back_16bit_destination();
end sub;

sub arch_gen_regular_alu_word(iop: [BEIop], opcode1: uint8, opcode2: uint8)
    $if DEBUG
        print("* GENERATE alu word: opcode1=0x");
        print_hex_i8(opcode1);
        print(" opcode2=0x");
        print_hex_i8(opcode2);
        print(": ");
        print_ea(&iop.left);
        print(" + ");
        print_ea(&iop.right);
        print(" -> ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    reset_16bit_op();
    
    rhsea := &iop.right;
    destea := &iop.dest;
    lhsea := &iop.left;

    workreg := REG_A;
    destreg := REG_BC|REG_DE|REG_HL;
    lhsreg := REG_BC|REG_DE|REG_HL;
    rhsreg := REG_BC|REG_DE|REG_HL;
    $if DEBUG
        print("* workreg is: ");
        print_regs(workreg);
        print_newline();
        print("* destreg is: ");
        print_regs(destreg);
        print_newline();
    $endif

    load_16bit_pointers(0);
    load_16bit_input_parameters();
    prepare_16bit_output_parameter();
    evict_16bit_mutable_index_registers();

    do_16bit_read(0);
    do_16bit_alu(0, opcode1);
    do_16bit_write(0);

    adjust_16bit_pointers(0x03); # inc rr

    do_16bit_read(1);
    do_16bit_alu(1, opcode2);
    do_16bit_write(1);

    write_back_16bit_destination();
end sub;

sub arch_gen_add_word(iop: [BEIop])
    arch_gen_regular_alu_word(iop, 0xC6, 0xCE); # add, adc
end sub;

sub arch_gen_sub_word(iop: [BEIop])
    arch_gen_regular_alu_word(iop, 0xD6, 0xDE); # sub, sbc
end sub;

sub arch_gen_zext_word(iop: [BEIop])
    $if DEBUG
        print("* GENERATE: zext: ");
        print_ea(&iop.left);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    reset_16bit_op();
    lhsea := &iop.left;
    destea := &iop.dest;

    destreg := REG_BC|REG_DE|REG_HL;
    lhsptrreg := 0;
    rhsptrreg := 0;
    prepare_16bit_output_parameter();
    workreg := REG_A;

    load_complex_8bit_value_fixed(REG_A, lhsea);
    do_16bit_write(0);
    reg_free(REG_A);
    
    adjust_16bit_pointers(0x03); # inc rr

    reg_find_or_load_int_fixed(REG_A, 0);
    do_16bit_write(1);
    reg_free(REG_A);

    write_back_16bit_destination();
end sub;

sub arch_gen_sext_word(iop: [BEIop])
    $if DEBUG
        print("* GENERATE: sext: ");
        print_ea(&iop.left);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    reset_16bit_op();
    lhsea := &iop.left;
    destea := &iop.dest;

    destreg := REG_BC|REG_DE|REG_HL;
    lhsptrreg := 0;
    rhsptrreg := 0;
    prepare_16bit_output_parameter();
    workreg := REG_A;

    load_complex_8bit_value_fixed(REG_A, lhsea);
    do_16bit_write(0);
    
    adjust_16bit_pointers(0x03); # inc rr

    reg_evict(REG_A);
    write_byte(0x07); # rlca
    write_byte(0x9F); # sbc a, a
    do_16bit_write(1);
    reg_free(REG_A);

    write_back_16bit_destination();
end sub;

sub arch_gen_cmp_word(ciop: [BEConditionalIop], liop: [LabelIop])
    $if DEBUG
        print("* GENERATE: compare words 0x");
        print_hex_i8(ciop.iop_kind);
        print(": ");
        print_ea(&ciop.left);
        print(", ");
        print_ea(&ciop.right);
        print(" => label 0x");
        print_hex_i8(liop.label);
        print_newline();
    $endif

    var iopkind: uint8 := ciop.iop_kind;

    var invertflag: uint8;
    var destlabel: uint8;
    var fallthrough_label: uint8;
    if liop.label == ciop.iftrue_label then
        invertflag := 0x00;
        fallthrough_label := ciop.iftrue_label;
        destlabel := ciop.iffalse_label;
    else
        invertflag := 0x08;
        fallthrough_label := ciop.iffalse_label;
        destlabel := ciop.iftrue_label;
    end if;

    sub gen_comparison_branch(offset: uint8)
        if iopkind == IOP_BE_BEQ then
            do_16bit_alu(offset, 0xFE); # cp *
            write_cg_conditional_iop(0xC2 ^ invertflag, destlabel); # jp nz
        else
            if (iopkind & IOP_TYPE_COMPARISON_S) != 0 then
                # BLTS
                do_16bit_alu(offset, 0xD6); # sub *

                var skipxorlabel: uint8 := create_label();
                write_cg_conditional_iop(0xE2 ^ invertflag, skipxorlabel); # jp po
                write_word(0x80EE); # xor 0x80
                write_label_iop(skipxorlabel);

                write_cg_conditional_iop(0xF2 ^ invertflag, destlabel); # jp p
            else
                # BLTU
                do_16bit_alu(offset, 0xFE); # cp *
                write_cg_conditional_iop(0xD2 ^ invertflag, destlabel); # jp c
            end if;
        end if;
    end sub;

    reset_16bit_op();
    rhsea := &ciop.right;
    lhsea := &ciop.left;

    workreg := REG_A;
    lhsreg := REG_BC|REG_DE|REG_HL;
    rhsreg := REG_BC|REG_DE|REG_HL;

    load_16bit_pointers(1);
    load_16bit_input_parameters();
    reg_evict(ALL_REGS);

    do_16bit_read(1);
    gen_comparison_branch(1);

    adjust_16bit_pointers(0x0B); # dec rr

    do_16bit_read(0);
    gen_comparison_branch(0);

    if liop.label != fallthrough_label then
        write_cg_conditional_iop(0xC3, fallthrough_label); # jp
    end if;
end sub;

sub arch_gen_lsl_word(iop: [BEIop])
    $if DEBUG
        print("* GENERATE lsl word: ");
        print_ea(&iop.left);
        print(" + ");
        print_ea(&iop.right);
        print(" -> ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    load_complex_8bit_value_fixed(REG_B, &iop.right);
    prepare_16bit_op_where_lhs_is_in_a_reg(iop);
    reg_evict(destreg);
    
    # Now do the in-place shift.

    sub inplace_shift(offset: uint8, opcode: uint8)
        $if DEBUG
            print("* in-place shifting reg ");
            print_regs(destreg);
            print(" offset ");
            print_i8(offset);
            print_newline();
        $endif
        var regnum: uint8 := get_z80_regnum(halfof_reg(destreg, offset));
        write_byte(0xCB);
        write_byte(opcode | regnum);
    end sub;
    var label: uint8 := create_label();
    write_label_iop(label);
    inplace_shift(0, 0x20); # sla r
    inplace_shift(1, 0x10); # rl r
    write_cg_conditional_iop(0x10, label); # djnz label
    
    reg_free(REG_B);
    write_back_16bit_destination();
end sub;
