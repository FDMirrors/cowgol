const REG_A    := 0b0000_0001;
const REG_X    := 0b0000_0010;
const REG_Y    := 0b0000_0100;
const REG_MASK := 0b0111_1111;
const PRECIOUS := 0b1000_0000;

sub find_first_bit(value: uint8): (mask: uint8)
    mask := 1;
    loop
        if (value & mask) != 0 then
            return;
        end if;
        if mask == 0x80 then
            break;
        end if;
        mask := mask << 1;
    end loop;
    mask := 0;
end sub;

sub find_bit_index(value: uint8): (index: uint8)
    var mask: uint8 := 1;
    index := 0;
    loop
        if (value & mask) != 0 then
            return;
        end if;
        if mask == 0x80 then
            break;
        end if;
        mask := mask << 1;
        index := index + 1;
    end loop;
    print("bit not set");
    halt();
end sub;

sub bad_register()
    print("bad register");
    halt();
end sub;

sub op_imm(value: uint8, opcode: uint8)
	$if DEBUG
		print("@ op_imm 0x");
		print_hex_i8(opcode);
		print(" value=0x");
		print_hex_i8(value);
		print_newline();
	$endif

    var buf: uint8[2];
    buf[0] := opcode;
    buf[1] := value;
    write_bytes_iop(buf@size, &buf[0]);
end sub;

sub op_imm_adr(ea: [EffectiveAddress], beiop: uint8, opcode: uint8)
	$if DEBUG
		print("@ op_imm_adr 0x");
		print_hex_i8(opcode);
		print(" iop=0x");
		print_hex_i8(beiop);
		print(" value=");
		print_ea(ea);
		print_newline();
	$endif

    write_byte(opcode);
    write_address_iop(beiop, ea.obj_id, get_value_of_number(ea.numoff_id) as uint16);
end sub;

var ld_imm_opcodes: uint8[3];
ld_imm_opcodes[0] := 0xA9; # LDA imm
ld_imm_opcodes[1] := 0xA2; # LDX imm
ld_imm_opcodes[2] := 0xA0; # LDY imm
sub ld_imm(location: uint8, value: uint8)
    location := find_bit_index(location);
    op_imm(value, ld_imm_opcodes[location]);
end sub;

sub ld_imm_adr_lo(location: uint8, ea: [EffectiveAddress])
    location := find_bit_index(location);
    op_imm_adr(ea, IOP_ADDRESSLO, ld_imm_opcodes[location]);
end sub;

sub ld_imm_adr_hi(location: uint8, ea: [EffectiveAddress])
    location := find_bit_index(location);
    op_imm_adr(ea, IOP_ADDRESSHI, ld_imm_opcodes[location]);
end sub;

sub op_abs(ea: [EffectiveAddress], opcode: uint8)
	$if DEBUG
		print("@ op_abs 0x");
		print_hex_i8(opcode);
		print(" ea=");
		print_ea(ea);
		print_newline();
	$endif

    if ea.varoff_id != 0 then
        print("can't have varoff here");
        halt();
    end if;

    var obj: [DataThing] := find_thing(ea.obj_id) as [DataThing];
    var beiop: uint8;
    if ((opcode & 0x0F) == 0x01) then
        if obj.segment != SEGMENT_ZEROPAGE then
            print("indirect op with non zero-page object");
            halt();
        end if;
        beiop := IOP_ADDRESSLO;
    elseif (obj.segment == SEGMENT_ZEROPAGE) and ((opcode & 0x0C) == 0x0C) then
        opcode := opcode & 0xf7;
        beiop := IOP_ADDRESSLO;
    elseif obj.segment == SEGMENT_UNKNOWN then
        print("segment of object not known");
        halt();
    else
        beiop := IOP_ADDRESS;
    end if;

    write_byte(opcode);
    write_address_iop(beiop, ea.obj_id, get_value_of_number(ea.numoff_id) as uint16);
end sub;

var ld_abs_opcodes: uint8[3];
ld_abs_opcodes[0] := 0xAD; # LDA abs
ld_abs_opcodes[1] := 0xAE; # LDX abs
ld_abs_opcodes[2] := 0xAC; # LDY abs
var ld_abs_x_opcodes: uint8[3];
ld_abs_x_opcodes[0] := 0xBD; # LDA abs, X
ld_abs_x_opcodes[1] := 0x00; # invalid
ld_abs_x_opcodes[2] := 0xBC; # LDY abs, X
var ld_abs_y_opcodes: uint8[3];
ld_abs_y_opcodes[0] := 0xB9; # LDA abs, Y
ld_abs_y_opcodes[1] := 0xBE; # LDX abs, Y
ld_abs_y_opcodes[2] := 0x00; # invalid
sub ldst_abs(location: uint8, index: uint8, ea: [EffectiveAddress], opmask: uint8)
    var opcode: uint8 := 0;

    location := find_bit_index(location);
    if index == 0 then
        opcode := ld_abs_opcodes[location];
    elseif index == REG_X then
        opcode := ld_abs_x_opcodes[location];
    elseif index == REG_Y then
        opcode := ld_abs_y_opcodes[location];
    end if;

    if opcode == 0 then
        bad_register();
    end if;
    opcode := opcode & opmask;

    op_abs(ea, opcode);
end sub;

sub op_ind(ea: [EffectiveAddress], opcode: uint8)
	$if DEBUG
		print("@ op_ind 0x");
		print_hex_i8(opcode);
		print(" obj_id=");
		print_thing(ea.obj_id);
		print(" numoff=");
		print_thing(ea.numoff_id);
		print_newline();
	$endif

    if ea.varoff_id != 0 then
        print("can't have varoff here");
        halt();
    end if;
    if get_value_of_number(ea.numoff_id) != 0 then
        print("can't have numoff here");
        halt();
    end if;

    write_byte(opcode);
    write_address_iop(IOP_ADDRESSLO, ea.obj_id, 0);
end sub;

sub ld_abs(location: uint8, index: uint8, ea: [EffectiveAddress])
    ldst_abs(location, index, ea, 0b11111111);
end sub;

sub ld_ind(location: uint8, indexreg: uint8, ea: [EffectiveAddress])
    op_ind(ea, 0xB1); # LDA (ind), Y
end sub;

sub st_abs(location: uint8, index: uint8, ea: [EffectiveAddress])
    ldst_abs(location, index, ea, 0b11011111);
end sub;

sub st_ind(location: uint8, indexreg: uint8, ea: [EffectiveAddress])
    op_ind(ea, 0x91); # STA (ind), Y
end sub;

var t_opcodes: uint8[9];
t_opcodes[0 + 0*3] := 0x00; # TAA
t_opcodes[0 + 1*3] := 0xAA; # TAX
t_opcodes[0 + 2*3] := 0xA8; # TAY
t_opcodes[1 + 0*3] := 0x8A; # TXA
t_opcodes[1 + 1*3] := 0x00; # TXX
t_opcodes[1 + 2*3] := 0x00; # TXY
t_opcodes[2 + 0*3] := 0x98; # TYA
t_opcodes[2 + 1*3] := 0x00; # TYX
t_opcodes[2 + 2*3] := 0x00; # TYY
sub t_reg_reg(src: uint8, dest: uint8)
	$if DEBUG
		print("@ t?? src=0x");
		print_hex_i8(src);
		print(" dest=0x");
		print_hex_i8(dest);
		print_newline();
	$endif

    src := find_bit_index(src);
    dest := find_bit_index(dest);
    if (src|dest) == 0 then
        bad_register();
    end if;

    var opcode: uint8 := t_opcodes[src + dest*3];
    if opcode == 0 then
        print("bad move");
        halt();
    end if;
    write_byte(opcode);
end sub;

sub load_objval(location: uint8, ea: [EffectiveAddress])
    if is_number_thing(ea.obj_id) != 0 then
        ld_imm(location, get_value_of_number(ea.obj_id) as uint8);
    else
        ld_abs(location, 0, ea);
    end if;
end sub;

sub load_objval_with_offset(location: uint8, ea: [EffectiveAddress], offset: uint8)
    var old_numoff_id: uint16 := ea.numoff_id;
    ea.numoff_id := add_number_by_value(get_value_of_number(old_numoff_id) +
        (offset as int32));
    ld_abs(location, 0, ea);
    ea.numoff_id := old_numoff_id;
end sub;

sub load_value_with_offset(location: uint8, ea: [EffectiveAddress], offset: uint8)
    if ea.flags == EA_VALUE then
        load_objval_with_offset(location, ea, offset);
    else
        print("can't load ");
        print_ea(ea);
        print(" with offset 0x");
        print_hex_i8(offset);
        print(" yet");
        halt();
    end if;
end sub;

sub load_value_with_index(location: uint8, ea: [EffectiveAddress], index: uint8)
    if ea.flags == EA_VALUE then
        ld_abs(location, index, ea);
    elseif ea.flags == EA_DEREF then
        ld_ind(location, index, ea);
    else
        print("can't load ");
        print_ea(ea);
        print(" with index reg 0x");
        print_hex_i8(index);
        print(" and flags ");
        print_hex_i8(ea.flags);
        print(" yet");
        halt();
    end if;
end sub;

sub save_objval(location: uint8, ea: [EffectiveAddress])
    st_abs(location, 0, ea);
end sub;

sub save_objval_with_offset(location: uint8, ea: [EffectiveAddress], offset: uint8)
    var old_numoff_id: uint16 := ea.numoff_id;
    ea.numoff_id := add_number_by_value(get_value_of_number(old_numoff_id) +
        (offset as int32));
    st_abs(location, 0, ea);
    ea.numoff_id := old_numoff_id;
end sub;

sub save_value_with_offset(location: uint8, ea: [EffectiveAddress], offset: uint8)
    if ea.flags == EA_VALUE then
        save_objval_with_offset(location, ea, offset);
    else
        print("can't save ");
        print_ea(ea);
        print(" with offset 0x");
        print_hex_i8(offset);
        print(" yet");
        halt();
    end if;
end sub;

sub save_value_with_index(location: uint8, ea: [EffectiveAddress], index: uint8)
    if ea.flags == EA_VALUE then
        st_abs(location, index, ea);
    elseif ea.flags == EA_DEREF then
        st_ind(location, index, ea);
    else
        print("can't save ");
        print_ea(ea);
        print(" with index reg 0x");
        print_hex_i8(index);
        print(" yet");
        halt();
    end if;
end sub;

# opcode must be the abs form of a regular accumulator ALU operation in column 0x0D.
sub aluop_value_with_index(ea: [EffectiveAddress], index: uint8, opcode: uint8)
    if ea.flags == EA_DEREF then
        opcode := (opcode | 0x10) & 0xF3;
        if index != REG_Y then
            print("PTRVAL must have Y index");
            halt();
        end if;
    elseif ea.flags == EA_VALUE then
        if index == REG_X then
            opcode := opcode | 0x10;
        elseif index == REG_Y then
            opcode := (opcode | 0x10) & 0xFB;
        end if;
    else
        print("alup with unsupported EA");
        halt();
    end if;

    op_abs(ea, opcode);
end sub;
