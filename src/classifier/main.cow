sub check_sub_ancestry(child_sub_id: uint16, parent_sub_id: uint16): (yes: uint8)
    sub namespace_of(subroutine_id: uint16): (namespace: [NamespaceThing])
        var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
        namespace := find_thing(subroutine.namespace_id) as [NamespaceThing];
    end sub;

    var child: [NamespaceThing] := namespace_of(child_sub_id);
    var parent: [NamespaceThing] := namespace_of(parent_sub_id);

    yes := 0;
    while child != parent loop
        if child.previous_namespace == 0 then
            return;
        end if;
        child := find_thing(child.previous_namespace) as [NamespaceThing];
    end loop;

    yes := 1;
end sub;

sub process_subroutine(subroutine_id: uint16)
    var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
    subroutine.segment := SEGMENT_OMIT;

    sub do_call(iop: [CallIop])
        reference_count := reference_count + 1;
        add_reference(subroutine_id, iop.thing_id);
    end sub;

    sub do_var(var_id: uint16)
        if is_typed_thing(var_id) != 0 then
            var obj: [TypedThing] := find_thing(var_id) as [TypedThing];
            if obj.owner_id == 0 then
                obj.owner_id := subroutine_id;
            else
                if check_sub_ancestry(subroutine_id, obj.owner_id) == 0 then
                    obj.owner_id := subroutine_id;
                end if;
            end if;
        end if;
    end sub;

    sub do_ea(ea: [EffectiveAddress])
        do_var(ea.obj_id);
        do_var(ea.varoff_id);
        arch_classify_vars(ea);
    end sub;

    sub do_beiop(iop: [BEIop])
        do_ea(&iop.left);
        do_ea(&iop.right);
        do_ea(&iop.dest);
    end sub;

    sub do_beconditionaliop(iop: [BEConditionalIop])
        do_ea(&iop.left);
        do_ea(&iop.right);
    end sub;

    loop
        var iop: [Iop] := read_iop();
        var ioptype: uint8 := iop.iop_kind & IOP_TYPE_MASK;

        if iop.iop_kind == IOP_END then
            break;
        elseif iop.iop_kind == IOP_CALL then
            do_call(iop as [CallIop]);
        elseif (ioptype == IOP_TYPE_BACKEND_2OP)
            or (ioptype == IOP_TYPE_BACKEND_3OP)
        then
            do_beiop(iop as [BEIop]);
        elseif (iop.iop_kind == IOP_BE_BEQ)
            or (iop.iop_kind == IOP_BE_BLTS)
            or (iop.iop_kind == IOP_BE_BLTU)
            or (iop.iop_kind == IOP_BE_BGTS)
            or (iop.iop_kind == IOP_BE_BGTU)
        then
            do_beconditionaliop(iop as [BEConditionalIop]);
        end if;
    end loop;
end sub;

sub build_graph()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        process_subroutine(iheader.thing_id);
        subroutine_count := subroutine_count + 1;
    end loop;
end sub;

sub mark_main_subroutine()
    var main_id: uint16 := find_main_subroutine();
    var main: [SubroutineThing] := find_thing(main_id) as [SubroutineThing];
    main.segment := SEGMENT_CODE;
    used_subroutine_count := 1;
    add_reference(main_id, 0);
end sub;

sub find_reachable_subroutines()
    var changed: uint8;

    loop
        changed := 0;
        var i: uint16 := 0;
        while i < graph_count loop
            var g: [GraphRecord] := &graph_base[i];
            var src: [SubroutineThing] := find_thing(g.src_id) as [SubroutineThing];
            var dest: [SubroutineThing] := find_thing(g.dest_id) as [SubroutineThing];

            if src.segment == SEGMENT_CODE then
                if dest.segment == SEGMENT_OMIT then
                    changed := 1;
                    dest.segment := SEGMENT_CODE;
                    dest.address := used_subroutine_count;
                    used_subroutine_count := used_subroutine_count + 1;
                end if;
            end if;

            i := i + 1;
        end loop;

        if changed == 0 then
            break;
        end if;
    end loop;
end sub;

sub clean_graph()
    var i: uint16 := 0;
    while i < graph_count loop
        var g: [GraphRecord] := &graph_base[i];
        var src: [SubroutineThing] := find_thing(g.src_id) as [SubroutineThing];

        if src.segment == SEGMENT_OMIT then
            g.src_id := 0;
            g.dest_id := 0;
        end if;

        i := i + 1;
    end loop;
end sub;

sub print_graph()
    var i: uint16 := 0;
    while i < graph_count loop
        var g: [GraphRecord] := &graph_base[i];
        print_thing(g.src_id);
        print(" -> ");
        print_thing(g.dest_id);
        print_newline();

        i := i + 1;
    end loop;
end sub;

sub assign_space_for_variables(subroutine_id: uint16)
    var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
    var sr: [SubRecord] := &subdata[subroutine.address];

    sub allocate_space()
        sub do_var(thing: [TypedThing])
            if thing.owner_id == subroutine_id then
                arch_allocate_var(&sr.base, thing, get_width_of_type(thing.type_id));
            end if;
        end sub;

        var id: uint16 := 1;
        loop
            var thing: [Thing] := &thing_table[id] as [Thing];
            if thing.thing_size == 0 then
                break;
            end if;
            if (thing.thing_type & THING_TYPED) != 0 then
                do_var(thing as [TypedThing]);
            end if;
            id := id + thing.thing_size;
        end loop;
    end sub;

    sub propagate_offsets_to_callees()
        var i: uint16 := 0;
        while i < graph_count loop
            var g: [GraphRecord] := &graph_base[i];
            if g.src_id == subroutine_id then
                var dest: [SubroutineThing] := find_thing(g.dest_id) as [SubroutineThing];
                var dest_sr: [SubRecord] := &subdata[dest.address];
                arch_propagate_var_offsets(&sr.base, &dest_sr.base);
                g.src_id := 0;
                g.dest_id := 0;
            end if;
            i := i + 1;
        end loop;
    end sub;

    allocate_space();
    propagate_offsets_to_callees();
    arch_propagate_var_offsets(&sr.base, &root.archsizes);
    subroutine.address := 0; # reset field after internal classifier use
end sub;

sub find_orphaned_subroutine(): (subroutine_id: uint16)
    var i: uint16 := 0;
    while i < graph_count loop
        var g1: [GraphRecord] := &graph_base[i];
        if g1.src_id != 0 then
            var j: uint16 := 0;
            while j < graph_count loop
                var g2: [GraphRecord] := &graph_base[j];
                # Bail out if we find any subroutine called by the one under consideration.
                if g2.dest_id == g1.src_id then
                    break;
                end if;
                j := j + 1;
            end loop;
            if g2.dest_id != g1.src_id then
                subroutine_id := g1.src_id;
                return;
            end if;
        end if;
        i := i + 1;
    end loop;

    subroutine_id := 0;
end sub;

sub assign_space_for_all_variables()
    loop
        var subroutine_id: uint16 := find_orphaned_subroutine();
        if subroutine_id == 0 then
            break;
        end if;

        assign_space_for_variables(subroutine_id);
    end loop;
end sub;

sub show_subroutine_sizes()
    var id: uint16 := 1;

    sub do_sub(thing: [SubroutineThing])
        if thing.segment == SEGMENT_CODE then
            var sr: [SubRecord] := &subdata[thing.address];
            show_name_of(id);
            print(" ");
            print_i16(thing.address);
            print(": zp=");
            print_i16(sr.base.zp_size);
            print(" data=");
            print_i16(sr.base.data_size);
            print_newline();
        end if;
    end sub;

    loop
        var thing: [Thing] := &thing_table[id] as [Thing];
        if thing.thing_size == 0 then
            break;
        end if;
        if thing.thing_type == THING_SUBROUTINE then
            do_sub(thing as [SubroutineThing]);
        end if;
        id := id + thing.thing_size;
    end loop;
end sub;

init_graph(&thing_table[thing_table_top] as [int8]);
build_graph();
print("Total subroutines: ");
print_i16(subroutine_count);
print("\n(");
print_i16(graph_count);
print(" graph nodes from ");
print_i16(reference_count);
print(" references)\n");

mark_main_subroutine();
find_reachable_subroutines();

print("Reachable subroutines: ");
print_i16(used_subroutine_count);
print_newline();

clean_graph();
#print_graph();
init_subdata(&graph_base[graph_count] as [int8]);
assign_space_for_all_variables();
#show_subroutine_sizes();

arch_report_offsets(&root.archsizes);

save_thing_table("things.dat");
