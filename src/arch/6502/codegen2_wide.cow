sub check_widec_ea(ea: [EffectiveAddress])
    if (ea.flags == EA_VALUE) and (is_number_thing(ea.obj_id) != 0) then
        var thing: [NumberThing] := find_thing(ea.obj_id) as [NumberThing];
        thing.segment := SEGMENT_CONST;
    end if;

    if ea.varoff_id != 0 then
        print("wide EA with variable offset: ");
        print_ea(ea);
        halt();
    end if;
end sub;

sub check_wide_ea(ea: [EffectiveAddress])
    check_widec_ea(ea);
    if (ea.flags == EA_DEREF) and (get_value_of_number(ea.numoff_id) != 0) then
        print("wide pointer EA with numeric offset: ");
        print_ea(ea);
        halt();
    end if;
end sub;

sub addressing_mode(iop: [BEIop]): (mode: uint8)
    if iop.dest.flags == EA_DEREF then
        mode := 0b001;
    else
        mode := 0b000;
    end if;
    if iop.left.flags == EA_DEREF then
        mode := mode | 0b010;
    end if;
    if iop.right.flags == EA_DEREF then
        mode := mode | 0b100;
    end if;
end sub;

sub inc_numoff(numoff_id: uint16): (new_numoff_id: uint16)
        new_numoff_id := add_number_by_value(get_value_of_number(numoff_id) + 1);
end sub;

sub copy_value_to_param(ea: [EffectiveAddress], param: uint8)
    var param_ea: EffectiveAddress;
    zero_ea(&param_ea);
    param_ea.flags := EA_VALUE;
    param_ea.obj_id := find_bootstrap_symbol(TOKEN_PARAMS);
    param_ea.numoff_id := add_number_by_value(param as int32);

    var location: uint8 := allocate_reg(REG_A|REG_X|REG_Y);

    if ea.flags == EA_VALUE then
        ld_imm_adr_lo(location, ea);
        st_abs(location, 0, &param_ea);

        param_ea.numoff_id := inc_numoff(param_ea.numoff_id);
        ld_imm_adr_hi(location, ea);
        st_abs(location, 0, &param_ea);
    elseif ea.flags == EA_DEREF then
        ld_abs(location, 0, ea);
        st_abs(location, 0, &param_ea);

        param_ea.numoff_id := inc_numoff(param_ea.numoff_id);
        ea.numoff_id := inc_numoff(ea.numoff_id);
        ld_abs(location, 0, ea);
        st_abs(location, 0, &param_ea);
    end if;
    
    free_reg(location);
end sub;

sub do_2op_helper(iop: [BEIop])
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.dest);

    write_back_precious_values(REG_MASK);

    copy_value_to_param(&iop.dest, 0);
    copy_value_to_param(&iop.left, 2);

    flush_cached_values(REG_MASK);
end sub;

sub do_3op_helper(iop: [BEIop])
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.right);
    check_wide_ea(&iop.dest);

    write_back_precious_values(REG_MASK);

    copy_value_to_param(&iop.dest, 0);
    copy_value_to_param(&iop.left, 2);
    copy_value_to_param(&iop.right, 4);

    flush_cached_values(REG_MASK);
end sub;

sub regular_alu_wide_op(iop: [BEIop], opcode: uint8)
    $if DEBUG
        print("* GENERATE: wide aluop 0x");
        print_hex_i8(opcode);
        print(": ");
        print_ea(&iop.left);
        print(", ");
        print_ea(&iop.right);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    check_wide_ea(&iop.left);
    check_wide_ea(&iop.right);

    find_or_load_fixed_int(0, REG_Y);
    find_or_load_fixed_int(iop.width - 1, REG_X);
    allocate_fixed_reg(REG_A);

    var label: uint8 := create_label();
    write_label_iop(label);
    load_value_with_index(REG_A, &iop.left, REG_Y);
    aluop_value_with_index(&iop.right, REG_Y, opcode);
    save_value_with_index(REG_A, &iop.dest, REG_Y);
    write_byte(0xC8); # INY
    write_byte(0xCA); # DEX
    write_cg_6502_conditional_iop(0x10, label); # BPL rel

    flush_cached_values(REG_A|REG_X|REG_Y);
end sub;

sub arch_gen_add_wide(iop: [BEIop])
    write_byte(0x18); # CLC
    regular_alu_wide_op(iop, 0x6D); # ADC abs
end sub;

sub arch_gen_sub_wide(iop: [BEIop])
    write_byte(0x38); # SEC
    regular_alu_wide_op(iop, 0xED); # SBC abs
end sub;

sub arch_gen_copy_wide(iop: [BEIop])
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.right);

    find_or_load_fixed_int(iop.width - 1, REG_Y);
    allocate_fixed_reg(REG_A);

    var label: uint8 := create_label();
    write_label_iop(label);
    load_value_with_index(REG_A, &iop.left, REG_Y);
    save_value_with_index(REG_A, &iop.dest, REG_Y);
    write_byte(0x88); # DEY
    write_cg_6502_conditional_iop(0x10, label); # BPL rel

    flush_cached_values(REG_Y);
end sub;

sub arch_gen_sext(iop: [BEIop])
    $if DEBUG
        print("* GENERATE: sext: ");
        print_ea(&iop.left);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    flush_value(&iop.left);

    var srcwidth: uint8 := get_width_of_type(iop.left.type_id) as uint8;
    var destwidth: uint8 := iop.width;

    var datacandidates: uint8;
    var hicandidates: uint8;
    if (iop.left.flags == EA_DEREF) or (iop.dest.flags == EA_DEREF) then
        datacandidates := REG_A;
        hicandidates := REG_X;
    else
        datacandidates := REG_A|REG_X|REG_Y;
        hicandidates := REG_X|REG_Y;
    end if;

    var hireg: uint8 := find_or_load_int(0, hicandidates);
    var datareg: uint8 := allocate_reg(datacandidates);
    var indexreg: uint8;

    find_or_load_fixed_int(0, REG_X);

    # Copy the low bytes, intact.

    var offset: uint8 := 0;
    loop
        indexreg := setup_insn(&iop.left, offset, datareg);
        insn_load_object();
        free_reg(indexreg);

        indexreg := setup_insn(&iop.dest, offset, datareg);
        insn_save_object();
        free_reg(indexreg);

        offset := offset + 1;
        if offset == srcwidth then
            break;
        end if;
    end loop;

    # Compute the high byte.

    write_byte(0x10); # BPL rel
    write_byte(0x01); # one byte forwards
    if hireg == REG_X then
        write_byte(0xCA); # DEX
    else
        write_byte(0x88); # DEY
    end if;

    if iop.dest.flags == EA_DEREF then
        t_reg_reg(hireg, datareg);
        hireg := datareg;
    end if;

    # Now fill the high bytes.

    loop
        indexreg := setup_insn(&iop.dest, offset, hireg);
        insn_save_object();
        free_reg(indexreg);

        offset := offset + 1;
        if offset == destwidth then
            break;
        end if;
    end loop;
end sub;

sub arch_gen_zext(iop: [BEIop])
    $if DEBUG
        print("* GENERATE: zext: ");
        print_ea(&iop.left);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    flush_value(&iop.left);

    var srcwidth: uint8 := get_width_of_type(iop.left.type_id) as uint8;
    var destwidth: uint8 := iop.width;

    var datacandidates: uint8;
    if (iop.left.flags == EA_DEREF) or (iop.dest.flags == EA_DEREF) then
        datacandidates := REG_A;
    else
        datacandidates := REG_A|REG_X|REG_Y;
    end if;

    # Copy the low bytes, intact.

    var datareg: uint8 := allocate_reg(datacandidates);
    var offset: uint8 := 0;
    var indexreg: uint8;
    loop
        indexreg := setup_insn(&iop.left, offset, datareg);
        insn_load_object();
        free_reg(indexreg);

        indexreg := setup_insn(&iop.dest, offset, datareg);
        insn_save_object();
        free_reg(indexreg);

        offset := offset + 1;
        if offset == srcwidth then
            break;
        end if;
    end loop;
    free_reg(datareg);

    # Now fill the high bytes.

    datareg := find_or_load_int(0, datacandidates);
    loop
        indexreg := setup_insn(&iop.dest, offset, datareg);
        insn_save_object();
        free_reg(indexreg);

        offset := offset + 1;
        if offset == destwidth then
            break;
        end if;
    end loop;
    free_reg(datareg);
end sub;

sub arch_gen_lsl_wide(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_int(iop.width, REG_X);
    find_or_load_fixed_value(&iop.right, REG_A);

    var helper: uint16;
    if iop.width == 2 then
        helper := TOKEN_LSL16;
    else
        helper := TOKEN_LSL32;
    end if;
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(helper), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_lsr_wide(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_value(&iop.right, REG_A);

    var helper: uint16;
    if iop.width == 2 then
        helper := TOKEN_LSR16;
    else
        helper := TOKEN_LSR32;
    end if;
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(helper), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_asr_wide(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_value(&iop.right, REG_A);

    var helper: uint16;
    if iop.width == 2 then
        helper := TOKEN_ASR16;
    else
        helper := TOKEN_ASR32;
    end if;
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(helper), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_simple_wide(iop: [BEIop], token: uint16)
    do_3op_helper(iop);

    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(token), 0);

    flush_cached_values(REG_MASK);
end sub;
