%{
    var uint32_type: [Symbol];
    var int32_type: [Symbol];
    var uint16_type: [Symbol];
    var int16_type: [Symbol];
    var uint8_type: [Symbol];
    var int8_type: [Symbol];
    var intptr_type: [Symbol];

    record ArchSubroutine is
        end_label: LabelRef;
    end record;

    record Extern is
        name: string;
        id: uint16;
        next: [Extern];
    end record;

    var externs: [Extern] := (0 as [Extern]);

    sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
        newvalue := value;
    end sub;

    sub ArchInitTypes() is
        uint32_type := MakeNumberType(4, 1, 0, "uint32");
        int32_type := MakeNumberType(4, 1, 1, "int32");
        uint16_type := MakeNumberType(2, 1, 0, "uint16");
        int16_type := MakeNumberType(2, 1, 1, "int16");
        uint8_type := MakeNumberType(1, 1, 0, "uint8");
        int8_type := MakeNumberType(1, 1, 1, "int8");

        intptr_type := uint16_type;
        AddAliasString("intptr", intptr_type);
    end sub;

    sub ArchGuessIntType(min: Arith, max: Arith): (symbol: [Symbol]) is
        if (min >= 0) and (max <= 255) then
            symbol := uint8_type;
        elseif (min >= -128) and (max <= 127) then
            symbol := int8_type;
        elseif (min >= 0) and (max <= 65535) then
            symbol := uint16_type;
        elseif (min >= -32768) and (max <= 32767) then
            symbol := int16_type;
        elseif (min >= 0) then
            symbol := uint32_type;
        else
            symbol := int32_type;
        end if;
    end sub;

    sub ArchInitVariable(symbol: [Symbol]) is
        var subr := symbol.vardata.subr;
        var offset := subr.workspace[0];
        symbol.vardata.offset := offset;
        subr.workspace[0] := offset + symbol.vardata.type.typedata.width;
    end sub;

    sub ArchInitMember(containing: [Symbol], member: [Symbol], position: Size) is
        member.vardata.offset := position;
        position := position + member.vardata.type.typedata.width;
        if position > containing.typedata.width then
            containing.typedata.width := position;
        end if;
    end sub;

	sub ArchEndInstruction() is
	end sub;

	sub ArchEndGroup() is
	end sub;

	sub ArchEmitMove(src: RegId, dest: RegId) is
		SimpleError("can't move");
	end sub;

    sub GetHelper(name: string): (e: [Extern]) is
        e := externs;
        while e != (0 as [Extern]) loop
            if StrCmp(e.name, name) == 0 then
                break;
            end if;
            e := e.next;
        end loop;

        if e == (0 as [Extern]) then
            e := Alloc(@bytesof Extern) as [Extern];
            e.name := name;
            e.id := AllocSubrId();
            e.next := externs;
            externs := e;

            EmitterDeclareExternalSubroutine(e.id, name);
        end if;

		EmitterPushChunk();
		E_b16(current_subr.id);
		E_b16(e.id);
		EmitterPopChunk('R');
    end sub;

	sub E_db is E("\t.byte "); end sub;
	sub E_dw is E("\t.word "); end sub;
	sub E_dl is E("\t.dword "); end sub;

    sub E_label(label: LabelRef) is
        E_labelref(label);
        E(":\n");
    end sub;

    sub E_new_label(): (lid: uint16) is
        lid := AllocLabel();
        E_label(lid);
    end sub;

    sub E_symref(sym: [Symbol], off: Size) is
        if sym.vardata.externname != (0 as string) then
            E(sym.vardata.externname);
            E_i16(off as int16);
        else
            E_wsref(sym.vardata.subr.id, 0, sym.vardata.offset + off);
        end if;
    end sub;

    sub E_symrefi(sym: [Symbol], off: Size) is
		E_dw();
		E_symref(sym, off);
		E_nl();
    end sub;

	sub E_subrefi(subr: [Subroutine]) is
		E_dw();
		E_subref(subr);
		E_nl();
	end sub;

	sub E_callid(id: uint16) is
		E_dw();
		E_b8(COO_ESCAPE_SUBREF);
		E_b16(id);
		E_nl();
	end sub;

    # Does not persist the name; only call this with constant strings.
    sub E_callhelper(name: string) is
        var e := GetHelper(name);
		E_callid(e.id);
    end sub;

    # Does not persist the name; only call this with constant strings.
    sub E_jsrhelper(name: string) is
        var e := GetHelper(name);
		E("\tjsr ");
		E_b8(COO_ESCAPE_SUBREF);
		E_b16(e.id);
		E_nl();
    end sub;

    # Does not persist the name; only call this with constant strings.
    sub E_jmphelper(name: string) is
        var e := GetHelper(name);
		E("\tjmp ");
		E_b8(COO_ESCAPE_SUBREF);
		E_b16(e.id);
		E_nl();
    end sub;

	sub E_push1(value: uint8) is
		E_callhelper("push1");
		E_db();
		E_u8(value);
		E_nl();
	end sub;

	sub E_push2(value: uint16) is
		E_callhelper("push2");
		E_dw();
		E_u16(value);
		E_nl();
	end sub;

	sub E_push4(value: uint32) is
		E_callhelper("push4");
		E_dl();
		E_u32(value);
		E_nl();
	end sub;

	sub E_store1(sym: [Symbol], off: Size) is
		E_callhelper("store1i");
		E_symrefi(sym, off);
	end sub;

	sub E_store2(sym: [Symbol], off: Size) is
		E_callhelper("store2i");
		E_symrefi(sym, off);
	end sub;

	sub E_store4(sym: [Symbol], off: Size) is
		E_callhelper("store4i");
		E_symrefi(sym, off);
	end sub;

	sub E_load1(sym: [Symbol], off: Size) is
		E_callhelper("load1i");
		E_symrefi(sym, off);
	end sub;

	sub E_load2(sym: [Symbol], off: Size) is
		E_callhelper("load2i");
		E_symrefi(sym, off);
	end sub;

	sub E_load4(sym: [Symbol], off: Size) is
		E_callhelper("load4i");
		E_symrefi(sym, off);
	end sub;
%}

wordsize uint8;

register s1;
register s2;
register s4;
register param;

regdata s1    stacked;
regdata s2   stacked;
regdata s4   stacked;
regdata param stacked;

// --- Core stuff -----------------------------------------------------------

gen STARTFILE();
gen ENDFILE();

gen LABEL():b
{
    E_label($b.label);
}

gen JUMP():j
{
	E_callhelper("jump");
	E_dw();
	E_labelref($j.label);
	E_nl();
}

// --- Subroutines ----------------------------------------------------------

gen STARTSUB()
{
    current_subr.arch := Alloc(@bytesof ArchSubroutine) as [ArchSubroutine];
    current_subr.arch.end_label := AllocLabel();

    EmitterPushChunk();
    E_b16(current_subr.id);

    E("\n\n\t; ");
    E(current_subr.name);
    E_nl();

    E_b8(COO_ESCAPE_THISSUB);
    E(":\n");
	E_jmphelper("enter");

    var count := current_subr.num_input_parameters;
    while count != 0 loop
        count := count - 1;
        var param := GetInputParameter(current_subr, count);

        case param.vardata.type.typedata.width is
            when 1: E_store1(param, 0);
			when 2: E_store2(param, 0);
			when 4: E_store4(param, 0);
        end case;
    end loop;
}

gen ENDSUB()
{
	E_label(current_subr.arch.end_label);

    var i: uint8 := 0;
    var count := current_subr.num_output_parameters;
    while i != count loop
        var param := GetOutputParameter(current_subr, i);

        var cache: RegId;
        case param.vardata.type.typedata.width is
            when 1: E_load1(param, 0);
            when 2: E_load2(param, 0);
            when 4: E_load4(param, 0);
		end case;

        i := i + 1;
    end loop;

	E_callhelper("exit");

    EmitterPopChunk('S');

    i := 0;
    while i != 4 loop
        EmitterDeclareWorkspace(current_subr, i, current_subr.workspace[i]);
        i := i + 1;
    end loop;
}

gen RETURN()
{
	E_callhelper("jump");
	E_dw();
	E_labelref(current_subr.arch.end_label);
	E_nl();
}

// --- Subroutine calls -----------------------------------------------------

%{
	sub Call(subr: [Subroutine]) is
		E_dw();
		E_subref(subr);
		E_nl();
	end sub;
%}

gen CALL(param):s { Call($s.subr); }
gen s1 := CALLE1(param):s { Call($s.subr); }
gen s2 := CALLE2(param):s { Call($s.subr); }
gen s4 := CALLE4(param):s { Call($s.subr); }

gen param := END();

gen param := ARG1(param, s1);
gen param := ARG2(param, s2);
gen param := ARG4(param, s4);

gen s1 := POPARG1();
gen s2 := POPARG2();
gen s4 := POPARG4();

// --- Constants and things -------------------------------------------------

gen s1 := CONSTANT():c  { E_push1($c.value as uint8); }
gen s2 := CONSTANT():c { E_push2($c.value as uint16); }
gen s4 := CONSTANT():c { E_push4($c.value as uint32); }

gen s2 := ADDRESS():a
{
	E_callhelper("push2");
	E_symrefi($a.sym, $a.off);
}

// --- Loads and stores -----------------------------------------------------

gen STORE1(s1, ADDRESS():a)  { E_store1($a.sym, $a.off); }
gen STORE2(s2, ADDRESS():a) { E_store2($a.sym, $a.off); }
gen STORE4(s4, ADDRESS():a) { E_store4($a.sym, $a.off); }

gen s1 := LOAD1(ADDRESS():a)  { E_load1($a.sym, $a.off); }
gen s2 := LOAD2(ADDRESS():a) { E_load2($a.sym, $a.off); }
gen s4 := LOAD4(ADDRESS():a) { E_load4($a.sym, $a.off); }

gen STORE1(s1, s2) { E_callhelper("store1"); }
gen STORE2(s2, s2) { E_callhelper("store2"); }
gen STORE4(s4, s2) { E_callhelper("store4"); }

gen s1 := LOAD1(s2) { E_callhelper("load1"); }
gen s2 := LOAD2(s2) { E_callhelper("load2"); }
gen s4 := LOAD4(s2) { E_callhelper("load4"); }

// --- Maths ----------------------------------------------------------------

gen s1 := ADD1(s1, s1) { E_callhelper("add1"); }
gen s2 := ADD2(s2, s2) { E_callhelper("add2"); }
gen s4 := ADD4(s4, s4) { E_callhelper("add4"); }

gen s1 := SUB1(s1, s1) { E_callhelper("sub1"); }
gen s2 := SUB2(s2, s2) { E_callhelper("sub2"); }
gen s4 := SUB4(s4, s4) { E_callhelper("sub4"); }

gen s1 := MUL1(s1, s1) { E_callhelper("mul1"); }
gen s2 := MUL2(s2, s2) { E_callhelper("mul2"); }
gen s4 := MUL4(s4, s4) { E_callhelper("mul4"); }

gen s1 := DIVU1(s1, s1) { E_callhelper("divu1"); }
gen s2 := DIVU2(s2, s2) { E_callhelper("divu2"); }
gen s4 := DIVU4(s4, s4) { E_callhelper("divu4"); }

gen s1 := DIVS1(s1, s1) { E_callhelper("divs1"); }
gen s2 := DIVS2(s2, s2) { E_callhelper("divs2"); }
gen s4 := DIVS4(s4, s4) { E_callhelper("divs4"); }

gen s1 := REMU1(s1, s1) { E_callhelper("remu1"); }
gen s2 := REMU2(s2, s2) { E_callhelper("remu2"); }
gen s4 := REMU4(s4, s4) { E_callhelper("remu4"); }

gen s1 := REMS1(s1, s1) { E_callhelper("rems1"); }
gen s2 := REMS2(s2, s2) { E_callhelper("rems2"); }
gen s4 := REMS4(s4, s4) { E_callhelper("rems4"); }

gen s1 := NEG1(s1) { E_callhelper("neg1"); }
gen s2 := NEG2(s2) { E_callhelper("neg2"); }
gen s4 := NEG4(s4) { E_callhelper("neg4"); }

gen s1 := NOT1(s1) { E_callhelper("not1"); }
gen s2 := NOT2(s2) { E_callhelper("not2"); }
gen s4 := NOT4(s4) { E_callhelper("not4"); }

gen s1 := LSHIFT1(s1, s1) { E_callhelper("lshift1"); }
gen s2 := LSHIFT2(s2, s1) { E_callhelper("lshift2"); }
gen s4 := LSHIFT4(s4, s1) { E_callhelper("lshift4"); }

gen s1 := RSHIFTU1(s1, s1) { E_callhelper("rshiftu1"); }
gen s2 := RSHIFTU2(s2, s1) { E_callhelper("rshiftu2"); }
gen s4 := RSHIFTU4(s4, s1) { E_callhelper("rshiftu4"); }

gen s1 := RSHIFTS1(s1, s1) { E_callhelper("rshifts1"); }
gen s2 := RSHIFTS2(s2, s1) { E_callhelper("rshifts2"); }
gen s4 := RSHIFTS4(s4, s1) { E_callhelper("rshifts4"); }

gen s1 := AND1(s1, s1) { E_callhelper("and1"); }
gen s2 := AND2(s2, s2) { E_callhelper("and2"); }
gen s4 := AND4(s4, s4) { E_callhelper("and4"); }

gen s1 := OR1(s1, s1) { E_callhelper("or1"); }
gen s2 := OR2(s2, s2) { E_callhelper("or2"); }
gen s4 := OR4(s4, s4) { E_callhelper("or4"); }

gen s1 := EOR1(s1, s1) { E_callhelper("eor1"); }
gen s2 := EOR2(s2, s2) { E_callhelper("eor2"); }
gen s4 := EOR4(s4, s4) { E_callhelper("eor4"); }

// --- Branches -------------------------------------------------------------

%{
	sub Branch(node: [Node], truehelper: string, falsehelper: string) is
        if node.beq0.truelabel != node.beq0.fallthrough then
			E_callhelper(truehelper);
			E_dw();
			E_labelref(node.beq0.truelabel);
			E_nl();
        end if;
        if node.beq0.falselabel != node.beq0.fallthrough then
			E_callhelper(falsehelper);
			E_dw();
			E_labelref(node.beq0.falselabel);
			E_nl();
        end if;
    end sub;
%}

gen BEQ0(CONSTANT():lhs, CONSTANT():rhs):b
{
    var label := $b.falselabel;
    if $lhs.value == $rhs.value then
        label := $b.truelabel;
    end if;
    if label != $b.fallthrough then
		E_callhelper("jump");
		E_dw();
		E_labelref(label);
		E_nl();
    end if;
}

gen BEQ1(s1, s1) { Branch(self.n[0], "beq1", "bne1"); }
gen BEQ2(s2, s2) { Branch(self.n[0], "beq2", "bne2"); }
gen BEQ4(s4, s4) { Branch(self.n[0], "beq4", "bne4"); }

gen BLTU1(s1, s1) { Branch(self.n[0], "bltu1", "bgeu1"); }
gen BLTU2(s2, s2) { Branch(self.n[0], "bltu2", "bgeu2"); }
gen BLTU4(s4, s4) { Branch(self.n[0], "bltu4", "bgeu4"); }

gen BLTS1(s1, s1) { Branch(self.n[0], "blts1", "bges1"); }
gen BLTS2(s2, s2) { Branch(self.n[0], "blts2", "bges2"); }
gen BLTS4(s4, s4) { Branch(self.n[0], "blts4", "bges4"); }

// --- Casts ----------------------------------------------------------------

%{
	sub MaybeSignedCast(sext: uint8, signed: string, unsigned: string) is
		if sext != 0 then
			E_callhelper(signed);
		else
			E_callhelper(unsigned);
		end if;
	end sub;
%}

gen s2 := CAST12(s1):c { MaybeSignedCast($c.sext, "cast12s", "cast12u"); }
gen s4 := CAST14(s1):c { MaybeSignedCast($c.sext, "cast14s", "cast14u"); }
gen s4 := CAST24(s2):c { MaybeSignedCast($c.sext, "cast24s", "cast24u"); }

gen s1 := CAST21(s2) { E_callhelper("cast21"); }
gen s1 := CAST41(s4) { E_callhelper("cast41"); }
gen s2 := CAST42(s4) { E_callhelper("cast42"); }

// --- Case -----------------------------------------------------------------

%{
	sub Whencase(node: [Node], helper: string, type: string) is
		E_callhelper(helper);

		E_dw();
		E_labelref(node.whencase0.falselabel);
		E_nl();

		E_tab();
		E(type);
		E_space();
	end sub;
%}

gen STARTCASE1(s1) { E_callhelper("store1i"); E_dw(); E("x+2\n"); }
gen STARTCASE2(s2) { E_callhelper("store2i"); E_dw(); E("x+2\n"); }
gen STARTCASE4(s4) { E_callhelper("store4i"); E_dw(); E("x+2\n"); }

gen WHENCASE1():c { Whencase(self.n[0], "whencase1", ".byte"); E_u8($c.value as uint8); E_nl(); }
gen WHENCASE2():c { Whencase(self.n[0], "whencase2", ".word"); E_u16($c.value as uint16); E_nl(); }
gen WHENCASE4():c { Whencase(self.n[0], "whencase4", ".dword"); E_u32($c.value as uint32); E_nl(); }

gen ENDCASE1();
gen ENDCASE2();
gen ENDCASE4();

// --- Strings --------------------------------------------------------------

%{
    sub E_string(data: string): (lid: uint16) is
        lid := AllocLabel();

        EmitterPushChunk();
        E_b16(current_subr.id);

        E_label(lid);
        E_db();

        loop
            var c := [data];
            if c == 0 then
                break;
            end if;
            data := data + 1;
            
            E_u8(c);
            E_comma();
        end loop;
        E("0\n");
        EmitterPopChunk('S');
    end sub;
%}

gen s2 := STRING():s
{
    var sid := E_string($s.text);

	E_callhelper("push2");

	E_dw();
	E_labelref(sid);
	E_nl();
}

// --- Initialisers ---------------------------------------------------------

gen STARTINIT():s
{
    EmitterPushChunk();
    E_b16(current_subr.id);
    E($s.sym.vardata.externname);
    E(":\n");
}

gen ENDINIT()
{
    EmitterPopChunk('S');
}

gen INIT1():c
{
    E_db();
    E_u8($c.value as uint8);
    E_nl();
}

gen INIT2():c
{
    E_dw();
    E_u16($c.value as uint16);
    E_nl();
}

gen INIT4():c
{
    E_dl();
    E_u32($c.value as uint32);
    E_nl();
}

gen INITS():s
{
    var sid := E_string($s.text);

    E_dw();
    E_labelref(sid);
    E_nl();
}

// --- Inline assembly ------------------------------------------------------

gen ASMGROUPSTART() { E_callhelper("asmstart"); }
gen ASMGROUPEND()   { E_jsrhelper("asmend"); }

gen ASMSTART()
{
    E_tab();
}

gen ASMTEXT():t
{
    E($t.text);
    E_space();
}

gen ASMSYMBOL():s
{
    if $s.sym.kind == VAR then
        E_symref($s.sym, 0);
    else
        E_subref($s.sym.subr);
    end if;
    E_space();
}

gen ASMVALUE():c
{
    E_openp();
    E_i32($c.value);
    E_closep();
}

gen ASMEND()
{
    E_nl();
}


