var iop_in_fcb: FCB;
var iop_buffer: uint8[256];
var current_filename_id: uint16;
var current_linenumber: uint16;

sub where_am_i()
    show_identifier(current_filename_id);
    print_char(':');
    print_i16(current_linenumber);
    print_newline();
end sub;

sub halt()
    print(" at ");
    where_am_i();
    exit(1);
end sub;

sub init_iop_reader(filename: [int8])
    if fcb_openin(&iop_in_fcb, filename) != 0 then
        print("cannot open iop input");
        halt();
    end if;
    current_filename_id := 0;
    current_linenumber := 0;
end sub;

sub deinit_iop_reader()
    fcb_close(&iop_in_fcb);
end sub;

sub read_iop_header(): (header: [IHeader])
    iop_in_fcb.address := &iop_buffer[0] as [int8];
    iop_in_fcb.count := IHeader@bytes;
    fcb_read(&iop_in_fcb);
    if iop_in_fcb.count != 0 then
        print("unexpected EOF");
        halt();
    end if;
    header := &iop_buffer[0] as [IHeader];

    print_i32(fcb_tell(&iop_in_fcb));
    print_char('/');
    print_i32(fcb_ext(&iop_in_fcb));
    print_char('\r');
end sub;

sub read_iop(): (iop: [Iop])
    loop
        var size: uint8 := fcb_getchar(&iop_in_fcb) as uint8;
        iop_buffer[0] := size;
        iop_in_fcb.address := &iop_buffer[1] as [int8];
        iop_in_fcb.count := (size - 1) as uint16;
        fcb_read(&iop_in_fcb);
        iop := &iop_buffer[0] as [Iop];

        if iop.iop_kind == IOP_LINENUMBER then
            var linenumber_iop: [LinenumberIop] := iop as [LinenumberIop];
            current_linenumber := linenumber_iop.line_number;
        elseif iop.iop_kind == IOP_FILENAME then
            var filename_iop: [FilenameIop] := iop as [FilenameIop];
            current_filename_id := filename_iop.thing_id;
        else
            break;
        end if;
    end loop;
end sub;
