record Insn
    datareg: uint8;
    obj_id: uint16;
    offset: uint16;
    indexreg: uint8;
    mode: uint8;
end record;

const MODE_DIR := 1;
const MODE_IND := 2;
const MODE_IMMLO := 3;
const MODE_IMMHI := 4;

var insn: Insn;

sub insn_init()
    zero_memory(&insn as [int8], Insn@bytes);
end sub;

sub insn_init_from_ea(ea: [EffectiveAddress])
    insn_init();
    insn.obj_id := ea.obj_id;
    insn.offset := get_value_of_number(ea.numoff_id) as uint16;
    if ea.flags == EA_VALUE then
        if is_number_thing(insn.obj_id) != 0 then
            if insn.offset == 0 then
                insn.mode := MODE_IMMLO;
            elseif insn.offset == 1 then
                insn.mode := MODE_IMMHI;
            else
                print("bad offset to immediate value");
                halt();
            end if;

            insn.offset := get_value_of_number(insn.obj_id) as uint16;
            insn.obj_id := 0;
        else
            insn.mode := MODE_DIR;
        end if;
    elseif ea.flags == EA_DEREF then
        insn.mode := MODE_IND;
    else
        insn.mode := MODE_IMMLO;
    end if;
end sub;

sub print_insn()
    print(" datareg=");
    print_i8(insn.datareg);
    print(" thing=");
    print_thing(insn.obj_id);
    print(" offset=0x");
    print_hex_i16(insn.offset);
    print(" indexreg=");
    print_i8(insn.indexreg);
    print(" mode=");
    print_i8(insn.mode);
    print_newline();
end sub;

sub insn_check_imm()
    if ((insn.mode != MODE_IMMLO) and (insn.mode != MODE_IMMHI)) or (insn.indexreg != 0) then
        print("insn_check_imm fail");
        halt();
    end if;
end sub;

sub insn_check_abs()
    if insn.mode != MODE_DIR then
        print("insn_check_abs fail");
        halt();
    end if;
end sub;

sub insn_check_ind()
    if (insn.mode != MODE_IND) or (insn.indexreg == 0) or (insn.offset != 0)
        or (insn.datareg != REG_A) or (insn.indexreg == REG_A)
    then
        print("insn_check_ind fail");
        halt();
    end if;
end sub;

sub insn_check_mutate()
    if (insn.mode != MODE_DIR) or (insn.indexreg == REG_A) or (insn.indexreg == REG_X) then
        print("insn_check_mutate fail");
        halt();
    end if;
end sub;

sub insn_op_imm(value: uint8, opcode: uint8)
	$if DEBUG
		print("@ insn_op_imm 0x");
		print_hex_i8(opcode);
		print(" value=0x");
		print_hex_i8(value);
		print_newline();
	$endif
    insn_check_imm();

    var buf: uint8[2];
    buf[0] := opcode;
    buf[1] := value;
    write_bytes_iop(buf@size, &buf[0]);
end sub;

sub insn_ld_imm(value: uint8)
    insn_op_imm(value, ld_imm_opcodes[find_bit_index(insn.datareg)]);
end sub;

sub insn_op_imm_adr(beiop: uint8, opcode: uint8)
	$if DEBUG
		print("@ insn_op_imm_adr 0x");
		print_hex_i8(opcode);
		print(" iop=0x");
		print_hex_i8(beiop);
        print_insn();
	$endif
    insn_check_imm();

    write_byte(opcode);
    write_address_iop(beiop, insn.obj_id, insn.offset);
end sub;

sub insn_ld_imm_adr_lo()
    insn_op_imm_adr(IOP_ADDRESSLO, ld_imm_opcodes[find_bit_index(insn.datareg)]);
end sub;

sub insn_ld_imm_adr_hi()
    insn_op_imm_adr(IOP_ADDRESSHI, ld_imm_opcodes[find_bit_index(insn.datareg)]);
end sub;

sub insn_op_abs(opcode: uint8)
	$if DEBUG
		print("@ insn_op_abs 0x");
		print_hex_i8(opcode);
        print_insn();
	$endif
    insn_check_abs();

    var obj: [DataThing] := find_thing(insn.obj_id) as [DataThing];
    var beiop: uint8;
    if ((opcode & 0x0F) == 0x01) then
        if obj.segment != SEGMENT_ZEROPAGE then
            print("indirect op with non zero-page object");
            halt();
        end if;
        beiop := IOP_ADDRESSLO;
    elseif (obj.segment == SEGMENT_ZEROPAGE) and ((opcode & 0x0C) == 0x0C) then
        opcode := opcode & 0xf7;
        beiop := IOP_ADDRESSLO;
    elseif obj.segment == SEGMENT_UNKNOWN then
        print("segment of ");
        print_thing(insn.obj_id);
        print(" not known");
        halt();
    else
        beiop := IOP_ADDRESS;
    end if;

    write_byte(opcode);
    write_address_iop(beiop, insn.obj_id, insn.offset);
end sub;

sub insn_ldst_abs(opmask: uint8)
    var opcode: uint8 := 0;

    var location: uint8 := find_bit_index(insn.datareg);
    if insn.indexreg == 0 then
        opcode := ld_abs_opcodes[location];
    elseif insn.indexreg == REG_X then
        opcode := ld_abs_x_opcodes[location];
    elseif insn.indexreg == REG_Y then
        opcode := ld_abs_y_opcodes[location];
    end if;

    if opcode == 0 then
        bad_register();
    end if;
    opcode := opcode & opmask;

    insn_op_abs(opcode);
end sub;

sub insn_ld_abs()
    insn_ldst_abs(0b11111111);
end sub;

sub insn_st_abs()
    insn_ldst_abs(0b11011111);
end sub;

sub insn_op_ind(opcode: uint8)
	$if DEBUG
		print("@ insn_op_ind 0x");
		print_hex_i8(opcode);
        print_insn();
	$endif
    insn_check_ind();

    write_byte(opcode);
    write_address_iop(IOP_ADDRESSLO, insn.obj_id, 0);
end sub;

sub insn_ld_ind()
    insn_op_ind(0xB1); # LDA (ind), Y
end sub;

sub insn_st_ind()
    insn_op_ind(0x91); # STA (ind), Y
end sub;

sub insn_load_object()
    if insn.mode == MODE_DIR then
        insn_ld_abs();
    elseif insn.mode == MODE_IND then
        insn_ld_ind();
    elseif insn.mode == MODE_IMMLO then
        if insn.obj_id != 0 then
            insn_ld_imm_adr_lo();
        else
            insn_ld_imm(insn.offset as uint8);
        end if;
    elseif insn.mode == MODE_IMMHI then
        if insn.obj_id != 0 then
            insn_ld_imm_adr_hi();
        else
            insn_ld_imm((insn.offset >> 8) as uint8);
        end if;
    end if;
end sub;

# opcode must be the abs form of a column D opcode.
sub insn_alu_object(opcode: uint8)
    if insn.mode == MODE_DIR then
        insn_op_abs(opcode);
    elseif insn.mode == MODE_IND then
        opcode := (opcode | 0x10) & 0xF3;
        insn_op_ind(opcode);
    elseif insn.mode == MODE_IMMLO then
        opcode := opcode & 0xfb;
        if insn.obj_id != 0 then
            insn_op_imm_adr(IOP_ADDRESSLO, opcode);
        else
            insn_op_imm(insn.offset as uint8, opcode);
        end if;
    elseif insn.mode == MODE_IMMHI then
        opcode := opcode & 0xfb;
        if insn.obj_id != 0 then
            insn_op_imm_adr(IOP_ADDRESSHI, opcode);
        else
            insn_op_imm((insn.offset >> 8) as uint8, opcode);
        end if;
    end if;
end sub;

# opcode must be the abs form of a column E opcode.
sub insn_mutate_object(opcode: uint8)
    insn_check_mutate();
    insn_op_abs(opcode);
end sub;

sub insn_save_object()
    if insn.mode == MODE_DIR then
        insn_st_abs();
    elseif insn.mode == MODE_IND then
        insn_st_ind();
    else
        print("cannot save ");
        print_insn();
        halt();
    end if;
end sub;
