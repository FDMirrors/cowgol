sub get_width_of(node: [Node]): (width: uint8)
    var type: [TypeThing] := find_thing(node.type_id) as [TypeThing];
    width := type.width;
end sub;

sub write_be_iop(iop: [BEIop])
    print("* BE iop 0x");
    print_hex_i8(iop.iop_kind);
    print(" width=");
    print_i8(iop.width);
    print(" left=");
    print_ea(&iop.left);
    print(" right=");
    print_ea(&iop.right);
    print(" dest=");
    print_ea(&iop.dest);
    print_newline();
    write_iop(iop as [Iop]);
end sub;

sub simplify_node_to(src_index: uint8, dest_index: uint8)
    var src: [Node] := get_node(src_index);
    var dest: [Node] := get_node(dest_index);

    if dest.iop != IOP_FEX_PUSH then
        print("simplify_node_to() where dest is not simplified");
        halt();
    end if;

    var iop: BEIop;
    zero_memory(&iop as [int8], BEIop@bytes);
    iop.iop_size := BEIop@bytes;
    iop.width := get_width_of(dest);
    copy_ea(&dest.ea, &iop.dest);

    var srckind: uint8 := src.iop & IOP_TYPE_MASK;
    if src.iop == IOP_FEX_PUSH then
        iop.iop_kind := IOP_BE_COPY;
        copy_ea(&src.ea, &iop.left);
    else
        iop.iop_kind := src.iop;
        var left: [Node] := get_node(src.left);
        copy_ea(&left.ea, &iop.left);
        if srckind == IOP_TYPE_BACKEND_3OP then
            var right: [Node] := get_node(src.right);
            copy_ea(&right.ea, &iop.right);
        end if;
    end if;

    if arch_validate_be_iop(&iop) == 1 then
        write_be_iop(&iop);
        return;
    end if;

    print("needs breakdown");
    halt();
end sub;

sub simplify_node_to_var(index: uint8): (newindex: uint8)
    var node: [Node] := get_node(index);

    if (node.iop == IOP_FEX_PUSH) and (node.ea.flags == 0) and (node.ea.off_id == 0) then
        newindex := index;
        return;
    end if;

    var type: [TypeThing] := find_thing(node.type_id) as [TypeThing];
    var tempvar_id: uint16 := alloc_temporary(type.width);

    newindex := alloc_node();
    var temp: [Node] := get_node(newindex);
    temp.iop := IOP_FEX_PUSH;
    temp.type_id := node.type_id;
    temp.ea.obj_id := tempvar_id;

    simplify_node_to(index, newindex);
    free_node(index);
end sub;

sub simplify_node(index: uint8): (newindex: uint8)
    var node: [Node] := get_node(index);

    if node.iop == IOP_FEX_PUSH then
        newindex := index;
        return;
    end if;
    newindex := simplify_node_to_var(index);
end sub;

