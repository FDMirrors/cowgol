# Left shifts dxax by cl bits.
&X _lsl4
``:
    jcxz ``_ret
    shl ax, 1
    rcl dx, 1
    loop ``
``_ret:
    ret
 
# Arithmetic right shifts dxax by cl bits.
&X _asr4
``:
    jcxz ``_ret
    sar dx, 1
    rcr ax, 1
    loop ``
``_ret:
    ret
 
# Logical right shifts dxax by cl bits.
&X _lsr4
``:
    jcxz ``_ret
    shr dx, 1
    rcr ax, 1
    loop ``
``_ret:
    ret
 
# Multiply dxax by bxcx, leaving the result in dxax.
&X _mul4
``:
    int 2

# Unsigned division of dxax by bxcx, leaving the result in dxax and the remainder in bxcx.
&X _divremu4
``:
    int 2

# Signed division of dxax by bxcx, leaving the result in dxax and the remainder in bxcx.
&X _divrems4
``:
    int 2

# vim: ts=4 sw=4 et

