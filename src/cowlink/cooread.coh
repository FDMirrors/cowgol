record Subroutine
	next: [Subroutine];
	id: uint16;
	refs: [Reference];
	name: [uint8];
	used: uint8;
	workspace: uint16;
end record;

record Reference
	next: [Reference];
	requires: [Subroutine];
end record;

record Coo
	fcb: FCB;
	subroutines: [Subroutine];
	next: [Coo];
end record;

sub read_hex(fcb: [FCB], len: uint8): (val: uint32)
	val := 0;
	loop
		var c := FCBGetChar(fcb);
		if (c >= '0') and (c <= '9') then
			c := c - '0';
		else
			c := c & ~0x20;
			if (c >= 'A') and (c <= 'F') then
				c := c - ('A' - 10);
			else
				print("error: invalid hex number in coofile\n");
				ExitWithError();
			end if;
		end if;
		val := (val << 4) + (c as uint32);

		len := len - 1;
		if len == 0 then
			break;
		end if;
	end loop;
end sub;

sub read_hex2(fcb: [FCB]): (val: uint8)
	val := read_hex(fcb, 2) as uint8;
end sub;

sub read_hex4(fcb: [FCB]): (val: uint16)
	val := read_hex(fcb, 4) as uint16;
end sub;

sub read_string(fcb: [FCB], len: uint8): (ptr: [uint8])
	ptr := Alloc((len+1) as intptr) as [uint8];
	var p := ptr;
	loop
		if len == 0 then
			break;
		end if;
		[p] := FCBGetChar(fcb);
		p := p + 1;
		len := len - 1;
	end loop;
end sub;

sub AddRef(subr: [Subroutine], requires: [Subroutine])
	var ref := subr.refs;
	loop
		if ref == (0 as [Reference]) then
			break;
		end if;
		if ref.requires == requires then
			return;
		end if;
		ref := ref.next;
	end loop;

	ref := Alloc(@bytesof Reference) as [Reference];
	ref.requires := requires;
	ref.next := subr.refs;
	subr.refs := ref;
end sub;

sub FindSub(coo: [Coo], id: uint16): (subroutine: [Subroutine])
	subroutine := coo.subroutines;
	loop
		if subroutine == (0 as [Subroutine]) then
			break;
		end if;
		if subroutine.id == id then
			return;
		end if;
		subroutine := subroutine.next;
	end loop;

	subroutine := Alloc(@bytesof Subroutine) as [Subroutine];
	subroutine.id := id;
	subroutine.next := coo.subroutines;
	coo.subroutines := subroutine;
end sub;

sub OpenAndLoadCoo(filename: [uint8]): (coo: [Coo])
	coo := Alloc(@bytesof Coo) as [Coo];
	if FCBOpenIn(&coo.fcb, filename) != 0 then
		CannotOpen(filename);
	end if;

	var id: uint16;
	loop
		var c := FCBGetChar(&coo.fcb);
		var len := read_hex4(&coo.fcb);
		var here := FCBPos(&coo.fcb);
		var subroutine: [Subroutine];
		if c == 'E' then
			break;
		elseif c == 'S' then
			id := read_hex4(&coo.fcb);
			subroutine := FindSub(coo, id);
		elseif c == 'R' then
			var subrid := read_hex4(&coo.fcb);
			var requiresid := read_hex4(&coo.fcb);
			AddRef(FindSub(coo, subrid), FindSub(coo, requiresid));
		elseif c == 'W' then
			id := read_hex4(&coo.fcb);
			subroutine := FindSub(coo, id);
			var wid := read_hex2(&coo.fcb);
			subroutine.workspace := read_hex4(&coo.fcb);
		elseif c == 'N' then
			id := read_hex4(&coo.fcb);
			subroutine := FindSub(coo, id);
			subroutine.name := read_string(&coo.fcb, (len as uint8) - 4);
		else
			print("error: unsupported record '");
			print_char(c);
			print("' in coofile\n");
			ExitWithError();
		end if;
		FCBSeek(&coo.fcb, here + (len as uint32));
	end loop;
end sub;

