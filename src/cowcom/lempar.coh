# %include sections from the grammar
%%

# makeheaders token definitions
%%

# control settings
%%

record yyStackEntry
	stateno: YYACTIONTYPE;
	major: YYCODETYPE;
	minor: YYMINORTYPE;
end record;

var yytos: [yyStackEntry];
var yystack: yyStackEntry[YYSTACKDEPTH];
var yystackend: [yyStackEntry];
var yyerrcnt: int8;
typedef YYSTACKPTR := @indexof yystack;

# parsing tables
%%

# fallback rules
%%

# token names
var yyTokenName: [uint8][] := { 
%%
};

# rule names
var yyRuleName: [uint8][YYNRULE] := {
%%
};

# destructors
sub yy_destructor(yymajor: YYCODETYPE, yypminor: [YYMINORTYPE])
%%
end sub;

# stack overflow code

sub yy_pop_parser_stack()
	yytos := @prev yytos;
	yy_destructor(yytos.major, &yytos.minor);
end sub;

sub yy_pop_all_parser_stack()
	while yytos != &yystack[0] loop
		yy_pop_parser_stack();
	end loop;
end sub;

sub yy_stack_overflow()
	yy_pop_all_parser_stack();
%%
end sub;

# For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
# of that rule
var yyRuleInfoLhs: YYCODETYPE[] := {
%%
};

# For rule J, yyRuleInfoNRhs[J] contains the number of symbols on the
# right-hand side of that rule.
var yyRuleInfoNRhs: uint8[] := {
%%
};

# reduce actions
sub yy_find_reduce_action(stateno: YYACTIONTYPE, lookahead: YYCODETYPE): (action: YYACTIONTYPE)
	action := yy_default[stateno];
	if stateno <= YY_REDUCE_COUNT then
		var i := (yy_reduce_ofst[stateno] as @indexof yy_action) + (lookahead as @indexof yy_action);
		if (i>=0) and (i<YY_ACTTAB_COUNT) and (yy_lookahead[i] == lookahead) then
			action := yy_action[i];
		end if;
	end if;
end sub;

sub yy_trace_shift(stateno: YYACTIONTYPE, msg: string)
	print(msg);
	print(" '");
	print(yyTokenName[yytos.major]);
	print("', go to state ");
	print_i16(stateno);
	print_nl();
end sub;

sub yy_reduce(yyruleno: YYACTIONTYPE, yylookahead: YYCODETYPE, yylookaheadtoken: ParseTOKENTYPE):
		(yyact: YYACTIONTYPE)
	var yysize := yyRuleInfoNRhs[yyruleno];
	print("Reduce ");
	print_i16(yyruleno);
	print(" ");
	print(yyRuleName[yyruleno]);
	if yysize != 0 then
		print(", go to state ");
		print_i16([yytos - (yysize as intptr)*@bytesof yyStackEntry].stateno);
	end if;
	print_nl();

	if yytos == yystackend then
		yy_stack_overflow();
	end if;

	var yylhs: YYMINORTYPE;
	var yyrhs: YYMINORTYPE[YY_MAX_RHS_SYMBOLS];
	var pout := &yyrhs[0];
	var c := yysize;
	while c != 0 loop
		pout.yyall := yytos.minor.yyall;
		yytos := @prev yytos;
		pout := @next pout;
		c := c - 1;
	end loop;
%%
	[@next yytos].minor.yyall := yylhs.yyall;

	var yygoto := yyRuleInfoLhs[yyruleno];
	yyact := yy_find_reduce_action(yytos.stateno, yygoto);
	yytos := @next yytos;
	yytos.stateno := yyact;
	yytos.major := yygoto;

	yy_trace_shift(yyact, "...then shift");
end sub;

# parse failure code
sub yy_parse_failed()
	yy_pop_all_parser_stack();
%%
end sub;

# syntax error code
sub yy_syntax_error(yymajor: YYCODETYPE, yyminor: ParseTOKENTYPE)
%%
end sub;

# parse accept code
sub yy_accept()
%%
end sub;

sub ParserInit()
	yyerrcnt := -1;
	yytos := &yystack[0];
	yystack[0].stateno := 0;
	yystack[0].major := 0;
	yystackend := &yystack[YYSTACKDEPTH];
end sub;

sub ParserDeinit()
	while yytos != &yystack[0] loop
		yy_pop_parser_stack();
	end loop;
end sub;

sub MakeNumberTokenData(): (yyminor: [Token])
	yyminor := Alloc(@bytesof Token) as [Token];
	yyminor.number := token_value;
end sub;

sub MakeStringTokenData(): (yyminor: [Token])
	yyminor := Alloc(@bytesof Token) as [Token];
	yyminor.string := StrDup(&token_buffer[0]);
end sub;

sub yy_find_shift_action(lookahead: YYCODETYPE, stateno: YYACTIONTYPE): (newstateno: YYACTIONTYPE)
	if stateno > YY_MAX_SHIFT then
		newstateno := stateno;
	else
		var i := yy_shift_ofst[stateno] + (lookahead as uint16);
		if yy_lookahead[i] != lookahead then
			newstateno := yy_default[stateno];
		else
			newstateno := yy_action[i];
		end if;
	end if;
end sub;

sub yy_shift(newstateno: YYACTIONTYPE, yymajor: YYCODETYPE, yyminor: ParseTOKENTYPE)
	if yytos == yystackend then
		yy_stack_overflow();
		return;
	end if;
	yytos := @next yytos;

	if newstateno > YY_MAX_SHIFT then
		newstateno := newstateno + (YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE);
	end if;

	yytos.stateno := newstateno;
	yytos.major := yymajor;
	yytos.minor.yy0 := yyminor;
	yy_trace_shift(newstateno, "Shift");
end sub;

sub ParserFeedToken(yymajor: YYCODETYPE, yyminor: [Token])
	var yyact := yytos.stateno;

	print("Input '")
	print(yyTokenName[yymajor]);
	if yyact < YY_MIN_REDUCE then
		print("' in state ");
		print_i16(yyact);
	else
		print("' with pending reduce ");
		print_i16(yyact - YY_MIN_REDUCE);
	end if;
	print_nl();

	loop
		yyact := yy_find_shift_action(yymajor, yyact);

		if yyact >= YY_MIN_REDUCE then
			yyact := yy_reduce(yyact - YY_MIN_REDUCE, yymajor, yyminor);
		elseif yyact <= YY_MAX_SHIFTREDUCE then
			yy_shift(yyact, yymajor, yyminor);
			if yyerrcnt >= 0 then
				yyerrcnt := yyerrcnt - 1;
			end if;
			break;
		elseif yyact == YY_ACCEPT_ACTION then
			yytos := @prev yytos;
			yy_accept();
			break;
		else
			print("error!\n");
			var yyminorunion: YYMINORTYPE;
			yyminorunion.yy0 := yyminor;
			if yyerrcnt <= 0 then
				yy_syntax_error(yymajor, yyminor);
			end if;
			yyerrcnt := 3;
			yy_destructor(yymajor, &yyminorunion);
			if yymajor == 0 then
				yy_parse_failed();
				yyerrcnt := -1;
			end if;
			break;
		end if;
	
		if yytos == &yystack[0] then
			break;
		end if;
	end loop;

	print("Return. stack=[");
	var i := &yystack[0];
	while i != yytos loop
		print(" ");
		print(yyTokenName[i.major]);
		i := @next i;
	end loop;
	print("]\n");
end sub;

