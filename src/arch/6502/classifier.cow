sub do_data(obj_id: uint16, segment: uint8)
    var obj: [DataThing] := find_thing(obj_id) as [DataThing];
    if segment > obj.segment then
        obj.segment := segment;
    end if;
end sub;

sub arch_classify_var(var_id: uint16)
    do_data(var_id, SEGMENT_DATA);
end sub;

sub arch_classify_ea(ea: [EffectiveAddress])
    var objtype: uint8 := get_thing_type(ea.obj_id);
    if objtype == THING_ADDRESSOF then
        do_data(ea.obj_id, SEGMENT_CONST);
        var addressofthing: [AddressOfThing] := find_thing(ea.obj_id) as [AddressOfThing];
        do_data(addressofthing.thing_id, SEGMENT_DATA);
    elseif is_typed_thing(ea.obj_id) != 0 then
        var segment: uint8;
        if (ea.flags & EA_DEREF) != 0 then
            segment := SEGMENT_ZEROPAGE;
        else
            segment := SEGMENT_DATA;
        end if;
        do_data(ea.obj_id, segment);
    elseif objtype == THING_STRING then
        do_data(ea.obj_id, SEGMENT_CONST);
    end if;
    if is_typed_thing(ea.varoff_id) != 0 then
        do_data(ea.obj_id, SEGMENT_DATA);
    end if;
end sub;

sub arch_allocate_var(offsets: [ArchSizes], thing: [TypedThing], width: uint16)
    if thing.segment == SEGMENT_ZEROPAGE then
        thing.address := offsets.zp_size as uint16;
        offsets.zp_size := offsets.zp_size + (width as uint8);
    elseif thing.segment == SEGMENT_DATA then
        thing.address := offsets.data_size;
        offsets.data_size := offsets.data_size + width;
    elseif thing.segment == SEGMENT_LAST then
        thing.address := 0;
    else
        print("bad segment 0x");
        print_hex_i8(thing.segment);
        halt();
    end if;
end sub;

sub arch_propagate_var_offsets(src_offsets: [ArchSizes], dest_offsets: [ArchSizes])
    if src_offsets.zp_size > dest_offsets.zp_size then
        dest_offsets.zp_size := src_offsets.zp_size;
    end if;

    if src_offsets.data_size > dest_offsets.data_size then
        dest_offsets.data_size := src_offsets.data_size;
    end if;
end sub;

sub arch_report_offsets(offsets: [ArchSizes])
    print("Zero page: ");
    print_i8(offsets.zp_size);
    print(" bytes\nData: ");
    print_i16(offsets.data_size);
    print(" bytes\n");
end sub;

sub needs_runtime_subroutine(identifier_id: uint16)
    var subroutine_id: uint16 := find_bootstrap_symbol(identifier_id);
    var subroutine: [SubroutineThing] := find_thing(subroutine_id) as [SubroutineThing];
    if subroutine.thing_type != THING_SUBROUTINE then
        print("runtime sub not a sub!");
        halt();
    end if;

    subroutine.segment := SEGMENT_CODE;
    add_reference(current_subroutine_id, subroutine_id);
end sub;

sub arch_classify_iop(iop: [BEIop])
    var iopkind: uint8 := iop.iop_kind;
    var width: uint8 := iop.width;
    if width == 1 then
        if (iopkind == IOP_BE_DIVU) or (iopkind == IOP_BE_MODU) then
            needs_runtime_subroutine(TOKEN_DIVMODU8);
        elseif iopkind == IOP_BE_MUL then
            needs_runtime_subroutine(TOKEN_MUL8);
        end if;
    elseif width == 2 then
        if iopkind == IOP_BE_LSL then
            needs_runtime_subroutine(TOKEN_LSL16);
        elseif iopkind == IOP_BE_LSR then
            needs_runtime_subroutine(TOKEN_LSR16);
        elseif iopkind == IOP_BE_ASR then
            needs_runtime_subroutine(TOKEN_ASR16);
        elseif iopkind == IOP_BE_MUL then
            needs_runtime_subroutine(TOKEN_MUL16);
        elseif iopkind == IOP_BE_DIVU then
            needs_runtime_subroutine(TOKEN_DIVU16);
        elseif iopkind == IOP_BE_DIVS then
            needs_runtime_subroutine(TOKEN_DIVS16);
        elseif iopkind == IOP_BE_MODU then
            needs_runtime_subroutine(TOKEN_MODU16);
        elseif iopkind == IOP_BE_MODS then
            needs_runtime_subroutine(TOKEN_MODS16);
        end if;
    elseif width == 4 then
        if iopkind == IOP_BE_LSL then
            needs_runtime_subroutine(TOKEN_LSL32);
        elseif iopkind == IOP_BE_LSR then
            needs_runtime_subroutine(TOKEN_LSR32);
        elseif iopkind == IOP_BE_ASR then
            needs_runtime_subroutine(TOKEN_ASR32);
        elseif iopkind == IOP_BE_MUL then
            needs_runtime_subroutine(TOKEN_MUL32);
        elseif iopkind == IOP_BE_DIVU then
            needs_runtime_subroutine(TOKEN_DIVU32);
        elseif iopkind == IOP_BE_DIVS then
            needs_runtime_subroutine(TOKEN_DIVS32);
        elseif iopkind == IOP_BE_MODU then
            needs_runtime_subroutine(TOKEN_MODU32);
        elseif iopkind == IOP_BE_MODS then
            needs_runtime_subroutine(TOKEN_MODS32);
        end if;
    end if;
    if iopkind == IOP_BE_ZEXT then
        needs_runtime_subroutine(TOKEN_ZEXT);
    elseif iopkind == IOP_BE_SEXT then
        needs_runtime_subroutine(TOKEN_SEXT);
    end if;
end sub;

sub arch_classify_conditional_iop(iop: [BEConditionalIop])
end sub;
