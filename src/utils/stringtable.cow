var strings_fd: int8 := file_openin(strings_dat);

sub show_string(string_id: uint16)
    #print("(0x");
    #print_hex_i16(string_id);
    #print(") ");

    file_seek(strings_fd, string_id as uint32);
    var len: uint8 := file_getchar(strings_fd) as uint8;
    print_char('"');
    while len != 1 loop
        var c: uint8 := file_getchar(strings_fd) as uint8;
        if (c < 32) or (c > 126) then
            print("\\x");
            print_hex_i8(c);
        elseif c == '"' then
            print("\\\"");
        else
            print_char(c);
        end if;
        len := len - 1;
    end loop;
    print_char('"');
end sub;

sub show_identifier(identifier_id: uint16)
    if identifier_id == 0 then
        print("(null)");
        return;
    end if;

    var thing: [Thing] := find_thing(identifier_id);
    if (thing.thing_type == THING_STRING) then
        var stringthing: [StringThing] := thing as [StringThing];
        show_string(stringthing.string_id);
    elseif (thing.thing_type == THING_TOKEN) or (thing.thing_type == THING_IDENTIFIER) then
        var identifierthing: [IdentifierThing] := thing as [IdentifierThing];
        show_string(identifierthing.string_id);
    else
        print("(not an identifier, type 0x");
        print_hex_i8(thing.thing_type);
        print(")");
    end if;
end sub;

sub show_name_of(thing_id: uint16)
    if thing_id == 0 then
        print("(null)");
        return;
    end if;

    var identifier_id: uint16 := find_name_of_value(thing_id);
    if identifier_id != 0 then
        show_identifier(identifier_id);
    else
        var thing: [Thing] := find_thing(thing_id);
        print("(anonymous thing 0x");
        print_hex_i16(thing_id);
        print(" of type 0x");
        print_hex_i8(thing.thing_type);
        print(")");
    end if;
end sub;
