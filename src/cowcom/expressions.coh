sub IsTypeOfKind(type: [Symbol], kind: uint8): (result: uint8)
	result := 0;
	if (type != (0 as [Symbol])) and (type.kind == TYPE) and (type.typedata.kind == kind) then
		result := 1;
	end if;
end sub;

sub IsArray(type: [Symbol]): (result: uint8)
	result := IsTypeOfKind(type, TYPE_ARRAY);
end sub;

sub IsPtr(type: [Symbol]): (result: uint8)
	result := IsTypeOfKind(type, TYPE_POINTER);
end sub;

sub IsNum(type: [Symbol]): (result: uint8)
	if type == (0 as [Symbol]) then
		result := 1;
	else
		result := IsTypeOfKind(type, TYPE_NUMBER);
	end if;
end sub;

sub IsSNum(type: [Symbol]): (result: uint8)
	if type == (0 as [Symbol]) then
		result := 1;
	elseif (IsTypeOfKind(type, TYPE_NUMBER) != 0) and (type.typedata.numbertype.is_signed != 0) then
		result := 1;
	else
		result := 0;
	end if;
end sub;

sub IsScalar(type: [Symbol]): (result: uint8)
	if (IsPtr(type) != 0) or (IsNum(type) != 0) then
		result := 1;
	else
		result := 0;
	end if;
end sub;

sub IsRecord(type: [Symbol]): (result: uint8)
	result := IsTypeOfKind(type, TYPE_RECORD);
end sub;

sub MakeLValue(address: [Node]): (lvalue: [Node])
	var w: uint8 := 0;
	var elementtype := address.type.typedata.pointertype.element;
	if IsScalar(elementtype) != 0 then
		w := elementtype.typedata.width as uint8;
	end if;
	lvalue := MidLoad(w, address);
	lvalue.type := elementtype;

	#print("make ");
	#print_hex_i32(lvalue as intptr as uint32);
	#print_nl();
end sub;

sub UndoLValue(lvalue: [Node]): (address: [Node])
	var k := lvalue.op;
	if (k < MIDCODE_LOAD0) or (k > MIDCODE_LOAD8) then
		SimpleError("lvalue required");
	end if;

	address := lvalue.left;
	lvalue.left := (0 as [Node]);
	Discard(lvalue);
end sub;

sub expr_i_cant_do_that(lhs: [Node], rhs: [Node])
	StartError();
	print(lhs.type.name);
	print(" and ");
	print(rhs.type.name);
	print(" are not compatible in this context");
	EndError();
end sub;

sub CheckExpressionType(node: [Node], type: [Symbol])
	if node.type == (0 as [Symbol]) then
		node.type := type;
	end if;

	if node.type != type then
		StartError();
		print("type mismatch: expression was a ");
		print(node.type.name);
		print(", used when a ");
		print(type.name);
		print(" was expected");
		EndError();
	end if;

	if (IsPtr(type) == 0) and (IsNum(type) == 0) then
		StartError();
		print(type.name);
		print(" cannot be used here");
		EndError();
	end if;
end sub;

sub ResolveUntypedConstantsForAddOrSub(lhs: [Node], rhs: [Node])
	if (lhs.type != (0 as [Symbol])) and (rhs.type == (0 as [Symbol])) then
		if IsNum(lhs.type) != 0 then
			rhs.type := lhs.type;
		elseif IsPtr(lhs.type) != 0 then
			rhs.type := intptr_type;
		else
			SimpleError("cannot use an untyped constant in this context");
		end if;
	end if;
	if (lhs.type == (0 as [Symbol])) and (rhs.type != (0 as [Symbol])) then
		if IsNum(rhs.type) != 0 then
			lhs.type := rhs.type;
		elseif IsPtr(rhs.type) != 0 then
			SimpleError("pointers may only appear on the LHS of an addition or subtraction");
		end if;
	end if;
end sub;

sub ResolveUntypedConstantsSimply(lhs: [Node], rhs: [Node])
	if (lhs.type != (0 as [Symbol])) and (rhs.type == (0 as [Symbol])) then
		rhs.type := lhs.type;
	elseif (lhs.type == (0 as [Symbol])) and (rhs.type != (0 as [Symbol])) then
		lhs.type := rhs.type;
	elseif lhs.type != rhs.type then
		expr_i_cant_do_that(lhs, rhs);
	end if;
end sub;

sub CheckNumber(node: [Node])
	if IsNum(node.type) == 0 then
		SimpleError("number required");
	end if;
end sub;

sub ResolveUntypedConstantsNeedingNumbers(lhs: [Node], rhs: [Node])
	ResolveUntypedConstantsSimply(lhs, rhs);
	CheckNumber(lhs);
	CheckNumber(rhs);
end sub;

sub CondSimple(lhs: [Node], rhs: [Node])
	ResolveUntypedConstantsSimply(lhs, rhs);
	if lhs.type != rhs.type then
		expr_i_cant_do_that(lhs, rhs);
	end if;
end sub;

sub Expr1Simple(op: uint8, lhs: [Node]): (result: [Node])
	result := MidC1Op(op, NodeWidth(lhs), lhs);
	result.type := lhs.type;
end sub;

sub ExprAdd(lhs: [Node], rhs: [Node]): (result: [Node])
	ResolveUntypedConstantsForAddOrSub(lhs, rhs);

	sub cant_add_that()
		expr_i_cant_do_that(lhs, rhs);
	end sub;

	if (IsPtr(lhs.type) != 0) then
		if (IsPtr(rhs.type) != 0) or (rhs.type != intptr_type) then
			cant_add_that();
		end if;
	elseif IsPtr(rhs.type) != 0 then
		cant_add_that();
	elseif (IsPtr(lhs.type) == 0) and (lhs.type != rhs.type) then
		cant_add_that();
	end if;
	
	result := MidC2Op(MIDCODE_ADD0, NodeWidth(lhs), lhs, rhs);
	result.type := lhs.type;
end sub;

sub ExprSub(lhs: [Node], rhs: [Node]): (result: [Node])
	ResolveUntypedConstantsForAddOrSub(lhs, rhs);

	sub cant_sub_that()
		expr_i_cant_do_that(lhs, rhs);
	end sub;

	if (IsPtr(lhs.type) != 0) and (IsPtr(rhs.type) == 0) and (rhs.type != intptr_type) then
		cant_sub_that();
	elseif (IsNum(lhs.type) != 0) and (IsPtr(rhs.type) != 0) then
		cant_sub_that();
	elseif (IsNum(lhs.type) != 0) and (IsNum(rhs.type) != 0) and (lhs.type != rhs.type) then
		cant_sub_that();
	end if;

	result := MidC2Op(MIDCODE_SUB0, NodeWidth(lhs), lhs, rhs);
	if (IsPtr(lhs.type) != 0) and (lhs.type == rhs.type) then
		result.type := intptr_type;
	else
		result.type := lhs.type;
	end if;
end sub;

sub Expr2Simple(sop: uint8, uop: uint8, lhs: [Node], rhs: [Node]): (result: [Node])
	ResolveUntypedConstantsNeedingNumbers(lhs, rhs);
	var op := uop;
	if IsSNum(lhs.type) != 0 then
		op := sop;
	end if;
	result := MidC2Op(op, NodeWidth(lhs), lhs, rhs);
	result.type := lhs.type;
end sub;

sub expr_i_checkrhsconst(rhs: [Node])
	if rhs.op != MIDCODE_CONSTANT then
		SimpleError("LHS of shift can only be constant if the RHS is also constant");
	end if;
end sub;

sub expr_i_checkshift(lhs: [Node], rhs: [Node])
	if IsNum(lhs.type) == 0 then
		SimpleError("number required on LHS of shift");
	end if;
	CheckExpressionType(rhs, uint8_type);
end sub;

sub ExprShift(sop: uint8, uop: uint8, lhs: [Node], rhs: [Node]): (result: [Node])
	var op := uop;
	if IsSNum(lhs.type) != 0 then
		op := sop;
	end if;

	if lhs.op == MIDCODE_CONSTANT then
		expr_i_checkrhsconst(rhs);
		lhs.constant.value := FoldConstant2(op, lhs, rhs);
		result := lhs;
		Discard(rhs);
		return;
	end if;
	expr_i_checkshift(lhs, rhs);

	result := MidC2Op(op, NodeWidth(lhs), lhs, rhs);
	result.type := lhs.type;
end sub;


