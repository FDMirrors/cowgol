var uone: uint8 := 1;
var utwo: uint8 := 2;
var uthree: uint8 := 3;
var sone: int8 := 1;
var stwo: int8 := 2;
var sthree: int8 := 3;

if (-sone) != -1 then fail("-sone"); end if;
if (~sone) != ~1 then fail("~sone"); end if;

if (utwo + uone)  != (2 + 1)  then fail("utwo + uone"); end if;
if (utwo - uone)  != (2 - 1)  then fail("utwo - uone"); end if;
if (utwo * uone)  != (2 * 1)  then fail("utwo * uone"); end if;
if (utwo / uone)  != (2 / 1)  then fail("utwo / uone"); end if;
if (utwo % uone)  != (2 % 1)  then fail("utwo % uone"); end if;
if (utwo & uone)  != (2 & 1)  then fail("utwo & uone"); end if;
if (utwo | uone)  != (2 | 1)  then fail("utwo | uone"); end if;
if (utwo ^ uone)  != (2 ^ 1)  then fail("utwo ^ uone"); end if;
if (utwo << uone) != (2 << 1) then fail("utwo << uone"); end if;
if (utwo >> uone) != (2 >> 1) then fail("utwo >> uone"); end if;

if (stwo + sone)  != (2 + 1)  then fail("stwo + sone"); end if;
if (stwo - sone)  != (2 - 1)  then fail("stwo - sone"); end if;
if (stwo * sone)  != (2 * 1)  then fail("stwo * sone"); end if;
if (stwo / sone)  != (2 / 1)  then fail("stwo / sone"); end if;
if (stwo % sone)  != (2 % 1)  then fail("stwo % sone"); end if;
if (stwo & sone)  != (2 & 1)  then fail("stwo & sone"); end if;
if (stwo | sone)  != (2 | 1)  then fail("stwo | sone"); end if;
if (stwo ^ sone)  != (2 ^ 1)  then fail("stwo ^ sone"); end if;
if (stwo << sone) != (2 << 1) then fail("stwo << sone"); end if;
if (stwo >> sone) != (2 >> 1) then fail("stwo >> sone"); end if;
