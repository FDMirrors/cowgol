include "cowgol.coh";
include "tests/_framework.coh";

sub oneint8(i: int8) is
    print("oneint8: ");
    if i == 42 then yes(); else no(); end if;
end sub;
oneint8(42);

sub twoint8(i1: int8, i2: int8) is
    print("twoint8: ");
    if (i1 == 42) and (i2 == 99) then yes(); else no(); end if;
end sub;
twoint8(42, 99);

sub oneint16(i: int16) is
    print("oneint16: ");
    if i == 42 then yes(); else no(); end if;
end sub;
oneint16(42);

sub twoint16(i1: int16, i2: int16) is
    print("twoint16: ");
    if (i1 == 42) and (i2 == 999) then yes(); else no(); end if;
end sub;
twoint16(42, 999);

sub oneint32(i: uint32) is
	print("oneint32: ");
	if i == 12345678 then yes(); else no(); end if;
end sub;
oneint32(12345678);

sub twoint32(i: uint32, j: uint32) is
	print("twoint32: ");
	if (i == 12345678) and (j == 87654321) then yes(); else no(); end if;
end sub;
twoint32(12345678, 87654321);

sub mixed1(i1: int8, i2: int16) is
    print("mixed1: ");
    if (i1 == 42) and (i2 == 999) then yes(); else no(); end if;
end sub;
mixed1(42, 999);

sub mixed2(i1: int16, i2: int8) is
    print("mixed2: ");
    if (i1 == 420) and (i2 == 99) then yes(); else no(); end if;
end sub;
mixed2(420, 99);

sub lots(i1: int8, i2: int8, i3: int8, i4: int8, i5: int8, i6: int8) is
	print("lots: ");
	if (i1+i2+i3+i4+i5+i6 == 21) then yes(); else no(); end if;
end sub;
lots(1, 2, 3, 4, 5, 6);

# This tickles a bug in the old cowcom where arguments passed to
# subroutines inside expressions weren't compiled correctly.
sub callsinexpressions() is
	print("callsinexpression");
	sub returns(i1: uint8): (i2: uint8)
		i2 := i1;
	end sub;
	if (returns(1) + returns(2)) == 3 then yes(); else no(); end if;
end sub;
callsinexpressions();

