sub open_with_osfind(filename: [int8], a: uint8): (fd: int8)
    var t: [int8] := filename;
    loop
        if t[0] == 0 then
            break;
        end if;
        t := t + 1;
    end loop;
    t[0] := 13;

    @bytes 0xAD, &a;            # LDA a
    @bytes 0xAE, &filename+0;   # LDX ptr+0
    @bytes 0xAC, &filename+1;   # LDY ptr+1
    @bytes 0x20, 0xCE, 0xFF;    # JSR OSFIND
    @bytes 0x8D, &fd;           # STA abs

    t[0] := 0;
end sub;

sub file_openin(filename: [int8]): (fd: int8)
    fd := open_with_osfind(filename, 0x40);
end sub;

sub file_openout(filename: [int8]): (fd: int8)
    fd := open_with_osfind(filename, 0x80);
end sub;

sub file_openup(filename: [int8]): (fd: int8)
    fd := open_with_osfind(filename, 0xC0);
end sub;

sub file_getblock(fd: int8, ptr: [int8], length: uint16)
    var block: OsgbpbBlock;
    block.fd := fd as uint8;
    block.bufferlo := ptr as [uint8];
    block.bufferhi := 0;
    block.count := length as uint32;
    osgbpb(4, &block); # write bytes ignoring pointer
end sub;

sub file_putblock(fd: int8, ptr: [int8], length: uint16)
    var block: OsgbpbBlock;
    block.fd := fd as uint8;
    block.bufferlo := ptr as [uint8];
    block.bufferhi := 0;
    block.count := length as uint32;
    osgbpb(2, &block); # read bytes ignoring pointer
end sub;

sub file_seek(fd: int8, pos: uint32)
    var zp: uint32 @segment(0x81) := pos;
    osargs(1, &zp as [uint8], fd as uint8); # write PTR#
end sub;

sub file_tell(fd: int8): (pos: uint32)
    var zp: uint32 @segment(0x81);
    osargs(0, &zp as [uint8], fd as uint8); # read PTR#
    pos := zp;
end sub;

sub file_ext(fd: int8): (length: uint32)
    var zp: uint32 @segment(0x81);
    osargs(2, &zp as [uint8], fd as uint8); # read EXT#
    length := zp;
end sub;

sub file_eof(fd: int8): (eof: uint8)
    @bytes 0xA9, 0x7F;          # LDA #7F
    @bytes 0xAE, &fd;           # LDX fd
    @bytes 0x20, 0xF4, 0xFF;    # JSR OSBYTE
    @bytes 0x8E, &eof;          # STX eof
end sub;

sub file_putchar(fd: int8, char: int8)
    @bytes 0xAD, &char;         # LDA char
    @bytes 0xAC, &fd;           # LDY fd
    @bytes 0x20, 0xD4, 0xFF;    # JSR OSBPUT
end sub;

sub file_getchar(fd: int8): (char: int8, eof: uint8)
    @bytes 0xAC, &fd;           # LDY fd
    @bytes 0x20, 0xD7, 0xFF;    # JSR OSBGET
    @bytes 0x8D, &char;         # STA char
    @bytes 0xA9, 0x00;          # LDA #0
    @bytes 0x2A;                # ROL A
    @bytes 0x8D, &eof;          # STA eof
end sub;

sub file_close(fd: int8)
    @bytes 0xA9, 0x00;          # LDA #0
    @bytes 0xAC, &fd;           # LDY fd
    @bytes 0x20, 0xCE, 0xFF;    # JSR OSFIND
end sub;
