sub regular_alu_word_op(iop: [BEIop], opcode: uint8)
    $if DEBUG
        print("* GENERATE: word aluop 0x");
        print_hex_i8(opcode);
        print(": ");
        print_ea(&iop.left);
        print(", ");
        print_ea(&iop.right);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    check_widec_ea(&iop.left);
    check_widec_ea(&iop.right);
    check_widec_ea(&iop.dest);

    var offset: uint8;

    sub iterate()
        var indexreg: uint8;

        indexreg := setup_insn(&iop.left, offset, REG_A);
        insn_load_object();
        free_reg(indexreg);

        indexreg := setup_insn(&iop.right, offset, REG_A);
        insn_alu_object(opcode);
        free_reg(indexreg);

        indexreg := setup_insn(&iop.dest, offset, REG_A);
        insn_save_object();
        free_reg(indexreg);
    end sub;

    allocate_fixed_reg(REG_A);
    offset := 0;
    iterate();
    offset := 1;
    iterate();
    free_reg(REG_A);
end sub;

sub arch_gen_copy_word(iop: [BEIop])
    $if DEBUG
        print("* GENERATE: word copy: ");
        print_ea(&iop.left);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    check_widec_ea(&iop.left);
    check_widec_ea(&iop.dest);

    var offset: uint8;
    var candidates: uint8;
    if (iop.left.flags == EA_DEREF) or (iop.dest.flags == EA_DEREF) then
        candidates := REG_A;
    else
        candidates := REG_A|REG_X|REG_Y;
    end if;
    var location: uint8 := allocate_reg(candidates);

    sub iterate()
        var indexreg: uint8;

        indexreg := setup_insn(&iop.left, offset, location);
        insn_load_object();
        free_reg(indexreg);

        indexreg := setup_insn(&iop.dest, offset, location);
        insn_save_object();
        free_reg(indexreg);
    end sub;

    offset := 0;
    iterate();
    offset := 1;
    iterate();
    free_reg(location);
end sub;
