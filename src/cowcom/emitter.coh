var outfcb: FCB;

const RECORD_SIZE := 128;

record EmitterRecord
	data: uint8[RECORD_SIZE];
	ptr: uint8;
	next: [EmitterRecord];
end record;

record EmitterChunk
	next: [EmitterChunk];
	first_record: [EmitterRecord];
	current_record: [EmitterRecord];
	length: uint16;
end record;

var current_chunk: [EmitterChunk];

sub EmitByte(byte: uint8)
	if current_chunk != (0 as [EmitterChunk]) then
		var r := current_chunk.current_record;
		if r.ptr == RECORD_SIZE then
			r := Alloc(@bytesof EmitterRecord) as [EmitterRecord];
			current_chunk.current_record.next := r;
			current_chunk.current_record := r;
		end if;

		r.data[r.ptr] := byte;
		r.ptr := r.ptr + 1;
		current_chunk.length := current_chunk.length + 1;
	end if;
end sub;

sub E_space()
	EmitByte(' ');
end sub;

sub E_comma()
	EmitByte(',');
end sub;

sub E_tab()
	EmitByte('\t');
end sub;

sub E_nl();
	EmitByte('\n');
end sub;

sub E(text: string)
	loop
		var c := [text];
		text := text + 1;
		if c == 0 then
			break;
		end if;
		EmitByte(c);
	end loop;
end sub;

sub E_u32(value: uint32)
	var buffer: uint8[12];
	var p := &buffer[0];
	var pe := UIToA(value, 10, p);

	loop
		var c := [p];
		if c == 0 then
			break;
		end if;
		EmitByte(c);
		p := @next p;
	end loop;
end sub;

sub E_u16(value: uint16)
	E_u32(value as uint32);
end sub;

sub E_u8(value: uint8)
	E_u32(value as uint32);
end sub;

sub E_i8(value: int8)
	if value < 0 then
		EmitByte('-');
		value := -value;
	else
		EmitByte('+');
	end if;
	E_u8(value as uint8);
end sub;

sub E_i16(value: int16)
	if value < 0 then
		EmitByte('-');
		value := -value;
	else
		EmitByte('+');
	end if;
	E_u16(value as uint16);
end sub;

sub E_i32(value: int32)
	if value < 0 then
		EmitByte('-');
		value := -value;
	else
		EmitByte('+');
	end if;
	E_u32(value as uint32);
end sub;

sub E_h(value: uint32, width: uint8)
	var buffer: uint8[5];
	var pe := UIToA(value as uint32, 16, &buffer[0]);
	var padding := width - (pe - &buffer[0]) as uint8;
	while padding != 0 loop
		EmitByte('0');
		padding := padding - 1;
	end loop;
	E(&buffer[0]);
end sub;

sub E_h8(value: uint8)
	E_h(value as uint32, 2);
end sub;

sub E_h16(value: uint16)
	E_h(value as uint32, 4);
end sub;

sub E_h32(value: uint32)
	E_h(value as uint32, 8);
end sub;

sub E_labelref(labelid: uint16)
	EmitByte(COO_ESCAPE_THISCOO);
	E_h16(labelid);
end sub;

sub E_subref(subr: [Subroutine])
	if subr == current_subr then
		EmitByte(COO_ESCAPE_THISSUB);
	else
		EmitByte(COO_ESCAPE_SUBREF);
		E_h16(subr.id);
	end if;
end sub;

sub EmitterPushChunk()
	var chunk := Alloc(@bytesof EmitterChunk) as [EmitterChunk];
	chunk.current_record := Alloc(@bytesof EmitterRecord) as [EmitterRecord];
	chunk.first_record := chunk.current_record;
	chunk.next := current_chunk;
	current_chunk := chunk;
end sub;

sub EmitterPopChunk(type: uint8)
	FCBPutChar(&outfcb, type);

	var buffer: uint8[5];
	var pe := UIToA(current_chunk.length as uint32, 16, &buffer[0]);
	FCBPutString(&outfcb, "0000" + (pe - &buffer[0]));
	FCBPutString(&outfcb, &buffer[0]);

	var r := current_chunk.first_record;
	while r != (0 as [EmitterRecord]) loop
		var i: uint8 := 0;
		while i != r.ptr loop
			FCBPutChar(&outfcb, r.data[i]);
			i := i + 1;
		end loop;

		var nextr := r.next;
		Free(r as [uint8]);
		r := nextr;
	end loop;

	var nextchunk := current_chunk.next;
	Free(current_chunk as [uint8]);
	current_chunk := nextchunk;
end sub;

sub EmitterOpenfile(filename: string)
	if FCBOpenOut(&outfcb, filename) != 0 then
		SimpleError("cannot open output file");
	end if;
end sub;

sub EmitterClosefile()
	FCBPutString(&outfcb, "E0000");
	if FCBClose(&outfcb) != 0 then
		SimpleError("cannot close output file");
	end if;
end sub;

sub EmitterDeclareSubroutine(subr: [Subroutine])
	EmitterPushChunk();
	E_h16(subr.id);
	E(subr.name);
	EmitterPopChunk('N');
end sub;

sub EmitterDeclareExternalSubroutine(id: uint16, external: string)
	EmitterPushChunk();
	E_h16(id);
	E(external);
	EmitterPopChunk('X');
end sub;

sub EmitterReferenceSubroutine(user: [Subroutine], used: [Subroutine])
	EmitterPushChunk();
	E_h16(user.id);
	E_h16(used.id);
	EmitterPopChunk('R');
end sub;

sub EmitterDeclareWorkspace(subr: [Subroutine], wid: uint8, workspace: Size)
	EmitterPushChunk();
	E_h16(subr.id);
	E_h8(wid);
	E_h16(workspace as uint16);
	EmitterPopChunk('W');
end sub;

