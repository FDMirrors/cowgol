sub check_wide_ea(ea: [EffectiveAddress])
    if (ea.flags == EA_VALUE) and (is_number_thing(ea.obj_id) != 0) then
        var thing: [NumberThing] := find_thing(ea.obj_id) as [NumberThing];
        thing.segment := SEGMENT_CONST;
    end if;

    if ea.varoff_id != 0 then
        print("wide EA with variable offset: ");
        print_ea(ea);
        halt();
    end if;

    if (ea.flags == EA_DEREF) and (get_value_of_number(ea.numoff_id) != 0) then
        print("wide pointer EA with numeric offset: ");
        print_ea(ea);
        halt();
    end if;
end sub;

sub addressing_mode(iop: [BEIop]): (mode: uint8)
    if iop.dest.flags == EA_DEREF then
        mode := 0b001;
    else
        mode := 0b000;
    end if;
    if iop.left.flags == EA_DEREF then
        mode := mode | 0b010;
    end if;
    if iop.right.flags == EA_DEREF then
        mode := mode | 0b100;
    end if;
end sub;

sub do_2op_helper(iop: [BEIop])
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.dest);

    write_back_precious_values(REG_MASK);

    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_LOAD4BYTES), 0);
    write_address_iop(IOP_ADDRESS, iop.dest.obj_id, get_value_of_number(iop.dest.numoff_id) as uint16);
    write_address_iop(IOP_ADDRESS, iop.left.obj_id, get_value_of_number(iop.left.numoff_id) as uint16);

    var mode: uint8 := addressing_mode(iop);
    if (mode & 0b111) != 0 then
        write_byte(0x20); # JSR abs
        write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_MODEADJUST), (7-mode) as uint16);
    end if;

    flush_cached_values(REG_MASK);
end sub;

sub do_3op_helper(iop: [BEIop])
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.right);
    check_wide_ea(&iop.dest);

    write_back_precious_values(REG_MASK);

    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_LOAD6BYTES), 0);
    write_address_iop(IOP_ADDRESS, iop.dest.obj_id, get_value_of_number(iop.dest.numoff_id) as uint16);
    write_address_iop(IOP_ADDRESS, iop.left.obj_id, get_value_of_number(iop.left.numoff_id) as uint16);
    write_address_iop(IOP_ADDRESS, iop.right.obj_id, get_value_of_number(iop.right.numoff_id) as uint16);

    var mode: uint8 := addressing_mode(iop);
    if (mode & 0b111) != 0 then
        write_byte(0x20); # JSR abs
        write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_MODEADJUST), (7-mode) as uint16);
    end if;

    flush_cached_values(REG_MASK);
end sub;

sub regular_alu_wide_op(iop: [BEIop], opcode: uint8)
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.right);

    find_or_load_fixed_int(0, REG_Y);
    find_or_load_fixed_int(iop.width - 1, REG_X);
    allocate_fixed_reg(REG_A);

    var label: uint8 := create_label();
    write_label_iop(label);
    load_value_with_index(REG_A, &iop.left, REG_Y);
    aluop_value_with_index(&iop.right, REG_Y, opcode);
    save_value_with_index(REG_A, &iop.dest, REG_Y);
    write_byte(0xC8); # INY
    write_byte(0xCA); # DEX
    write_cg_6502_conditional_iop(0x10, label); # BPL rel

    flush_cached_values(REG_A|REG_X|REG_Y);
end sub;

sub arch_gen_add_wide(iop: [BEIop])
    write_byte(0x18); # CLC
    regular_alu_wide_op(iop, 0x6D); # ADC abs
end sub;

sub arch_gen_sub_wide(iop: [BEIop])
    write_byte(0x38); # SEC
    regular_alu_wide_op(iop, 0xED); # SBC abs
end sub;

sub arch_gen_copy_wide(iop: [BEIop])
    check_wide_ea(&iop.left);
    check_wide_ea(&iop.right);

    find_or_load_fixed_int(iop.width - 1, REG_Y);
    allocate_fixed_reg(REG_A);

    var label: uint8 := create_label();
    write_label_iop(label);
    load_value_with_index(REG_A, &iop.left, REG_Y);
    save_value_with_index(REG_A, &iop.dest, REG_Y);
    write_byte(0x88); # DEY
    write_cg_6502_conditional_iop(0x10, label); # BPL rel

    flush_cached_values(REG_Y);
end sub;

sub arch_gen_sext(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_int(iop.width-1, REG_Y);
    find_or_load_fixed_int((get_width_of_type(iop.left.type_id) as uint8)-1, REG_X);
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_SEXT), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_zext(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_int(iop.width-1, REG_Y);
    find_or_load_fixed_int((get_width_of_type(iop.left.type_id) as uint8)-1, REG_X);
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(TOKEN_ZEXT), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_lsl_wide(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_int(iop.width, REG_X);
    find_or_load_fixed_value(&iop.right, REG_A);

    var helper: uint16;
    if iop.width == 2 then
        helper := TOKEN_LSL16;
    else
        helper := TOKEN_LSL32;
    end if;
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(helper), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_lsr_wide(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_value(&iop.right, REG_A);

    var helper: uint16;
    if iop.width == 2 then
        helper := TOKEN_LSR16;
    else
        helper := TOKEN_LSR32;
    end if;
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(helper), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_asr_wide(iop: [BEIop])
    do_2op_helper(iop);

    find_or_load_fixed_value(&iop.right, REG_A);

    var helper: uint16;
    if iop.width == 2 then
        helper := TOKEN_ASR16;
    else
        helper := TOKEN_ASR32;
    end if;
    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(helper), 0);

    flush_cached_values(REG_MASK);
end sub;

sub arch_gen_simple_wide(iop: [BEIop], token: uint16)
    do_3op_helper(iop);

    write_byte(0x20); # JSR abs
    write_address_iop(IOP_ADDRESS, find_bootstrap_symbol(token), 0);

    flush_cached_values(REG_MASK);
end sub;
