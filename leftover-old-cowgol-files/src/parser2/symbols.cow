# These occupy the same namespace as tokens.
#const LEX_TOP := 200;
#
#var lexical_stack: uint16[64];
#var lexical_stack_ptr: uint8 := 0;
#
#var current_subroutine_id: uint16;

sub where_am_i()
    if filename_id != 0 then
        show_identifier(filename_id);
    else
        print("?");
    end if;
    print_char(':');
    print_i16(line_no);
end sub;

sub halt()
    print(" at ");
    where_am_i();
    print_newline();
    exit(1);
end sub;

#sub lexical_push(value: uint16)
#    if lexical_stack_ptr == lexical_stack@size then
#        print("lexical stack overflow");
#        halt();
#    end if;
#
#    lexical_stack[lexical_stack_ptr] := value;
#    lexical_stack_ptr := lexical_stack_ptr + 1;
#end sub;
#
#sub lexical_pop(): (value: uint16)
#    if lexical_stack_ptr == 0 then
#        print("lexical stack underflow");
#        halt();
#    end if;
#
#    lexical_stack_ptr := lexical_stack_ptr - 1;
#    value := lexical_stack[lexical_stack_ptr];
#end sub;
#
#sub lexical_push32(value: uint32)
#    var buf: uint16[2];
#    var ptr: [uint32] := &buf[0] as [uint32];
#    ptr[0] := value;
#    lexical_push(buf[0]);
#    lexical_push(buf[1]);
#end sub;
#
#sub lexical_pop32(): (value: uint32)
#    var buf: uint16[2];
#    var ptr: [uint32] := &buf[0] as [uint32];
#    buf[1] := lexical_pop();
#    buf[0] := lexical_pop();
#    value := ptr[0];
#end sub;
#
#sub lexical_peek(): (value: uint16)
#    value := lexical_stack[lexical_stack_ptr - 1];
#end sub;
#
#sub lexical_pop_scope_type(scopetype: uint16)
#    if lexical_pop() != scopetype then
#        print("mismatched lexical scope terminator");
#        halt();
#    end if;
#end sub;
#