sub AllocLabel(): (label: LabelRef) is
	label := next_label_id;
	next_label_id := next_label_id + 1;
end sub;

sub AllocSubrId(): (id: uint16) is
	id := next_subr_id;
	next_subr_id := next_subr_id + 1;
end sub;

include "arch.coh";

sub PrintNodes(rootnode: [Node]) is
	var old_next_node := next_node;
	PushNode(rootnode);
	while next_node != old_next_node loop
		var node := NextNode();
		if node == (0 as [Node]) then
			break;
		end if;

		print_hex_i32(node as intptr as uint32);
		print_char(' ');
		print_i8(node.op);
		print_char(' ');
		print_hex_i16(node.desired_reg as uint16);
		print_char(' ');
		print_hex_i16(node.produced_reg as uint16);
		print_char(' ');
		print_hex_i32(node.left as intptr as uint32);
		print_char(' ');
		print_hex_i32(node.right as intptr as uint32);
		print_nl();
	end loop;
end sub;

sub ReallyGenerate(rootnode: [Node]) is
	Discard(rootnode);
end sub;

var old_op: uint8 := 0;
sub Generate(statement: [Node]) is
	var op := statement.op;
	if (old_op == MIDCODE_JUMP) or (old_op == MIDCODE_RETURN) then
		if (op != MIDCODE_LABEL) and (op != MIDCODE_ENDSUB) then
			Discard(statement);
			return;
		end if;
	end if;

	if (op == MIDCODE_ASMSTART) and (old_op != MIDCODE_ASMEND) then
		ReallyGenerate(MidAsmgroupstart());
	end if;
	if (old_op == MIDCODE_ASMEND) and (op != MIDCODE_ASMSTART) then
		ReallyGenerate(MidAsmgroupend());
	end if;
	old_op := op;
	ReallyGenerate(statement);
end sub;

sub GenerateConditional(rootnode: [Node]) is
	var old_next_node := next_node;
	PushNode(rootnode);
	while next_node != old_next_node loop
		var node := PopNode();

		var t := node.beq0.truelabel;
		var f := node.beq0.falselabel;
		var r := node.beq0.fallthrough;
		var lhs := node.left;
		var rhs := node.right;
		var op := node.op;

		sub push_and_free() is
			rhs.beq0.truelabel := t;
			rhs.beq0.falselabel := f;
			rhs.beq0.fallthrough := r;

			node.left := (0 as [Node]);
			node.right := (0 as [Node]);
			PushNode(rhs);
			PushNode(lhs);
			Discard(node);
		end sub;

		var rr: LabelRef;
		case op is
			when MIDCODE_BOR:
				rr := AllocLabel();

				lhs.beq0.truelabel := t;
				lhs.beq0.falselabel := rr;
				lhs.beq0.fallthrough := rr;

				push_and_free();

			when MIDCODE_BAND:
				rr := AllocLabel();

				lhs.beq0.truelabel := rr;
				lhs.beq0.falselabel := f;
				lhs.beq0.fallthrough := rr;

				push_and_free();

			when else:
				if (op >= MIDCODE_BEQ0) and (op <= MIDCODE_BLTU8) then
					if node.beq0.negated != 0 then
						node.beq0.truelabel := f;
						node.beq0.falselabel := t;
						node.beq0.negated := 0;
					end if;
				end if;

				Generate(node);
				Generate(MidLabel(r));
		end case;
	end loop;
end sub;

