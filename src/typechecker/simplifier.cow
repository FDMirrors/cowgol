sub collapse_constant_op(beiop: int8, left: int32, right: int32): (result: int32)
    if beiop == IOP_BE_ADD then                                  result := left + right;
    elseif beiop == IOP_BE_SUB then                              result := left - right;
    elseif beiop == IOP_BE_MUL then                              result := left * right;
    elseif (beiop == IOP_BE_DIVU) or (beiop == IOP_BE_DIVS) then result := left / right;
    elseif (beiop == IOP_BE_MODU) or (beiop == IOP_BE_MODS) then result := left % right;
    elseif beiop == IOP_BE_AND then                              result := left & right;
    elseif beiop == IOP_BE_OR then                               result := left | right;
    elseif beiop == IOP_BE_EOR then                              result := left ^ right;
    elseif beiop == IOP_BE_NEG then                              result := 0-left;
    elseif beiop == IOP_BE_LSL then                              result := left << right;
    elseif beiop == IOP_BE_LSR then                              result := left >> right;
    elseif beiop == IOP_BE_ASR then
        var lefts: int32 := left;
        result := lefts >> right;
    else
        print("can't collapse 0x");
        print_hex_i8(beiop);
        halt();
    end if;
    print("* constant collapse: 0x");
    print_hex_i8(beiop);
    print(" left=");
    print_i32(left);
    print(" right=");
    print_i32(right);
    print(" result=");
    print_i32(result);
    print_newline();
end sub;

sub simplify_node_to_var(src: [Node]): (dest: [Node])
    if (src.iop == IOP_FEX_PUSH)
        and (src.left.type == EA_OBJVAL)
        and (src.left.varoff_id == 0)
        and (src.left.numoff_id == 0)
    then
        dest := src;
        ref_node(dest);
        return;
    end if;

    dest := alloc_node();
    dest.iop := IOP_FEX_PUSH;
    dest.flags := FLAG_RVALUE;
    dest.left.type := EA_OBJVAL;
    dest.type_id := src.type_id;

    if (is_number_thing(src.left.obj_id) != 0) and
        (((src.iop & IOP_TYPE_MASK) == IOP_TYPE_BACKEND_2OP) or
            (is_number_thing(src.right.obj_id) != 0))
    then
        dest.left.obj_id := add_number_by_value(
            collapse_constant_op(
                src.iop,
                get_value_of_number(src.left.obj_id),
                get_value_of_number(src.right.obj_id)
            )
        );
        return;
    end if;

    if src.type_id == constant_type then
        print("unresolved numeric type");
        halt();
    end if;

    dest.left.obj_id := alloc_temporary(dest.type_id);
    arch_simplify_node_to(src, dest);
end sub;

sub simplify_node_to_ea(src: [Node]): (dest: [Node])
    if src.iop == IOP_FEX_PUSH then
        dest := src;
        ref_node(dest);
        return;
    end if;

    dest := simplify_node_to_var(src);
end sub;

sub simplify_node_to_var_and_deref(src: [Node]): (dest: [Node])
    dest := simplify_node_to_var(src);
    deref_node(src);
end sub;

sub simplify_node_to_ea_and_deref(src: [Node]): (dest: [Node])
    dest := simplify_node_to_ea(src);
    deref_node(src);
end sub;
