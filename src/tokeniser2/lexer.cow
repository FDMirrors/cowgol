var tokenbuffer: uint8[256];
var tokenbufferlen: uint8;
var current_token_start: uint8;
var current_token_end: uint8;
var current_state: uint8;
var start_state: uint8 := 1;

sub lexer_reset()
	current_state := start_state;
	current_token_start := 0;
	current_token_end := 0;
	tokenbufferlen := 0;
end sub;

sub perform_action(action: uint8)
	print("action: ");
	print_i8(action);

	print(" buffer <");
	var i: uint8 := current_token_start;
	while i != current_token_end loop
		print_char(tokenbuffer[i] as int8);
		i := i + 1;
	end loop;
	print(">\n");
end sub;

sub lex_single_character(c: uint8)
	var ec: uint8 := yy_ec[c];

	var basestate: uint16;
	loop
		basestate := yy_base[current_state] + (ec as uint16);
		if yy_chk[basestate] == current_state then
			break;
		end if;

		current_state := yy_def[current_state];
		if current_state > YY_ACCEPTING_STATE then
			ec := yy_meta[ec];
		end if;
	end loop;

	current_state := yy_nxt[basestate];
end sub;

sub lexer_consume_char(c: uint8)
	tokenbuffer[current_token_end] := c;
	tokenbufferlen := current_token_end + 1;

	loop
		var last_accepting_state: uint8;
		var last_accepting_pos: uint8;

		loop
			if current_token_end == tokenbufferlen then
				return;
			end if;

			if yy_accept[current_state] != 0 then
				last_accepting_state := current_state;
				last_accepting_pos := current_token_end;
			end if;

			lex_single_character(tokenbuffer[current_token_end]);

			if current_state == YY_ACCEPTING_STATE then
				break;
			end if;
			current_token_end := current_token_end + 1;
		end loop;

		current_state := last_accepting_state;
		var action: uint8 := yy_accept[current_state];

		perform_action(action);

		var p: uint8 := 0;
		var i: uint8 := last_accepting_pos;
		while i != tokenbufferlen loop
			tokenbuffer[p] := tokenbuffer[i];
			p := p + 1;
			i := i + 1;
		end loop;
		current_token_end := current_token_end - last_accepting_pos;
		tokenbufferlen := tokenbufferlen - last_accepting_pos;
		current_token_start := 0;
		current_state := start_state;
	end loop;
end sub;

