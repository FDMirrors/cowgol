%{
	var uint32_type: [Symbol];
	var int32_type: [Symbol];
	var uint16_type: [Symbol];
	var int16_type: [Symbol];
	var uint8_type: [Symbol];
	var int8_type: [Symbol];
	var intptr_type: [Symbol];

	sub ArchAlignUp(value: Arith, alignment: uint8): (newvalue: Arith)
		newvalue := value;
	end sub;

	sub ArchGuessIntType(min: Arith, max: Arith): (symbol: [Symbol])
		if (min >= 0) and (max <= 255) then
			symbol := uint8_type;
		elseif (min >= -128) and (max <= 127) then
			symbol := int8_type;
		elseif (min >= 0) and (max <= 65535) then
			symbol := uint16_type;
		elseif (min >= -32768) and (max <= 32767) then
			symbol := int16_type;
		elseif (min >= 0) then
			symbol := uint32_type;
		else
			symbol := int32_type;
		end if;
	end sub;

	sub ArchInitVariable(symbol: [Symbol])
		var subr := symbol.vardata.subr;
		var offset := subr.workspace[0];
		symbol.vardata.offset := offset as uint32;
		subr.workspace[0] := offset + symbol.vardata.type.typedata.width;
	end sub;

	sub E_label(labelid: uint16)
		EmitString("x");
		EmitUint16(labelid);
	end sub;

	sub E_subref(subr: [Subroutine])
		if subr.externname != (0 as string) then
			EmitString(subr.externname);
		else
			EmitString("f");
			EmitUint16(subr.id);
		end if;
	end sub;
%}

register a b d h hl de bc;
register stk4 param;

regdata a compatible a|b|d|h;
regdata b uses bc compatible a|b|d|h;
regdata d uses de compatible a|b|d|h;
regdata h uses hl compatible a|b|d|h;
regdata bc uses bc compatible bc|de|hl;
regdata de uses de compatible bc|de|hl;
regdata hl uses hl compatible bc|de|hl;
regdata stk4 stacked;
regdata param stacked;

gen STARTFILE()
{
	print("STARTFILE\n");
}

gen ENDFILE();

gen STARTSUB():s
{
	EmitterPushChunk();
	EmitHex16($s.subr.id);

	EmitString("\tcseg\n");
	E_subref($s.subr);
	EmitString(":\n");
}

gen ENDSUB():s
{
	EmitString("end_");
	E_subref($s.subr);
	EmitString(":\n");
	EmitString("\tret\n");
	EmitString("\tdseg\nw");
	E_subref($s.subr);
	EmitString(": ds ");
	EmitUint16($s.subr.workspace[0]);
	EmitString("\n");
	EmitterPopChunk('S');
}

gen RETURN()
{
	EmitString("\tjmp end_");
	E_subref(current_subr);
	EmitString("\n");
}
