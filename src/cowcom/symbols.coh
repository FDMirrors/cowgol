sub InitVariable(symbol: [Symbol], type: [Symbol])
	CheckNotPartialType(type);
	symbol.vardata.type := type;
	symbol.vardata.subr := current_subr;
	ArchInitVariable(symbol);
	#print("var ");
	#print(symbol.name);
	#print(" at ");
	#print(current_subr.name);
	#print(" 0x");
	#print_hex_i16(symbol.vardata.offset as uint16);
	#print("+");
	#print_hex_i16(symbol.vardata.type.typedata.width as uint16);
	#print_nl();
end sub;

sub MakePointerType(type: [Symbol]): (ptrtype: [Symbol])
	ptrtype := type.typedata.pointerto;
	if ptrtype == (0 as [Symbol]) then
		ptrtype := AddSymbol(0 as [Namespace], 0 as string);
		ptrtype.name := StrDupBraced(type.name);
		ptrtype.kind := TYPE;
		ptrtype.typedata.kind := TYPE_POINTER;
		ptrtype.typedata.width := intptr_type.typedata.width;
		ptrtype.typedata.alignment := intptr_type.typedata.alignment;
		ptrtype.typedata.stride := intptr_type.typedata.stride;
		ptrtype.typedata.pointertype.element := type;
		type.typedata.pointerto := ptrtype;
	end if;
end sub;

sub MakeArrayType(type: [Symbol], size: Size): (arraytype: [Symbol])
	CheckNotPartialType(type);

	arraytype := AddSymbol(0 as [Namespace], 0 as string);
	arraytype.name := StrDupArrayed(type.name, size);
	arraytype.kind := TYPE;
	arraytype.typedata.kind := TYPE_ARRAY;
	var w: Size := 0;
	if size > 0 then
		w := type.typedata.stride * (size - 1) + type.typedata.width;
	end if;
	arraytype.typedata.width := w;
	arraytype.typedata.alignment := type.typedata.alignment;
	arraytype.typedata.stride := type.typedata.stride * size;
	arraytype.typedata.arraytype.element := type;
	arraytype.typedata.arraytype.size := size;
	arraytype.typedata.arraytype.indextype := ArchGuessIntType(0, (size-1) as Arith);
end sub;


