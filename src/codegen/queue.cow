var queue_array: BiggestIop[8]; # power of two
var queue0: [Iop];
var queue1: [Iop];
var queue2: [Iop];
var queue3: [Iop];
var queue_read_pos: uint8; # current place to read
var queue_write_pos: uint8; # next place to write
var run_out_of_iops: uint8;

$if DEBUG
    sub print_queue()
        print("queue: w");
        print_i8(queue_write_pos);
        print(" ");

        var i: uint8 := queue_read_pos;
        loop
            print(" (");
            print_i8(i);
            print(")0x");
            print_hex_i8(queue_array[i].iop_kind);
            i := (i+1) & (queue_array@size - 1);
            if i == queue_write_pos then
                break;
            end if;
        end loop;
    end sub;
$endif

sub queue_item(n: uint8): (iop: [Iop])
    iop := (&queue_array[(queue_read_pos + n) & (queue_array@size - 1)]) as [Iop];
end sub;

sub fill_queue()
    while queue_write_pos != queue_read_pos loop
        var target: [Iop] := &queue_array[queue_write_pos] as [Iop];

        if run_out_of_iops == 1 then
            target.iop_kind := IOP_END;
            target.iop_size := Iop@bytes;
        else
            var iop: [Iop] := read_iop();
            copy_iop(iop, target);
            if target.iop_kind == IOP_END then
                run_out_of_iops := 1;
            end if;
        end if;

        queue_write_pos := (queue_write_pos + 1) & (queue_array@size - 1);
    end loop;
end sub;

sub consume_iops(count: uint8)
    queue_read_pos := (queue_read_pos + 1) & (queue_array@size - 1);
    queue0 := queue_item(0);
    queue1 := queue_item(1);
    queue2 := queue_item(2);
    queue3 := queue_item(3);
end sub;

sub init_queue()
    run_out_of_iops := 0;
    queue_read_pos := 0;
    queue_write_pos := 1;
    fill_queue();
    consume_iops(1);
end sub;
