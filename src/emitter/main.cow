sub do_bytes(iop: [BytesIop])
    file_putblock(outfd, &iop.bytes[0] as [int8], iop.byte_count);
end sub;

sub do_address(iop: [AddressIop])
    var thing: [DataThing] := find_thing(iop.thing_id) as [DataThing];
    var address: uint16 := arch_calculate_address(thing);
    address := address + iop.offset;
    file_putblock(outfd, &address as [int8], address@bytes);
end sub;

sub emit_subroutine()
    file_seek(outfd, current_subroutine.address);

    loop
        var iop: [Iop] := read_iop();
        var iopkind: uint8 := iop.iop_kind;

        if iopkind == IOP_END then
            break;
        elseif iopkind == IOP_BYTES then
            do_bytes(iop as [BytesIop]);
        elseif iopkind == IOP_ADDRESS then
            do_address(iop as [AddressIop]);
        else
            arch_emit_iop(iop);
        end if;
    end loop;
end sub;

sub process()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        current_subroutine_id := iheader.thing_id;
        current_subroutine := find_thing(current_subroutine_id) as [SubroutineThing];
        if current_subroutine.segment <= SEGMENT_OMIT then
            print("bad subroutine segment");
            halt();
        else
            current_subroutine.segment := SEGMENT_CODE;
            emit_subroutine();
        end if;
    end loop;
end sub;

process();
file_close(outfd);
