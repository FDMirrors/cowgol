sub setup_insn(ea: [EffectiveAddress], offset: uint8, location: uint8)
    insn_init_from_ea(ea);
    if insn.mode == MODE_IMMLO then
        insn.mode := insn.mode + (offset as uint8);
    else
        insn.offset := insn.offset + (offset as uint16);
        if insn.mode == MODE_IND then
            if insn.offset > 0xff then
                print("offset too big");
                halt();
            end if;

            find_or_load_fixed_int(insn.offset as uint8, REG_Y);
            insn.offset := 0;
            insn.indexreg := REG_Y;
            free_reg(REG_Y);
        end if;
    end if;
    insn.datareg := location;
end sub;
    
sub regular_alu_word_op(iop: [BEIop], opcode: uint8)
    $if DEBUG
        print("* GENERATE: aluop 0x");
        print_hex_i8(opcode);
        print(": ");
        print_ea(&iop.left);
        print(", ");
        print_ea(&iop.right);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    check_widec_ea(&iop.left);
    check_widec_ea(&iop.right);
    check_widec_ea(&iop.dest);

    var offset: uint8;

    sub iterate()
        setup_insn(&iop.left, offset, REG_A);
        insn_load_object();

        setup_insn(&iop.right, offset, REG_A);
        insn_alu_object(opcode);

        setup_insn(&iop.dest, offset, REG_A);
        insn_save_object();
    end sub;

    allocate_fixed_reg(REG_A);
    offset := 0;
    iterate();
    offset := 1;
    iterate();
    free_reg(REG_A);
end sub;

sub arch_gen_copy_word(iop: [BEIop])
    $if DEBUG
        print("* GENERATE: copy: ");
        print_ea(&iop.left);
        print(" => ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    check_widec_ea(&iop.left);
    check_widec_ea(&iop.dest);

    var offset: uint8;
    var candidates: uint8;
    if (iop.left.flags == EA_DEREF) or (iop.dest.flags == EA_DEREF) then
        candidates := REG_A;
    else
        candidates := REG_A|REG_X|REG_Y;
    end if;
    var location: uint8 := allocate_reg(candidates);

    sub iterate()
        setup_insn(&iop.left, offset, location);
        insn_load_object();

        setup_insn(&iop.dest, offset, location);
        insn_save_object();
    end sub;

    offset := 0;
    iterate();
    offset := 1;
    iterate();
    free_reg(location);
end sub;
