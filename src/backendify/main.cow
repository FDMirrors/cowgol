sub must_be_simplified(node: [Node])
    if node.iop != IOP_FEX_PUSH then
        print("operation on non-simplified node");
        halt();
    end if;
end sub;

sub alloc_ea_node(ea: [EffectiveAddress]): (node: [Node])
    node := alloc_node();
    node.iop := IOP_FEX_PUSH;
    node.type_id := ea.type_id;
    copy_ea_ref(ea, &node.left);
end sub;

sub alloc_const_node(number_id: uint16): (node: [Node])
    node := alloc_node();
    node.iop := IOP_FEX_PUSH;
    node.type_id := constant_type;
    node.left.type_id := constant_type;
    node.left.obj_id := number_id;
end sub;

sub alloc_smallint_node(value: int16): (node: [Node])
    node := alloc_const_node(add_number_by_value(value as int32));
end sub;

sub alloc_thing_node(thing_id: uint16): (node: [Node])
    node := alloc_node();
    node.iop := IOP_FEX_PUSH;
    node.type_id := get_type_of_thing(thing_id);
    node.left.type_id := node.type_id;
    node.left.obj_id := thing_id;
    ref_temporary(thing_id);
end sub;

# Use for size changes only; the type check is pretty sloppy.
sub gen_cast_and_deref(src: [Node], desttype: uint16): (dest: [Node])
    if (src.type_id != constant_type) and
        (get_width_of_type(src.type_id) != get_width_of_type(desttype)) then
        src := simplify_node_to_ea_and_deref(src);

        $if DEBUG
            print("* casting ");
            print_ea(&src.left);
            print(" to ");
            print_thing(desttype);
            print_newline();
        $endif

        dest := alloc_node();
        dest.iop := IOP_BE_ZEXT;
        dest.type_id := desttype;
        copy_ea_ref(&src.left, &dest.left);
        deref_node(src);
    else
        dest := src;
    end if;
end sub;

# Note: the type of the result is the type of the *left* parameter.
sub gen_operator_and_deref(beiop: uint8, left: [Node], right: [Node]): (dest: [Node])
    left := simplify_node_to_ea_and_deref(left);
    right := simplify_node_to_ea_and_deref(right);

    dest := alloc_node();
    dest.iop := beiop;
    dest.type_id := left.type_id;
    copy_ea_ref(&left.left, &dest.left);
    copy_ea_ref(&right.left, &dest.right);

    deref_node(left);
    deref_node(right);
end sub;

# Sloppy casts are done; only use for changing the width of a value.
sub var_to_pointer_compatible_var(invar_id: uint16): (outvar_id: uint16)
    var invar_type_id: uint16 := get_type_of_thing(invar_id);
    if get_width_of_type(invar_type_id) == 2 then
        outvar_id := invar_id;
        ref_temporary(outvar_id);
    else
        $if DEBUG
            print("* zextending varoff ");
            print_thing(invar_id);
            print_newline();
        $endif

        var node: [Node] := alloc_thing_node(invar_id);
        node.iop := IOP_BE_ZEXT;
        node.type_id := uint16_type;
        node := simplify_node_to_var_and_deref(node);
        outvar_id := node.left.obj_id;

        $if DEBUG
            print("* extended varoff is ");
            print_thing(outvar_id);
            print_newline();
        $endif

        ref_temporary(outvar_id);
        deref_node(node);
    end if;
end sub;

sub process_subroutine()
    var subroutine: [SubroutineThing] := find_thing(current_subroutine_id) as [SubroutineThing];
    init_tree();
    init_temporaries();
    current_namespace_id := subroutine.namespace_id;

    sub special_address(iop: [AddressIop])
        write_iop(iop as [Iop]);
    end sub;

    sub fex_push(iop: [FEPushIop])
        var thing: [Thing] := find_thing(iop.thing_id);
        var node: [Node] := push_empty_node();

        node.iop := IOP_FEX_PUSH;
        node.type_id := iop.type_id;
        node.left.type_id := iop.type_id;
        node.left.obj_id := iop.thing_id;
        if thing.thing_type == THING_STRING then
            node.left.flags := EA_LEA;
        end if;
    end sub;

    sub fex_swap()
        var n1: [Node] := pop();
        var n2: [Node] := pop();
        push_node(n1);
        push_node(n2);
    end sub;

    sub fex_assign()
        var src: [Node] := pop();
        var dest: [Node] := simplify_node_to_ea_and_deref(pop());

        dest := simplify_node_to_ea_and_deref(dest);
        src := simplify_constants_and_deref(src);
        arch_simplify_node_to(src, dest);
        deref_node(src);
        deref_node(dest);
    end sub;

    sub fe_simple_alu2op(iop: [FETypedIop], beiop: uint8)
        var right: [Node] := simplify_node_to_ea_and_deref(pop());
        var left: [Node] := simplify_node_to_ea_and_deref(pop());

        var node: [Node] := push_empty_node();
        node.type_id := iop.type_id;
        node.iop := beiop;
        copy_ea_ref(&left.left, &node.left);
        copy_ea_ref(&right.left, &node.right);

        deref_node(right);
        deref_node(left);
    end sub;

    sub fe_simple_alu1op(iop: [FETypedIop], beiop: uint8)
        var left: [Node] := simplify_node_to_ea_and_deref(pop());

        left.iop := beiop;
        left.type_id := iop.type_id;
        push_node(left);
    end sub;

    sub fe_index(iop: [FETypedIop])
        var right: [Node] := simplify_node_to_ea_and_deref(pop());
        var left: [Node] := simplify_node_to_ea_and_deref(pop());

        var left_type: [WithElementsThing] := find_thing(left.type_id) as [WithElementsThing];
        var right_type: [TypeThing] := find_thing(right.type_id) as [TypeThing];
        var element_type: [TypeThing] := find_thing(left_type.element_type_id) as [TypeThing];

        var needs_wide_offsets: uint8 := 0;
        if left_type.thing_type == THING_POINTERT then
            # Ensure that any additional offset is applied to the *contents* of the pointer, and
            # not the *location* of the pointer.
            left := simplify_node_to_var_and_deref(left);
            left.left.flags := EA_DEREF;
            left.left.type_id := left_type.element_type_id;
            needs_wide_offsets := 1;
        else
            if (left_type.width > 255) then
                needs_wide_offsets := 1;
            end if;
        end if;

        var node: [Node] := push_empty_node();
        node.iop := IOP_FEX_PUSH;
        node.type_id := iop.type_id;

        $if DEBUG
            print("* left has ea ");
            print_ea(&left.left);
            print_newline();
            print("* right has ea ");
            print_ea(&right.left);
            print_newline();
        $endif

        copy_ea_ref(&left.left, &node.left);
        node.left.type_id := left_type.element_type_id;

        $if DEBUG
            print("* result base has ea ");
            print_ea(&node.left);
            print_newline();
        $endif

        if element_type.width != 1 then
            $if DEBUG
                print("* multiplying by 0x");
                print_hex_i16(element_type.width);
                print_newline();
            $endif

            if needs_wide_offsets != 0 then
                $if DEBUG
                    print("* promoting index ");
                    print_ea(&right.left);
                    print(" to uint16\n");
                $endif
                right := gen_cast_and_deref(right, uint16_type);
            end if;
            right := gen_operator_and_deref(IOP_BE_MUL, right,
                alloc_smallint_node(element_type.width as int16));
        end if;
        if right.type_id == constant_type then
            $if DEBUG
                print("* offset is constant\n");
            $endif

            if node.left.numoff_id != 0 then
                $if DEBUG
                    print("* adding right to existing constant offset ");
                    print_thing(node.left.numoff_id);
                    print_newline();
                $endif

                right := gen_operator_and_deref(IOP_BE_ADD, alloc_const_node(node.left.numoff_id), right);
            end if;
            right := simplify_node_to_ea_and_deref(right);
            node.left.numoff_id := right.left.obj_id;
        else
            $if DEBUG
                print("* offset is variable\n");
            $endif

            if node.left.varoff_id != 0 then
                $if DEBUG
                    print("* adding right to existing variable offset ");
                    print_thing(node.left.varoff_id);
                    print_newline();
                $endif

                var offsetnode: [Node] := alloc_thing_node(node.left.varoff_id);
                if needs_wide_offsets != 0 then
                    $if DEBUG
                        print("* promoting variable offset ");
                        print_thing(node.left.varoff_id);
                        print(" to uint16\n");
                    $endif
                    offsetnode := gen_cast_and_deref(offsetnode, uint16_type);
                end if;
                right := gen_operator_and_deref(IOP_BE_ADD, offsetnode, right);
                deref_temporary(node.left.varoff_id);
            end if;
            right := simplify_node_to_var_and_deref(right);
            ref_temporary(right.left.obj_id);
            node.left.varoff_id := right.left.obj_id;
        end if;
        deref_node(right);
        deref_node(left);
    end sub;

    sub fe_addressof(iop: [FETypedIop])
        var node: [Node] := simplify_node_to_ea_and_deref(pop());

        node.type_id := iop.type_id;
        node.left.type_id := node.type_id;
        if node.left.flags == EA_DEREF then
            node.left.flags := EA_VALUE;

            # Ensure that any offset is applied to the value of the pointer, and not the pointer
            # itself.
            var numoff_id: uint16 := node.left.numoff_id;
            var varoff_id: uint16 := node.left.varoff_id;
            node.left.numoff_id := 0;
            node.left.varoff_id := 0;
            if varoff_id != 0 then
                node := gen_operator_and_deref(IOP_BE_ADD, node, alloc_thing_node(varoff_id));
            end if;
            if numoff_id != 0 then
                node := gen_operator_and_deref(IOP_BE_ADD, node, alloc_const_node(numoff_id));
            end if;
        elseif node.left.flags == EA_VALUE then
            node.left.flags := EA_LEA;
            if node.left.varoff_id != 0 then
                var newvaroff_id: uint16 := var_to_pointer_compatible_var(node.left.varoff_id);
                deref_temporary(node.left.varoff_id);
                node.left.varoff_id := newvaroff_id;
            end if;
        else
            print("addressof with LEA");
            halt();
        end if;

        push_node(node);
    end sub;

    sub fex_memberof(iop: [FEMemberIop])
        var node: [Node] := simplify_node_to_ea_and_deref(pop());
        var node_type: [TypeThing] := find_thing(node.type_id) as [TypeThing];

        var type_id: uint16 := node.type_id;
        var type_thing: [Thing] := find_thing(type_id);

        if type_thing.thing_type == THING_POINTERT then
            # Ensure that any additional offset is applied to the *contents* of the pointer, and
            # not the *location* of the pointer.
            node := simplify_node_to_var_and_deref(node);
            node.left.flags := EA_DEREF;
        end if;
        var record_type: [RecordThing] := type_thing as [RecordThing];

        var member: [MemberThing] := find_thing(iop.thing_id) as [MemberThing];
        var member_type_thing: [Thing] := find_thing(member.type_id);

        node.left.type_id := member.type_id;
        node.type_id := member.type_id;
        node.left.numoff_id := add_number_by_value(
            get_value_of_number(node.left.numoff_id) +
                (member.offset as int32));

        push_node(node);
    end sub;

    sub fe_materialise(iop: [FETypedIop])
        var src: [Node] := pop();

        var dest: [Node] := push_empty_node();
        dest.iop := IOP_FEX_PUSH;
        dest.type_id := iop.type_id;
        dest.left.obj_id := alloc_temporary(src.type_id);
        dest.left.type_id := dest.type_id;

        arch_simplify_node_to(src, dest);
        deref_node(src);
    end sub;

    sub fe_conditional(iopkind: uint8, iop: [FEConditionalIop])
        var right: [Node] := simplify_node_to_ea_and_deref(pop());
        $if DEBUG
            print("* conditional right is ");
            print_ea(&right.left);
            print_newline();
        $endif

        var left: [Node] := simplify_node_to_ea_and_deref(pop());
        $if DEBUG
            print("* conditional left is ");
            print_ea(&left.left);
            print_newline();
        $endif

        var beiop: BEConditionalIop;
        zero_memory(&beiop as [int8], BEConditionalIop@bytes);
        beiop.iop_size := BEConditionalIop@bytes;
        beiop.iop_kind := iopkind;
        beiop.width := get_width_of_type(left.type_id) as uint8;
        beiop.iftrue_label := iop.iftrue_label;
        beiop.iffalse_label := iop.iffalse_label;
        copy_ea_ref(&left.left, &beiop.left);
        copy_ea_ref(&right.left, &beiop.right);

        arch_simplify_conditional_iop(&beiop);

        deref_temporary(beiop.left.obj_id);
        deref_temporary(beiop.left.varoff_id);
        deref_temporary(beiop.right.obj_id);
        deref_temporary(beiop.right.varoff_id);
        deref_node(left);
        deref_node(right);
    end sub;

    sub fe_cast(iop: [FETypedIop])
        var node: [Node] := simplify_node_to_ea_and_deref(pop());

        node.type_id := iop.type_id;
        push_node(node);
    end sub;

    sub fe_shift(iop: [FETypedIop], beiop: uint8)
        var right: [Node] := simplify_node_to_ea_and_deref(pop());
        var left: [Node] := simplify_node_to_ea_and_deref(pop());

        var node: [Node] := push_empty_node();
        node.iop := beiop;
        copy_ea_ref(&left.left, &node.left);
        copy_ea_ref(&right.left, &node.right);
        node.type_id := iop.type_id;

        deref_node(left);
        deref_node(right);
    end sub;

    sub fe_call(iop: [CallIop])
        write_iop(iop as [Iop]);
    end sub;

    sub fex_drop()
        deref_node(pop());
    end sub;
    
    loop
        var iop: [Iop] := read_iop();
        var ioptype: uint8 := iop.iop_kind & IOP_TYPE_MASK;
        $if DEBUG
            print_newline();
            print_stack();
            print("* read iop 0x");
            print_hex_i8(iop.iop_kind);
            print_newline();
        $endif

        var kind: uint8 := iop.iop_kind;
        if kind == IOP_END then
            break;
        elseif kind == IOP_CALL then
            fe_call(iop as [CallIop]);
        elseif (kind == IOP_ADDRESS)
            or (kind == IOP_ADDRESSLO)
            or (kind == IOP_ADDRESSHI)
        then
            special_address(iop as [AddressIop]);
        elseif ioptype == IOP_TYPE_UNTYPED then
            write_iop(iop);
        elseif kind == IOP_FEX_SWAP then
            fex_swap();
        elseif kind == IOP_FEX_PUSH then
            fex_push(iop as [FEPushIop]);
        elseif kind == IOP_FEX_ASSIGN then
            fex_assign();
        elseif kind == IOP_FE_ADD then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_ADD);
        elseif kind == IOP_FE_SUB then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_SUB);
        elseif kind == IOP_FE_MUL then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_MUL);
        elseif kind == IOP_FE_AND then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_AND);
        elseif kind == IOP_FE_OR then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_OR);
        elseif kind == IOP_FE_EOR then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_EOR);
        elseif kind == IOP_FE_DIVS then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_DIVS);
        elseif kind == IOP_FE_DIVU then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_DIVU);
        elseif kind == IOP_FE_MODS then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_MODS);
        elseif kind == IOP_FE_MODU then
            fe_simple_alu2op(iop as [FETypedIop], IOP_BE_MODU);
        elseif kind == IOP_FE_NEG then
            fe_simple_alu1op(iop as [FETypedIop], IOP_BE_NEG);
        elseif kind == IOP_FE_NOT then
            fe_simple_alu1op(iop as [FETypedIop], IOP_BE_NOT);
        elseif kind == IOP_FE_SEXT then
            fe_simple_alu1op(iop as [FETypedIop], IOP_BE_SEXT);
        elseif kind == IOP_FE_ZEXT then
            fe_simple_alu1op(iop as [FETypedIop], IOP_BE_ZEXT);
        elseif (kind == IOP_FE_LSHIFT) then
            fe_shift(iop as [FETypedIop], IOP_BE_LSL);
        elseif (kind == IOP_FE_RSHIFTS) then
            fe_shift(iop as [FETypedIop], IOP_BE_ASR);
        elseif (kind == IOP_FE_RSHIFTU) then
            fe_shift(iop as [FETypedIop], IOP_BE_LSR);
        elseif kind == IOP_FE_INDEX then
            fe_index(iop as [FETypedIop]);
        elseif kind == IOP_FE_MATERIALISE then
            fe_materialise(iop as [FETypedIop]);
        elseif kind == IOP_FE_ADDRESSOF then
            fe_addressof(iop as [FETypedIop]);
        elseif kind == IOP_FEX_MEMBEROF then
            fex_memberof(iop as [FEMemberIop]);
        elseif kind == IOP_FEX_BEQ then
            fe_conditional(IOP_BE_BEQ, iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BGTS then
            fe_conditional(IOP_BE_BGTS, iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BGTU then
            fe_conditional(IOP_BE_BGTU, iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BLTS then
            fe_conditional(IOP_BE_BLTS, iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BLTU then
            fe_conditional(IOP_BE_BLTU, iop as [FEConditionalIop]);
        elseif kind == IOP_FE_CAST then
            fe_cast(iop as [FETypedIop]);
        elseif kind == IOP_FEX_DROP then
            fex_drop();
        else
            print("unsupported iop 0x");
            print_hex_i8(kind);
            halt();
        end if;
    end loop;
    write_untyped_iop(IOP_END);
end sub;

sub process()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        current_subroutine_id := iheader.thing_id;

        $if DEBUG
            print("\n******* SUBROUTINE ");
            print_thing(current_subroutine_id);
            print_newline();
            print_newline();
        $endif

        write_iop_header(iheader);
        process_subroutine();
    end loop;
    write_terminating_iop_header();
end sub;

process();
