
sub apply_rules()
    if global_rules() == 1 then
        return;
    else
        print("unmatched iops: ");
        print_queue();
        halt();
    end if;
end sub;


sub skip_subroutine()
    init_queue();
    loop
        fill_queue();
        print_queue(); print_newline();

        if queue0.iop_kind == IOP_END then
            break;
        end if;

        consume_iops(1);
    end loop;
end sub;

sub process_subroutine()
    var subroutine: [SubroutineThing] := find_thing(current_subroutine_id) as [SubroutineThing];
    current_namespace_id := subroutine.namespace_id;
    print("subroutine: 0x");
    print_hex_i16(current_subroutine_id);
    print_char(' ');
    show_name_of(current_subroutine_id);
    print_newline();

    init_queue();
    arch_init_codegen();

    loop
        fill_queue();
        print_queue(); print_newline();

        if queue0.iop_kind == IOP_END then
            break;
        end if;

        apply_rules();
    end loop;
    write_untyped_iop(IOP_END);
end sub;

sub process()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        current_subroutine_id := iheader.thing_id;
        var subroutine: [SubroutineThing] := find_thing(current_subroutine_id) as [SubroutineThing];
        if subroutine.segment == SEGMENT_OMIT then
            skip_subroutine();
        else
            write_iop_header(iheader);
            process_subroutine();
        end if;
    end loop;
    write_terminating_iop_header();
end sub;

process();
save_thing_table("things.dat");

