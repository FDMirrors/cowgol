
sub do_label(iop: [LabelIop])
    labels[iop.label] := pc;
end sub;

sub pass12()
    sub do_bytes(iop: [BytesIop])
        pc := pc + iop.byte_count;
    end sub;

    pc := 0;
    loop
        var iop: [Iop] := read_iop();
        var iopkind: uint8 := iop.iop_kind;

        if iopkind == IOP_END then
            break;
        elseif iopkind == IOP_BYTES then
            do_bytes(iop as [BytesIop]);
        elseif iopkind == IOP_ADDRESS then
            pc := pc + 2;
        elseif iopkind == IOP_LABEL then
            do_label(iop as [LabelIop]);
        else
            pc := pc + arch_calculate_iop_size(iop);
        end if;
    end loop;
end sub;

sub pass3()
    sub do_bytes(iop: [BytesIop])
        write_iop(iop as [Iop]);
        pc := pc + iop.byte_count;
    end sub;

    pc := 0;
    loop
        var iop: [Iop] := read_iop();
        var iopkind: uint8 := iop.iop_kind;

        if iopkind == IOP_END then
            break;
        elseif iopkind == IOP_BYTES then
            do_bytes(iop as [BytesIop]);
        elseif iopkind == IOP_ADDRESS then
            write_iop(iop);
            pc := pc + 2;
        elseif iopkind == IOP_LABEL then
            do_label(iop as [LabelIop]);
        else
            pc := pc + arch_generate_iop(iop);
        end if;
    end loop;

    root.code_size := root.code_size + pc;
    write_untyped_iop(IOP_END);
end sub;

sub process()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        current_subroutine_id := iheader.thing_id;
        current_subroutine := find_thing(current_subroutine_id) as [SubroutineThing];
        if current_subroutine.segment <= SEGMENT_OMIT then
            print("bad subroutine segment");
            halt();
        else
            write_iop_header(iheader);

            current_subroutine.segment := SEGMENT_CODE;
            current_subroutine.address := root.code_size;
            zero_memory(labels as [int8], 2 * current_subroutine.label_count);

            var pos: uint32 := file_tell(iop_in_fd);
            pass := 1;
            pass12();
            file_seek(iop_in_fd, pos);
            pass := 2;
            pass12();
            file_seek(iop_in_fd, pos);
            pass := 3;
            pass3();
        end if;
    end loop;
    write_terminating_iop_header();
end sub;

process();
save_thing_table("things.dat");
