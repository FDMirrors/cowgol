load_thing_table("things.dat");

sub show_identifier_thing(thing: [Thing])
    var len: uint8 := thing.thing_size - 2;
    print("identifier: ");
    var i: uint8 := 0;
    while i < len loop
        print_char(thing.payload[i]);
        i := i + 1;
    end loop;
end sub;

sub show_string_thing(thing: [Thing])
    var len: uint8 := thing.thing_size - 2;
    print("string: \"");
    var i: uint8 := 0;
    while i < len loop
        var c: int8 := thing.payload[i];
        if (c < 32) | (c > 126) then
            print("\\x");
            print_hex_i8(c);
        else
            print_char(c);
        end if;
        i := i + 1;
    end loop;
    print_char('"');
end sub;

sub show_number_thing(thing: [Thing])
    print("number: 0x");
    var ptr: [uint32] := &thing.payload[0] as [uint32];
    print_hex_i32(ptr[0]);
end sub;

sub show_namespace_thing(thing: [NamespaceThing])
    print("namespace: previous_namespace=0x");
    print_hex_i16(thing.previous_namespace);
    print(" first_symbol=0x");
    print_hex_i16(thing.first_symbol);
end sub;

sub show_symbol_thing(thing: [SymbolThing])
    print("symbol(name=0x");
    print_hex_i16(thing.name);
    print(" next_symbol=0x");
    print_hex_i16(thing.next_symbol);
    print(") ");
end sub;

sub show_data_thing(thing: [DataThing])
    show_symbol_thing(thing as [SymbolThing]);
    print("data(section=");
    print_i8(thing.section);
    print(") ");
end sub;

sub show_typed_thing(thing: [TypedThing])
    show_data_thing(thing as [DataThing]);
    print("typed(type=0x");
    print_hex_i16(thing.type);
    print(") ");
end sub;

sub show_subroutine_thing(thing: [SubroutineThing])
    show_data_thing(thing as [DataThing]);
    print("subroutine(namespace=0x");
    print_hex_i16(thing.namespace);
    print(" iop_start=0x");
    print_hex_i32(thing.iop_start);
    print(" iop_length=0x");
    print_hex_i32(thing.iop_length);
    print(") ");
end sub;

sub show_label_thing(thing: [LabelThing])
    show_data_thing(thing as [DataThing]);
end sub;

sub show_type_thing(thing: [TypeThing])
    show_symbol_thing(thing as [SymbolThing]);
    print("type(width=");
    print_i8(thing.width);
    print(") ");
end sub;

sub show_variable_thing(thing: [VariableThing])
    show_typed_thing(thing as [TypedThing]);
    print("variable ");
end sub;

sub show_parameter_thing(thing: [ParameterThing])
    show_variable_thing(thing as [VariableThing]);
    print("parameter(inout=");
    print_i8(thing.inout);
    print(") ");
end sub;

sub show_numeric_thing(kind: [int8], thing: [NumericThing])
    show_type_thing(thing as [TypeThing]);
    print(kind);
end sub;

var id: uint16 := 1;
loop
    var thing: [Thing] := &thing_table[id] as [Thing];
    if thing.thing_size == 0 then
        break;
    end if;
    print_hex_i16(id);
    print(": ");

    var type: uint8 := thing.thing_type;
    if type == THING_IDENTIFIER then
        show_identifier_thing(thing);
    elseif type == THING_NUMBER then
        show_number_thing(thing);
    elseif type == THING_STRING then
        show_string_thing(thing);
    elseif type == THING_NAMESPACE then
        show_namespace_thing(thing as [NamespaceThing]);
    elseif type == THING_SUBROUTINE then
        show_subroutine_thing(thing as [SubroutineThing]);
    elseif type == THING_LABEL then
        show_label_thing(thing as [LabelThing]);
    elseif type == THING_SIGNED then
        show_numeric_thing("signed_type", thing as [NumericThing]);
    elseif type == THING_UNSIGNED then
        show_numeric_thing("unsigned_type", thing as [NumericThing]);
    elseif type == THING_VARIABLE then
        show_variable_thing(thing as [VariableThing]);
    elseif type == THING_PARAMETER then
        show_parameter_thing(thing as [ParameterThing]);
    else
        print("unknown type ");
        print_i8(type);
    end if;
    print_newline();

    id := id + thing.thing_size;
end loop;
print("thing table size: ");
print_i16(thing_table_top);
print_newline();
