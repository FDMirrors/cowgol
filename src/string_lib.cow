sub copy_string(src: [int8], dest: [int8])
    var i: uint8 := 0;
    loop
        var c: int8 := src[i];
        dest[i] := c;
        if c == 0 then
            break;
        end if;
        i := i + 1;
    end loop;
end sub;

sub copy_memory(src: [int8], dest: [int8], length: uint16)
    while length > 0 loop
        length := length - 1;
        dest[length] := src[length];
    end loop;
end sub;

sub compare_strings(left: [int8], right: [int8], out result: int8)
    var i: uint8 := 0;
    loop
        var c1: int8 := left[i];
        var c2: int8 := right[i];
        result := c1 - c2;
        if result != 0 then
            return;
        end if;
        if (c1 == 0) and (c2 == 0) then
            return;
        end if;

        i := i + 1;
    end loop;
end sub;

sub compare_memory(left: [int8], right: [int8], length: uint8, out result: int8)
    while length > 0 loop
        length := length - 1;
        result := left[length] - right[length];
        if result != 0 then
            return;
        end if;
    end loop;
    result := 0;
end sub;

sub zero_memory(ptr: [int8], length: uint8)
    while length > 0 loop
        length := length - 1;
        ptr[length] := 0;
    end loop;
end sub;

sub string_length(src: [int8], out length: int8)
    length := 0;
    while src[length] != 0 loop
        length := length + 1;
    end loop;
end sub;
