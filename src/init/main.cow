var current_namespace_id: uint16;
var current_subroutine_id: uint16;

sub create_main_namespace()
    current_namespace_id := create_thing(THING_NAMESPACE, NamespaceThing@bytes);
    var namespace_thing: [NamespaceThing] := find_thing(current_namespace_id) as [NamespaceThing];
end sub;

sub create_main_subroutine()
    current_subroutine_id := create_thing(THING_SUBROUTINE, SubroutineThing@bytes);
    var subroutine: [SubroutineThing] := find_thing(current_subroutine_id) as [SubroutineThing];
    subroutine.namespace_id := current_namespace_id;
end sub;

sub add_symbol(identifier_id: uint16, value_id: uint16)
    var symbol_id: uint16 := create_thing(THING_SYMBOL, SymbolThing@bytes);
    var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
    var namespace_thing: [NamespaceThing] := find_thing(current_namespace_id) as [NamespaceThing];

    symbol.next_symbol := namespace_thing.first_symbol;
    namespace_thing.first_symbol := symbol_id;
    symbol.name_id := identifier_id;
    symbol.value_id := value_id;
end sub;

sub create_bootstrap_type(identifier_id: uint16): (type_thing: [NumericThing])
    var type_id: uint16 := create_thing(THING_CONSTANTT, NumericThing@bytes);
    add_symbol(identifier_id, type_id);
    type_thing := find_thing(type_id) as [NumericThing];
end sub;

sub init_types()
    var type_thing: [NumericThing];
    type_thing := create_bootstrap_type(TOKEN_INT8);
    type_thing.thing_type := THING_SIGNEDT;
    type_thing.width := 1;

    type_thing := create_bootstrap_type(TOKEN_UINT8);
    type_thing.thing_type := THING_UNSIGNEDT;
    type_thing.width := 1;

    type_thing := create_bootstrap_type(TOKEN_INT16);
    type_thing.thing_type := THING_SIGNEDT;
    type_thing.width := 2;

    type_thing := create_bootstrap_type(TOKEN_UINT16);
    type_thing.thing_type := THING_UNSIGNEDT;
    type_thing.width := 2;

    type_thing := create_bootstrap_type(TOKEN_INT32);
    type_thing.thing_type := THING_SIGNEDT;
    type_thing.width := 4;

    type_thing := create_bootstrap_type(TOKEN_UINT32);
    type_thing.thing_type := THING_UNSIGNEDT;
    type_thing.width := 4;

    type_thing := create_bootstrap_type(TOKEN_CONSTANTT);
    type_thing.thing_type := THING_CONSTANTT;
    type_thing.width := 0;
end sub;

sub write_iops_file()
    print("writing empty iops file\n");
    var fcb: FCB;
    if fcb_openout(&fcb, iops_dat) != 0 then
        print("failed to open output file\n");
        exit(1);
    end if;

    fcb_seek(&fcb, 4);

    var iheader: IHeader;
    iheader.thing_id := current_subroutine_id;
    fcb.address := &iheader as [int8];
    fcb.count := iheader@bytes;
    fcb_write(&fcb);

    var iop: Iop;
    iop.iop_size := Iop@bytes;
    iop.iop_kind := IOP_RETURN;
    fcb.address := &iop as [int8];
    fcb.count := Iop@bytes;
    fcb_write(&fcb);

    iop.iop_kind := IOP_END;
    fcb.address := &iop as [int8];
    fcb.count := Iop@bytes;
    fcb_write(&fcb);
    
    iheader.thing_id := 0;
    fcb.address := &iheader as [int8];
    fcb.count := iheader@bytes;
    fcb_write(&fcb);

    var pos: uint32 := fcb_tell(&fcb);
    fcb_seek(&fcb, 0);
    fcb.address := &pos as [int8];
    fcb.count := pos@bytes;
    fcb_write(&fcb);
    
    fcb_close(&fcb);
end sub;

install_root_thing();
install_identifiers();

create_main_namespace();
create_main_subroutine();
root.main_subroutine_id := current_subroutine_id;

init_types();

if ARGC == 4 then
    things_dat := ARGV[1];
    strings_dat := ARGV[2];
    iops_dat := ARGV[3];
end if;

save_thing_table(things_dat);
save_string_table(strings_dat);
write_iops_file();
