sub WriteSubroutinesToOutputFile(coo: [Coo])
	var id: uint16;
	var subroutine: [Subroutine];
	var c: uint8;
	var length: Size;

	sub MalformedError(s: [uint8])
		print("error: malformed coofile: ");
		print(s);
		print_nl();
		ExitWithError();
	end sub;

	sub UnexpectedEndOfChunk()
		MalformedError("unexpected end of chunk");
	end sub;

	sub GetC()
		if length == 0 then
			MalformedError("chunk size inconsistent");
		end if;
		length := length - 1;
		c := getchar(&coo.fcb);
	end sub;

	sub PutC()
		pushchar(c);
		length := length + 1;
	end sub;

	sub ReadH2(): (result: uint8)
		if length < 2 then
			UnexpectedEndOfChunk();
		end if;
		length := length - 2;
		result := read_hex2(&coo.fcb);
	end sub;

	sub ReadH4(): (result: uint16)
		if length < 4 then
			UnexpectedEndOfChunk();
		end if;
		length := length - 4;
		result := read_hex4(&coo.fcb);
	end sub;

	sub CopySourceChunk()
		var subid: uint16;
		var subr: [Subroutine];
		var wid: uint8;
		var off: Size;

		while length != 0 loop
			GetC();
			case c is
				when COO_ESCAPE_THISCOO:
					EmitByte('c');
					E_h8(coo.id as uint8);
					EmitByte('_');

				when COO_ESCAPE_THISSUB:
					ArchEmitSubRef(subroutine.id);

				when COO_ESCAPE_SUBREF:
					subid := ReadH4();
					subr := FindOrCreateSub(coo, subid);
					subr := Deref(subr);
					ArchEmitSubRef(subr.id);

				when COO_ESCAPE_WSREF:
					subid := ReadH4();
					wid := ReadH2();
					off := ReadH4();
					subr := FindOrCreateSub(coo, subid);
					subr := Deref(subr);
					ArchEmitWSRef(wid, subr.workspaceAddress[wid] + off);

				when COO_ESCAPE_WSSIZE:
					subid := ReadH4();
					wid := ReadH2();
					subr := FindOrCreateSub(coo, subid);
					subr := Deref(subr);
					ArchEmitWSRef(wid, subr.workspaceSize[wid]);

				when else:
					EmitByte(c);
			end case;
		end loop;
	end sub;

	FCBSeek(&coo.fcb, 0);
	loop
		length := 255; # no length limit here
		GetC();
		length := ReadH4();
		var next := FCBPos(&coo.fcb) + (length as uint32);
		if c == 'E' then
			break;
		elseif c == 'S' then
			id := ReadH4();
			subroutine := FindOrCreateSub(coo, id);
			subroutine := Deref(subroutine);
			if (subroutine.state & SUB_USED) != 0 then
				CopySourceChunk();
			end if;
		end if;
		FCBSeek(&coo.fcb, next);
	end loop;
end sub;

sub WriteAllSubroutinesToOutputFile(coos: [Coo])
	while coos != (0 as [Coo]) loop
		WriteSubroutinesToOutputFile(coos);
		coos := coos.next;
	end loop;
end sub;

