# These occupy the same namespace as tokens.
const LEX_TOP := 200;

var lexical_stack: uint16[32];
var lexical_stack_ptr: uint8 := 0;

var current_namespace_id: uint16;
var current_subroutine_id: uint16;

sub halt()
    print(" at ");
    if filename_id != 0 then
        show_identifier(filename_id);
    else
        print("?");
    end if;
    print_char(':');
    print_i16(line_no);
    print_newline();
    exit(1);
end sub;

sub lexical_push(value: uint16)
    if lexical_stack_ptr == lexical_stack@size then
        print("lexical stack overflow");
        halt();
    end if;

    lexical_stack[lexical_stack_ptr] := value;
    lexical_stack_ptr := lexical_stack_ptr + 1;
end sub;

sub lexical_pop(out value: uint16)
    if lexical_stack_ptr == 0 then
        print("lexical stack underflow");
        halt();
    end if;

    lexical_stack_ptr := lexical_stack_ptr - 1;
    value := lexical_stack[lexical_stack_ptr];
end sub;

sub lexical_push32(value: uint32)
    var buf: uint16[2];
    var ptr: [uint32] := &buf[0] as [uint32];
    ptr[0] := value;
    lexical_push(buf[0]);
    lexical_push(buf[1]);
end sub;

sub lexical_pop32(out value: uint32)
    var buf: uint16[2];
    var ptr: [uint32] := &buf[0] as [uint32];
    buf[1] := lexical_pop();
    buf[0] := lexical_pop();
    value := ptr[0];
end sub;

sub lexical_peek(out value: uint16)
    value := lexical_stack[lexical_stack_ptr - 1];
end sub;

sub lexical_pop_scope_type(type: uint16)
    if lexical_pop() != type then
        print("mismatched lexical scope terminator");
        halt();
    end if;
end sub;

sub find_symbol_in_namespace(identifier_id: uint16, namespace_id: uint16, out symbol_id: uint16)
    var namespace: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];
    symbol_id := namespace.first_symbol;

    while symbol_id != 0 loop
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        if symbol.name_id == identifier_id then
            return;
        end if;
        symbol_id := symbol.next_symbol;
    end loop;

    symbol_id := 0;
end sub;

sub find_symbol(identifier_id: uint16, out symbol_id: uint16)
    var namespace_id: uint16 := current_namespace_id;

    while namespace_id != 0 loop
        symbol_id := find_symbol_in_namespace(identifier_id, namespace_id);
        if symbol_id != 0 then
            return;
        end if;

        var namespace: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];
        namespace_id := namespace.previous_namespace;
    end loop;

    print("symbol ");
    show_identifier(identifier_id);
    print(" not found in any scope");
    halt();
end sub;

sub deref_symbol(identifier_id: uint16, out value_id: uint16)
    var symbol_id: uint16 := find_symbol(identifier_id);
    var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
    value_id := symbol.value_id;
end sub;

sub add_symbol(identifier_id: uint16, value_id: uint16, namespace_id: uint16)
    if find_symbol_in_namespace(identifier_id, namespace_id) != 0 then
        print("symbol ");
        show_identifier(identifier_id);
        print(" is already defined in this namespace");
        halt();
    end if;

    var symbol_id: uint16 := create_thing(THING_SYMBOL, SymbolThing@bytes);
    var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
    var namespace: [NamespaceThing] := find_thing(namespace_id) as [NamespaceThing];

    symbol.next_symbol := namespace.first_symbol;
    namespace.first_symbol := symbol_id;
    symbol.name_id := identifier_id;
    symbol.value_id := value_id;
end sub;

