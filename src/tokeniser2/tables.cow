var yy_accept: uint8[174] := {0, 0, 0, 0, 0, 73, 71, 70, 69, 69, 71, 53, 71, 2, 3, 71, 4, 5, 6, 7, 8, 9, 10, 67, 67, 11, 13, 14, 71, 18, 71, 52, 21, 22, 23, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 24, 25, 26, 27, 61, 60, 58, 72, 70, 69, 1, 0, 68, 68, 0, 0, 67, 67, 0, 0, 0, 12, 15, 16, 17, 19, 20, 0, 0, 0, 52, 52, 33, 52, 52, 52, 52, 52, 41, 52, 52, 52, 45, 52, 52, 52, 52, 52, 61, 59, 57, 54, 55, 59, 62, 0, 62, 64, 65, 66, 0, 0, 0, 0, 32, 52, 52, 52, 39, 52, 52, 52, 44, 52, 52, 48, 52, 50, 52, 0, 63, 0, 0, 0, 0, 52, 52, 52, 37, 40, 42, 52, 52, 52, 49, 52, 56, 0, 0, 0, 31, 34, 35, 52, 52, 52, 52, 52, 51, 28, 29, 0, 52, 38, 52, 46, 47, 0, 52, 52, 30, 36, 52, 43, 0, };
var yy_ec: uint8[256] := {0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 6, 7, 1, 8, 9, 10, 11, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22, 23, 24, 25, 26, 1, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 31, 32, 33, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 29, 44, 45, 46, 47, 48, 49, 29, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };
var yy_meta: uint8[63] := {0, 1, 1, 2, 3, 1, 3, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 5, 6, 1, 3, 1, 1, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, };
var yy_base: uint8[184] := {0, 0, 0, 60, 64, 254, 255, 251, 255, 249, 226, 255, 68, 255, 255, 219, 255, 255, 255, 255, 55, 255, 255, 60, 64, 224, 255, 62, 223, 63, 54, 0, 255, 255, 255, 18, 197, 198, 47, 197, 204, 195, 58, 192, 202, 187, 197, 203, 195, 255, 255, 255, 255, 0, 255, 255, 71, 234, 255, 255, 95, 255, 232, 224, 223, 92, 101, 107, 114, 0, 255, 255, 255, 255, 255, 255, 175, 184, 61, 0, 192, 0, 190, 181, 176, 188, 173, 0, 176, 177, 170, 0, 77, 185, 181, 169, 175, 0, 255, 255, 255, 255, 0, 255, 207, 206, 120, 125, 0, 163, 176, 172, 154, 0, 176, 85, 171, 0, 161, 159, 168, 0, 158, 152, 0, 157, 0, 158, 0, 255, 163, 162, 154, 160, 154, 145, 153, 152, 0, 0, 143, 143, 142, 0, 152, 255, 139, 133, 143, 255, 0, 0, 129, 131, 121, 126, 100, 0, 255, 255, 99, 89, 0, 106, 0, 0, 79, 76, 72, 255, 0, 68, 0, 255, 148, 154, 160, 162, 168, 174, 180, 183, 98, 96, };
var yy_def: uint8[184] := {0, 173, 1, 174, 174, 173, 173, 173, 173, 173, 173, 173, 175, 173, 173, 176, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 177, 173, 173, 173, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 173, 173, 173, 173, 178, 173, 173, 179, 173, 173, 173, 175, 173, 173, 173, 180, 173, 173, 173, 173, 181, 173, 173, 173, 173, 173, 173, 173, 173, 173, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 178, 173, 173, 173, 173, 182, 173, 173, 173, 173, 173, 181, 173, 173, 173, 173, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 183, 173, 173, 173, 173, 173, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 173, 173, 173, 173, 173, 177, 177, 177, 177, 177, 177, 177, 177, 173, 173, 173, 177, 177, 177, 177, 177, 173, 177, 177, 173, 177, 177, 177, 0, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, };
var yy_nxt: uint8[318] := {0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 6, 33, 34, 6, 35, 36, 37, 31, 38, 31, 39, 31, 40, 31, 41, 31, 42, 43, 31, 44, 45, 46, 31, 47, 48, 31, 31, 31, 49, 50, 51, 52, 54, 54, 80, 55, 54, 54, 81, 55, 61, 62, 65, 66, 66, 66, 99, 66, 66, 66, 66, 66, 66, 66, 66, 71, 72, 74, 75, 76, 56, 84, 89, 85, 56, 67, 77, 61, 62, 111, 145, 99, 128, 112, 78, 90, 172, 68, 171, 66, 66, 66, 66, 122, 170, 69, 106, 100, 66, 66, 66, 66, 101, 107, 106, 106, 102, 67, 123, 106, 169, 107, 107, 107, 107, 135, 136, 106, 106, 68, 168, 167, 107, 107, 107, 166, 165, 69, 53, 53, 53, 53, 53, 53, 60, 60, 60, 60, 60, 60, 63, 63, 63, 164, 63, 63, 79, 79, 97, 163, 162, 97, 97, 97, 98, 161, 98, 98, 98, 98, 104, 160, 104, 104, 104, 104, 108, 108, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 144, 143, 142, 141, 140, 139, 138, 137, 134, 133, 132, 131, 130, 129, 129, 127, 126, 125, 124, 121, 120, 119, 118, 117, 116, 115, 114, 113, 110, 109, 105, 103, 61, 57, 96, 95, 94, 93, 92, 91, 88, 87, 86, 83, 82, 73, 70, 64, 59, 58, 57, 173, 5, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, };
var yy_chk: uint8[318] := {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 35, 3, 4, 4, 35, 4, 12, 12, 20, 20, 20, 20, 56, 23, 23, 23, 23, 24, 24, 24, 24, 27, 27, 29, 29, 30, 3, 38, 42, 38, 4, 23, 30, 60, 60, 78, 183, 56, 182, 78, 30, 42, 171, 23, 168, 65, 65, 65, 65, 92, 167, 23, 67, 56, 66, 66, 66, 66, 56, 68, 67, 67, 56, 65, 92, 106, 166, 68, 68, 68, 107, 115, 115, 106, 106, 65, 163, 161, 107, 107, 107, 160, 156, 65, 174, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 176, 176, 176, 155, 176, 176, 177, 177, 178, 154, 153, 178, 178, 178, 179, 152, 179, 179, 179, 179, 180, 148, 180, 180, 180, 180, 181, 181, 147, 146, 144, 142, 141, 140, 137, 136, 135, 134, 133, 132, 131, 130, 127, 125, 123, 122, 120, 119, 118, 116, 114, 112, 111, 110, 109, 105, 104, 96, 95, 94, 93, 90, 89, 88, 86, 85, 84, 83, 82, 80, 77, 76, 64, 63, 62, 57, 48, 47, 46, 45, 44, 43, 41, 40, 39, 37, 36, 28, 25, 15, 10, 9, 7, 5, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, };
const STATE_INITIAL := 1;
const STATE_STRING := 3;
const YY_ACCEPTING_STATE := 173;
sub perform_action(action: uint8)
if action == 1 then
 emit_token(TOKEN_NEOP); 
return;
end if;
if action == 2 then
 emit_token(TOKEN_PERCENT); 
return;
end if;
if action == 3 then
 emit_token(TOKEN_AMPERSAND); 
return;
end if;
if action == 4 then
 emit_token(TOKEN_OPENPAREN); 
return;
end if;
if action == 5 then
 emit_token(TOKEN_STAR); 
return;
end if;
if action == 6 then
 emit_token(TOKEN_PLUS); 
return;
end if;
if action == 7 then
 emit_token(TOKEN_COMMA); 
return;
end if;
if action == 8 then
 emit_token(TOKEN_MINUS); 
return;
end if;
if action == 9 then
 emit_token(TOKEN_DOT); 
return;
end if;
if action == 10 then
 emit_token(TOKEN_SLASH); 
return;
end if;
if action == 11 then
 emit_token(TOKEN_COLON); 
return;
end if;
if action == 12 then
 emit_token(TOKEN_ASSIGN); 
return;
end if;
if action == 13 then
 emit_token(TOKEN_SEMICOLON); 
return;
end if;
if action == 14 then
 emit_token(TOKEN_LTOP); 
return;
end if;
if action == 15 then
 emit_token(TOKEN_LEFTSHIFT); 
return;
end if;
if action == 16 then
 emit_token(TOKEN_LEOP); 
return;
end if;
if action == 17 then
 emit_token(TOKEN_EQOP); 
return;
end if;
if action == 18 then
 emit_token(TOKEN_GTOP); 
return;
end if;
if action == 19 then
 emit_token(TOKEN_GEOP); 
return;
end if;
if action == 20 then
 emit_token(TOKEN_RIGHTSHIFT); 
return;
end if;
if action == 21 then
 emit_token(TOKEN_OPENSQUARE); 
return;
end if;
if action == 22 then
 emit_token(TOKEN_CLOSESQUARE); 
return;
end if;
if action == 23 then
 emit_token(TOKEN_CARET); 
return;
end if;
if action == 24 then
 emit_token(TOKEN_OPENBRACE); 
return;
end if;
if action == 25 then
 emit_token(TOKEN_PIPE); 
return;
end if;
if action == 26 then
 emit_token(TOKEN_CLOSEBRACE); 
return;
end if;
if action == 27 then
 emit_token(TOKEN_TILDE); 
return;
end if;
if action == 28 then
 emit_token(TOKEN_BYTES); 
return;
end if;
if action == 29 then
 emit_token(TOKEN_INDEX); 
return;
end if;
if action == 30 then
 emit_token(TOKEN_SEGMENT); 
return;
end if;
if action == 31 then
 emit_token(TOKEN_SIZE); 
return;
end if;
if action == 32 then
 emit_token(TOKEN_AND); 
return;
end if;
if action == 33 then
 emit_token(TOKEN_AS); 
return;
end if;
if action == 34 then
 emit_token(TOKEN_BREAK); 
return;
end if;
if action == 35 then
 emit_token(TOKEN_CONST); 
return;
end if;
if action == 36 then
 emit_token(TOKEN_CONTINUE); 
return;
end if;
if action == 37 then
 emit_token(TOKEN_ELSE); 
return;
end if;
if action == 38 then
 emit_token(TOKEN_ELSEIF); 
return;
end if;
if action == 39 then
 emit_token(TOKEN_END); 
return;
end if;
if action == 40 then
 emit_token(TOKEN_GOTO); 
return;
end if;
if action == 41 then
 emit_token(TOKEN_IF); 
return;
end if;
if action == 42 then
 emit_token(TOKEN_LOOP); 
return;
end if;
if action == 43 then
 emit_token(TOKEN_NAMESPACE); 
return;
end if;
if action == 44 then
 emit_token(TOKEN_NOT); 
return;
end if;
if action == 45 then
 emit_token(TOKEN_OR); 
return;
end if;
if action == 46 then
 emit_token(TOKEN_RECORD); 
return;
end if;
if action == 47 then
 emit_token(TOKEN_RETURN); 
return;
end if;
if action == 48 then
 emit_token(TOKEN_SUB); 
return;
end if;
if action == 49 then
 emit_token(TOKEN_THEN); 
return;
end if;
if action == 50 then
 emit_token(TOKEN_VAR); 
return;
end if;
if action == 51 then
 emit_token(TOKEN_WHILE); 
return;
end if;
if action == 52 then
 emit_identifier(); 
return;
end if;
if action == 53 then
 start_state := STATE_STRING; print("start string\n"); 
return;
end if;
if action == 58 then
 start_state := STATE_INITIAL; print("end string\n"); 
return;
end if;
if action == 59 then
 # bogus escape 
return;
end if;
if action == 60 then
 # newline in string 
return;
end if;
if action == 61 then
 # append text 
return;
end if;
if action == 64 then
 emit_number(2, 2); 
return;
end if;
if action == 65 then
 emit_number(8, 2); 
return;
end if;
if action == 66 then
 emit_number(16, 2); 
return;
end if;
if action == 67 then
 emit_number(10, 0); 
return;
end if;
if action == 68 then
 current_line := current_line + 1; 
return;
end if;
if action == 71 then
 # bad char 
return;
end if;
end sub;
