const REG_A    := 0b0000_0001;
const REG_X    := 0b0000_0010;
const REG_Y    := 0b0000_0100;
const REG_MASK := 0b0111_1111;
const PRECIOUS := 0b1000_0000;

sub find_first_bit(value: uint8): (mask: uint8)
    mask := 1;
    loop
        if (value & mask) != 0 then
            return;
        end if;
        if mask == 0x80 then
            break;
        end if;
        mask := mask << 1;
    end loop;
    mask := 0;
end sub;

sub find_bit_index(value: uint8): (index: uint8)
    var mask: uint8 := 1;
    index := 0;
    loop
        if (value & mask) != 0 then
            return;
        end if;
        if mask == 0x80 then
            break;
        end if;
        mask := mask << 1;
        index := index + 1;
    end loop;
    print("bit not set");
    halt();
end sub;

sub bad_register()
    print("bad register");
    halt();
end sub;

var ld_imm_opcodes: uint8[3] := {
    0xA9, # LDA imm
    0xA2, # LDX imm
    0xA0 # LDY imm
};

var ld_abs_opcodes: uint8[3] := {
    0xAD, # LDA abs
    0xAE, # LDX abs
    0xAC # LDY abs
};

var ld_abs_x_opcodes: uint8[3] := {
    0xBD, # LDA abs, X
    0x00, # invalid
    0xBC # LDY abs, X
};

var ld_abs_y_opcodes: uint8[3] := {
    0xB9, # LDA abs, Y
    0xBE, # LDX abs, Y
    0x00 # invalid
};

var t_opcodes: uint8[9] := {
    0x00, # TAA
    0x8A, # TXA
    0x98, # TYA
    0xAA, # TAX
    0x00, # TXX
    0x00, # TYX
    0xA8, # TAY
    0x00, # TXY
    0x00, # TYY
};

sub t_reg_reg(src: uint8, dest: uint8)
	$if DEBUG
		print("@ t?? src=0x");
		print_hex_i8(src);
		print(" dest=0x");
		print_hex_i8(dest);
		print_newline();
	$endif

    src := find_bit_index(src);
    dest := find_bit_index(dest);
    if (src|dest) == 0 then
        bad_register();
    end if;

    var opcode: uint8 := t_opcodes[src + dest*3];
    if opcode == 0 then
        print("bad move");
        halt();
    end if;
    write_byte(opcode);
end sub;

sub convert_lea_ea_to_addressof(ea: [EffectiveAddress])
    if ea.flags == EA_LEA then
        var ptr_id: uint16 := add_addressof_by_value(ea.obj_id,
            get_value_of_number(ea.numoff_id) as uint16);
        var ptrthing: [AddressOfThing] := find_thing(ptr_id) as [AddressOfThing];
        ptrthing.segment := SEGMENT_CONST;
        ea.obj_id := ptr_id;
        ea.numoff_id := 0;
        ea.flags := EA_VALUE;
    end if;
end sub;
