sub global_rules(): (matched: uint8)
    matched := 1;
    var right: [EffectiveAddress] := peek_ea(-1);
    var left: [EffectiveAddress] := peek_ea(-2);

    sub push_thing()
        var iop: [ThingIop] := &queue[0] as [ThingIop];
        var thing: [TypedThing] := find_thing(iop.thing_id) as [TypedThing];
        var ea: [EffectiveAddress] := push_new_ea();

        ea.type_id := thing.type_id;
        var type: [TypeThing] := find_thing(ea.type_id) as [TypeThing];
        if thing.thing_type == THING_NUMBER then
            ea.flags := ea.flags | FLAG_NUMBER;
        elseif type.width == 1 then
            ea.flags := ea.flags | FLAG_WIDTH_1;
        elseif type.width == 2 then
            ea.flags := ea.flags | FLAG_WIDTH_2;
        elseif type.width == 4 then
            ea.flags := ea.flags | FLAG_WIDTH_4;
        else
            ea.flags := ea.flags | FLAG_WIDTH_BIG;
        end if;
        if type.thing_type == THING_SIGNED then
            ea.flags := ea.flags | FLAG_SIGNED;
        elseif type.thing_type == THING_POINTER then
            ea.flags := ea.flags | FLAG_POINTER;
        end if;

        if (thing.thing_type == THING_VARIABLE) or (thing.thing_type == THING_PARAMETER) then
            ea.type := EA_VAR_PLUS_CONST;
            ea.thing_id := iop.thing_id;
        elseif thing.thing_type == THING_NUMBER then
            ea.type := EA_NUMBER;
            ea.offset_id := iop.thing_id;
        else
            print("don't know how to push things of kind 0x");
            print_hex_i8(thing.thing_type);
            halt();
        end if;

        consume_iops(1);
    end sub;

    if queue[0].iop_kind == IOP_THING then
        push_thing();
        return;
    end if;

    # When assigning a generic number to something, promote the number to the same type as
    # the thing being assigned to.
    if queue[0].iop_kind == IOP_ASSIGN then
        var src: [EffectiveAddress] := peek_ea(-1);
        var dest: [EffectiveAddress] := peek_ea(-2);
        if ((src.flags & FLAG_NUMBER) != 0) then
            src.flags := dest.flags;
            return;
        end if;
    end if;

#    if queue[0].iop_kind == IOP_INDEXOP then
#        # Pointer plus variable?
#        if (left.type == EA_PTR_PLUS_CONST) and (right.type == EA_VAR_PLUS_CONST) then

    if queue[0].iop_kind == IOP_LOAD then
        if (right.type == EA_VAR_PLUS_CONST) and (get_value_of_number(right.offset_id) == 0) then
            right.type := EA_PTR_PLUS_CONST;
            consume_iops(1);
            return;
        end if;
    end if;

    if queue[0].iop_kind == IOP_SWAP then
        var temp: EffectiveAddress[1];
        copy_ea(left, &temp[0]);
        copy_ea(right, left);
        copy_ea(&temp[0], right);
        consume_iops(1);
        return;
    end if;

    if (queue[0].iop_kind == IOP_BYTES) or (queue[0].iop_kind == IOP_WORD) then
        write_iop(&queue[0] as [Iop]);
        consume_iops(1);
        return;
    end if;

    matched := 0;
end sub;
