typedef LabelRef := uint16;
typedef Arith := int32;
typedef Size := uint16;

record Token
	number @at(0): int32;
	string @at(0): string;
end record;

record Namespace
	first: [Symbol];
	last: [Symbol];
	parent: [Namespace];
end record;

record HasElementSymbol
	element: [Symbol];
end record;

record ArrayTypeSymbol: HasElementSymbol
	size: Size;
	indextype: [Symbol];
end record;

record PointerTypeSymbol: HasElementSymbol
end record;

record RecordTypeSymbol
	namespace: Namespace;
	members: uint8;
end record;

record NumberTypeSymbol
	is_signed: uint8;
end record;

const TYPE_PARTIAL := 1;
const TYPE_NUMBER := 2;
const TYPE_POINTER := 3;
const TYPE_ARRAY := 4;
const TYPE_RECORD := 5;

record TypeSymbol
	numbertype @at(0): NumberTypeSymbol;
	arraytype @at(0): ArrayTypeSymbol;
	pointertype @at(0): PointerTypeSymbol;
	recordtype @at(0): RecordTypeSymbol;

	pointerto: [Symbol];
	kind: uint8;
	alignment: uint8;
	width: Size;
	stride: Size;
end record;

record VarSymbol
	type: [Symbol];
	subr: [Subroutine]; # null for a member
	next_parameter: [Symbol]; # for lists of parameters
	externname: string;
	offset: Size;
end record;

record Symbol
	typedata @at(0): TypeSymbol;
	vardata @at(0): VarSymbol;
	constant @at(0): Arith;
	subr @at(0): [Subroutine];
	alias @at(0): [Symbol];

	kind: uint8;
	name: string;
	next: [Symbol];
end record;

record Subroutine
	name: string;
	externname: string;
	parent: [Subroutine];
	namespace: Namespace;
	first_input_parameter: [Symbol];
	first_output_parameter: [Symbol];
	id: uint16;
	workspace: Size[4];
	num_input_parameters: uint8;
	num_output_parameters: uint8;
	old_break_label: LabelRef;
	old_continue_label: LabelRef;
	old_call: [Subroutine];
end record;

record LoopLabels
	loop_label: LabelRef;
	exit_label: LabelRef;
	old_break_label: LabelRef;
	old_continue_label: LabelRef;
end record;
	
record IfLabels
	exit_label: LabelRef;
	true_label: LabelRef;
	false_label: LabelRef;
	next: [IfLabels];
end record;

record SubroutineCall
	subr: [Subroutine];
	parent: [SubroutineCall];
	input_parameter: [Symbol];
	output_parameter: [Symbol];
	num_input_args: uint8;
	num_output_args: uint8;
end record;

var current_subr: [Subroutine];
var next_label_id: LabelRef := 1;
var break_label: LabelRef;
var continue_label: LabelRef;
var current_if: [IfLabels];
var current_type: [Symbol];
var current_call: [SubroutineCall];

const REG_SAME_AS_INSTRUCTION_RESULT := -1;

