sub insn_before(iop: [BEIop])
    arch_gen_before(&iop.left);
    arch_gen_before(&iop.right);
    arch_gen_before(&iop.dest);
end sub;

sub insn_after(iop: [BEIop])
    arch_gen_after(&iop.dest);
end sub;

sub try_conditional(ciop: [BEConditionalIop], liop: [LabelIop])
    arch_gen_before(&ciop.left);
    arch_gen_before(&ciop.right);

    arch_gen_cmp(ciop, liop);
end sub;

sub global_rules(): (matched: uint8)
    matched := 1;
    arch_gen_beginning_of_instruction();

    var type: uint8 := queue0.iop_kind & IOP_TYPE_MASK;
    if (type == IOP_TYPE_BACKEND_2OP) or (type == IOP_TYPE_BACKEND_3OP) then
        insn_before(queue0 as [BEIop]);

        if queue0.iop_kind == IOP_BE_COPY then
            arch_gen_copy(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_NOT then
            arch_gen_not(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_AND then
            arch_gen_and(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_OR then
            arch_gen_or(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_EOR then
            arch_gen_eor(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_ADD then
            arch_gen_add(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_SUB then
            arch_gen_sub(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_LSL then
            arch_gen_lsl(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_LSR then
            arch_gen_lsr(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_ASR then
            arch_gen_asr(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_DIVU then
            arch_gen_divu(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_MODU then
            arch_gen_modu(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_MUL then
            arch_gen_mul(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_SEXT then
            arch_gen_sext(queue0 as [BEIop]);
        elseif queue0.iop_kind == IOP_BE_ZEXT then
            arch_gen_zext(queue0 as [BEIop]);
        else
            print("unsupported opcode 0x");
            print_hex_i8(queue0.iop_kind);
            halt();
        end if;

        insn_after(queue0 as [BEIop]);
        consume_iops(1);
        return;
    end if;

    if (queue0.iop_kind & IOP_TYPE_MASK) == IOP_TYPE_BACKEND_SPECIAL then
        if queue1.iop_kind != IOP_LABEL then
            print("conditionals must be followed by labels");
            halt();
        end if;

        try_conditional(queue0 as [BEConditionalIop], queue1 as [LabelIop]);

        # *Don't* consume the label; we want to generate it.
        consume_iops(1);
        return;
    end if;

    if queue0.iop_kind == IOP_RETURN then
        arch_gen_return();
        consume_iops(1);
        return;
    end if;

    if queue0.iop_kind == IOP_LABEL then
        arch_gen_label(queue0 as [LabelIop]);
        consume_iops(1);
        return;
    end if;

    if queue0.iop_kind == IOP_GOTO then
        arch_gen_goto(queue0 as [GotoIop]);
        consume_iops(1);
        return;
    end if;

    if queue0.iop_kind == IOP_CALL then
        arch_gen_call(queue0 as [CallIop]);
        consume_iops(1);
        return;
    end if;

    if (queue0.iop_kind == IOP_BYTES)
        or (queue0.iop_kind == IOP_ADDRESS)
        or (queue0.iop_kind == IOP_ADDRESSLO)
        or (queue0.iop_kind == IOP_ADDRESSHI)
    then
        write_iop(queue0);
        consume_iops(1);
        return;
    end if;

    matched := 0;
end sub;
