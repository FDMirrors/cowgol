sub read_type(): (type_id: int16)
    var brackets: int8 := 0;

    sub mismatched_square_brackets()
        print("mismatched square brackets in type");
        halt();
    end sub;

    while current_token == TOKEN_OPENSQUARE loop
        brackets := brackets + 1;
        next_token();
    end loop;

    var identifier_id: int16 := expect_identifier();
    type_id := deref_symbol_or_fail(identifier_id);

    loop
        var type: [TypeThing] := find_thing(type_id) as [TypeThing];
        if (type.thing_type & THING_TYPE) != THING_TYPE then
            print("identifier ");
            show_identifier(identifier_id);
            print(" does not refer to a type");
            halt();
        end if;

        if current_token == TOKEN_CLOSESQUARE then
            if brackets == 0 then
                mismatched_square_brackets();
            end if;
            brackets := brackets - 1;
            type_id := pointer_of(type_id);
            next_token();
        elseif current_token == TOKEN_OPENSQUARE then
            next_token();
            type_id := array_of(type_id, do_constant());
            expect_token(TOKEN_CLOSESQUARE);
        else
            break;
        end if;
    end loop;

    if brackets != 0 then
        mismatched_square_brackets();
    end if;
end sub;

