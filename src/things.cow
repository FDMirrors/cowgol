const THING_STRING     := 0b0000_0001;
const THING_IDENTIFIER := 0b0000_0010;
const THING_NUMBER     := 0b0000_0011;
const THING_NAMESPACE  := 0b0000_0100;
const THING_TOKEN      := 0b0000_0101;
const THING_SYMBOL     := 0b0000_0110;
const THING_LABEL      := 0b0000_0111;
const THING_LABELREF   := 0b0000_1000;
const THING_MEMBER     := 0b0000_1001;

const THING_DATA       := 0b1000_0000;
const THING_SUBROUTINE := 0b1000_0001;

const THING_TYPED      := 0b0100_0000;
const THING_VARIABLE   := 0b1100_0000;
const THING_PARAMETER  := 0b1100_0001;

const THING_TYPE       := 0b0010_0000;
const THING_RECORD     := 0b0010_0001;
const THING_POINTER    := 0b0010_0010;
const THING_ARRAY      := 0b0010_0011;
const THING_NUMERIC    := 0b0001_0000;
const THING_UNSIGNED   := 0b0011_0001;
const THING_SIGNED     := 0b0011_0010;

record Thing
    thing_size: uint8;
    thing_type: uint8;
    payload: int8[0];
end record;

record IdentifierThing: Thing
    string_id: uint16;
end record;

record StringThing: IdentifierThing
    string_size: uint8;
end record;

record TokenThing: IdentifierThing
    token_flags: uint8;
end record;

record NumberThing: Thing
    value: uint32;
end record;

record NamespaceThing: Thing
    previous_namespace: uint16;
    first_symbol: uint16;
end record;

record LabelThing: Thing
    target: uint16;
end record;

record MemberThing: Thing
    type_id: uint16;
    offset: uint16;
end record;

record SymbolThing: Thing
    name_id: uint16;
    value_id: uint16;
    next_symbol: uint16;
end record;

record TypeThing: Thing
    width: uint16;
end record;

record RecordThing: TypeThing
    superclass_id: uint16;
    namespace_id: uint16;
end record;

record NumericThing: TypeThing
end record;

record PointerThing: TypeThing
    element_id: uint16;
end record;

record ArrayThing: TypeThing
    element_id: uint16;
    element_count: uint16;
end record;

record DataThing: Thing
    label_id: uint16;
end record;

record SubroutineThing: DataThing
    namespace_id: uint16;
end record;

record TypedThing: DataThing
    type_id: uint16;
end record;

record VariableThing: TypedThing
end record;

record ParameterThing: VariableThing
    direction: uint8;
end record;

var thing_table: [int8] := LOMEM;
var thing_table_top: uint16 := 1;
thing_table[thing_table_top] := 0;

sub create_thing(type: uint8, size: uint8, out id: uint16)
    id := thing_table_top;
    var thing: [Thing] := &thing_table[id] as [Thing];
    zero_memory(thing as [int8], size + 1);
    thing.thing_size := size;
    thing.thing_type := type;
    thing_table_top := id + size;
end sub;

sub find_thing(id: uint16, out thing: [Thing])
    if id >= thing_table_top then
        print("thing id ");
        print_hex_i16(id);
        print(" out of bounds");
        print_newline();
        exit(1);
    end if;

    thing := &thing_table[id] as [Thing];
end sub;

sub find_thing_by_value(template: [Thing], out id: uint16)
    id := 1;
    loop
        var thing: [Thing] := &thing_table[id] as [Thing];
        if thing.thing_size == 0 then
            break;
        end if;
        if thing.thing_size == template.thing_size then
            if thing.thing_type == template.thing_type then
                if compare_memory(template as [int8], thing as [int8], thing.thing_size) == 0 then
                    return;
                end if;
            end if;
        end if;

        id := id + thing.thing_size;
    end loop;

    id := 0;
end sub;

sub add_thing(template: [Thing], out id: uint16)
    id := thing_table_top;
    copy_memory(template as [int8], &thing_table[id] as [int8], template.thing_size);
    thing_table_top := id + template.thing_size;
    thing_table[thing_table_top] := 0;
end sub;

sub add_thing_by_value(template: [Thing], out id: uint16)
    id := find_thing_by_value(template);
    if id == 0 then
        id := add_thing(template);
    end if;
end sub;

sub add_number_by_value(value: int32, out id: uint16)
    var buf: NumberThing[1];
    buf[0].thing_type := THING_NUMBER;
    buf[0].thing_size := NumberThing@bytes;
    buf[0].value := value;
    id := add_thing_by_value(&buf[0] as [Thing]);
end sub;

sub find_token_by_string(string_id: uint16, out id: uint16)
    id := 1;
    loop
        var thing: [IdentifierThing] := &thing_table[id] as [IdentifierThing];
        if thing.thing_size == 0 then
            break;
        elseif (thing.thing_type == THING_TOKEN) and (thing.string_id == string_id) then
            return;
        end if;
        id := id + thing.thing_size;
    end loop;

    id := 0;
end sub;

sub find_symbol_by_value(value_id: uint16, out symbol_id: uint16)
    symbol_id := 1;
    loop
        var thing: [SymbolThing] := &thing_table[symbol_id] as [SymbolThing];
        if thing.thing_size == 0 then
            break;
        end if;
        if (thing.thing_type == THING_SYMBOL) and (thing.value_id == value_id) then
            return;
        end if;

        symbol_id := symbol_id + thing.thing_size;
    end loop;
    symbol_id := 0;
end sub;

sub find_name_of_value(value_id: uint16, out identifier_id: uint16)
    var symbol_id: uint16 := find_symbol_by_value(value_id);
    if symbol_id != 0 then
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        identifier_id := symbol.name_id;
    else
        identifier_id := 0;
    end if;
end sub;

sub get_token_flags(token_id: uint16, out token_flags: uint8)
    var token: [TokenThing] := find_thing(token_id) as [TokenThing];
    if token.thing_type == THING_TOKEN then
        token_flags := token.token_flags;
    else
        token_flags := 0;
    end if;
end sub;

sub save_thing_table(filename: [int8])
    var fd: uint8 := file_openout(filename);
    file_putblock(fd, &thing_table[0], thing_table_top);
    file_close(fd);
end sub;

sub load_thing_table(filename: [int8])
    var fd: uint8 := file_openin(filename);
    thing_table_top := file_ext(fd);
    file_getblock(fd, &thing_table[0], thing_table_top);
    file_close(fd);
    thing_table[thing_table_top] := 0;
end sub;
