var tokenbuffer: uint8[256];
var tokenbufferpos: uint8;
var tokenbufferlen: uint8;
var current_state: uint8;

sub lexer_reset()
	current_state := 1;
	tokenbufferpos := 0;
	tokenbufferlen := 0;
end sub;

sub next_char(): (c: uint8)
	var cc: int8;
	var eof: uint8;
	(cc, eof) := file_getchar(current_fd);
	if eof != 0 then
		c := 0;
	else
		c := cc as uint8;
	end if;
end sub;
	
sub lexer()
	loop
		var c: uint8;
		if tokenbufferpos == tokenbufferlen then
			c := next_char();
			tokenbuffer[tokenbufferpos] := c;
			tokenbufferlen := tokenbufferpos + 1;
		else
			c := tokenbuffer[tokenbufferpos];
		end if;

		print("read char 0x");
		print_hex_i8(c);
		print_newline();

		var ec: uint8 := yy_ec[c];
		var last_accepting_state: uint8;
		var last_accepting_pos: uint8;

		if yy_accept[current_state] != 0 then
			print("beginning of token\n");
			last_accepting_state := current_state;
			last_accepting_pos := tokenbufferpos;
		end if;

		var basestate: uint16;
		loop
			basestate := yy_base[current_state] + (ec as uint16);
			if yy_chk[basestate] == current_state then
				break;
			end if;

			current_state := yy_def[current_state];
			if current_state > YY_ACCEPTING_STATE then
				ec := yy_meta[ec];
			end if;
		end loop;
		current_state := yy_nxt[basestate];

		print("new state 0x");
		print_hex_i8(current_state);
		print_newline();

		if current_state == YY_ACCEPTING_STATE then
			break;
		end if;
		tokenbufferpos := tokenbufferpos + 1;
	end loop;

	current_state := last_accepting_state;
	var action: uint8 := yy_accept[current_state];
	print("action: ");
	print_i8(action);
	print_newline();

	print("buffer <");
	var i: uint8 := last_accepting_pos;
	while i != tokenbufferlen loop
		print_char(tokenbuffer[i] as int8);
		i := i + 1;
	end loop;
	print(">\n");
#               yy_current_state = (yy_start);
#yy_match:
#                do
#                        {
#                        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
#                        if ( yy_accept[yy_current_state] )
#                                {
#                                (yy_last_accepting_state) = yy_current_state;
#                                (yy_last_accepting_cpos) = yy_cp;
#                                }
#                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
#                                {
#                                yy_current_state = (int) yy_def[yy_current_state];
#                                if ( yy_current_state >= 171 )
#                                        yy_c = yy_meta[(unsigned int) yy_c];
#                                }
#                        yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
#                        ++yy_cp;
#                        }
#                while ( yy_current_state != 170 );
#                yy_cp = (yy_last_accepting_cpos);
#                yy_current_state = (yy_last_accepting_state);
end sub;

