sub get_width_of(node: [Node]): (width: uint8)
    var type: [TypeThing] := find_thing(node.type_id) as [TypeThing];
    width := type.width;
end sub;

sub write_be_iop(iop: [BEIop])
    print("* BE iop 0x");
    print_hex_i8(iop.iop_kind);
    print(" width=");
    print_i8(iop.width);
    print(" left=");
    print_ea(&iop.left);
    print(" right=");
    print_ea(&iop.right);
    print(" dest=");
    print_ea(&iop.dest);
    print_newline();
    write_iop(iop as [Iop]);
end sub;

sub reset_be_iop(iop: [BEIop])
    zero_memory(iop as [int8], BEIop@bytes);
    iop.iop_size := BEIop@bytes;
end sub;

sub simplify_ea(ea: [EffectiveAddress])
    var iop: BEIop;
    if ea.off_id != 0 then
        var tempvar_id: uint16 := alloc_temporary(2);
        reset_be_iop(&iop);

        if (ea.flags & EA_DEREF) != 0 then
            iop.left.obj_id := ea.obj_id;
            iop.right.obj_id := ea.off_id;
            iop.dest.obj_id := tempvar_id;
            iop.iop_kind := IOP_BE_ADD;
            iop.width := 2;
            write_be_iop(&iop);

            ea.obj_id := tempvar_id;
            ea.off_id := 0;
            return;
        end if;

        print("can't simplify this yet");
        halt();
    end if;
end sub;

sub simplify_node_to(src: [Node], dest: [Node])
    if dest.iop != IOP_FEX_PUSH then
        print("simplify_node_to() where dest is not simplified");
        halt();
    end if;

    var iop: BEIop;
    zero_memory(&iop as [int8], BEIop@bytes);
    iop.iop_size := BEIop@bytes;
    iop.width := get_width_of(dest);
    copy_ea(&dest.left, &iop.dest);

    if src.iop == IOP_FEX_PUSH then
        iop.iop_kind := IOP_BE_COPY;
    else
        iop.iop_kind := src.iop;
    end if;

    copy_ea(&src.left, &iop.left);
    copy_ea(&src.right, &iop.right);

    if arch_validate_ea(iop.iop_kind, iop.width, &iop.left) == 0 then
        simplify_ea(&iop.left);
    end if;

    if arch_validate_be_iop(&iop) == 0 then
        print("needs breakdown");
        halt();
    end if;

    write_be_iop(&iop);
end sub;

sub simplify_node_to_var(src: [Node]): (dest: [Node])
    if (src.iop == IOP_FEX_PUSH) and (src.left.flags == 0) and (src.left.off_id == 0) then
        dest := src;
        ref_node(dest);
        return;
    end if;

    var tempvar_id: uint16 := alloc_temporary(get_width_of(src));

    dest := alloc_node();
    dest.iop := IOP_FEX_PUSH;
    dest.flags := FLAG_RVALUE;
    dest.type_id := src.type_id;
    dest.left.obj_id := tempvar_id;

    simplify_node_to(src, dest);
end sub;

sub simplify_node_to_ea(src: [Node]): (dest: [Node])
    if src.iop == IOP_FEX_PUSH then
        dest := src;
        ref_node(dest);
        return;
    end if;

    dest := simplify_node_to_var(src);
end sub;

sub simplify_node_to_var_and_deref(src: [Node]): (dest: [Node])
    dest := simplify_node_to_var(src);
    deref_node(src);
end sub;

sub simplify_node_to_ea_and_deref(src: [Node]): (dest: [Node])
    dest := simplify_node_to_ea(src);
    deref_node(src);
end sub;
