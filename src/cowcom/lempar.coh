# %include sections from the grammar
%%

# makeheaders token definitions
%%

# control settings
%%

record yyStackEntry
	stateno: YYACTIONTYPE;
	major: YYCODETYPE;
	minor: YYMINORTYPE;
end record;

var yytos: [yyStackEntry];
var yystack: yyStackEntry[YYSTACKDEPTH];
var yystackend: [yyStackEntry];
var yyerrcnt: int8;
typedef YYSTACKPTR := @indexof yystack;

# parsing tables
%%

# fallback rules
%%

# token names
var yyTokenName: [uint8][] := { 
%%
};

# rule names
var yyRuleName: [uint8][YYNRULE] := {
%%
};

# destructors
sub yy_destructor(yymajor: YYCODETYPE, yypminor: [YYMINORTYPE])
%%
end sub;

# stack overflow code

sub yy_pop_parser_stack()
	yytos := yytos - @bytesof yyStackEntry;
	yy_destructor(yytos.major, &yytos.minor);
end sub;

sub yy_pop_all_parser_stack()
	while yytos != &yystack[0] loop
		yy_pop_parser_stack();
	end loop;
end sub;

sub yy_stack_overflow()
	yy_pop_all_parser_stack();
%%
end sub;

# For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
# of that rule
var yyRuleInfoLhs: YYCODETYPE[] := {
%%
};

# For rule J, yyRuleInfoNRhs[J] contains the negative of the number
# of symbols on the right-hand side of that rule.
var yyRuleInfoNRhs: int8[] := {
%%
};

# reduce actions
sub yy_find_reduce_action(stateno: YYACTIONTYPE, lookahead: YYCODETYPE): (action: YYACTIONTYPE)
	action := yy_default[stateno];
	if stateno <= YY_REDUCE_COUNT then
		var i := (yy_reduce_ofst[stateno] as YYCODETYPE) + lookahead;
		if (i>=0) and (i<YY_ACTTAB_COUNT) and (yy_lookahead[i] == lookahead) then
			action := yy_action[i];
		end if;
	end if;
end sub;

sub yy_reduce(yyruleno: YYACTIONTYPE, yylookahead: YYCODETYPE, yylookaheadtoken: ParseTOKENTYPE):
	(yyact: YYACTIONTYPE)
%%
	var yygoto := yyRuleInfoLhs[yyruleno];
	var yysize := yyRuleInfoNRhs[yyruleno];
	yyact := yy_find_reduce_action([yytos + (yysize as intptr)*@bytesof yyStackEntry].stateno, yygoto);
	yytos.stateno := yyact;
	yytos.major := yygoto;
end sub;

# parse failure code
sub yy_parse_failed()
	yy_pop_all_parser_stack();
%%
end sub;

# syntax error code
sub yy_syntax_error(yymajor: YYCODETYPE, yyminor: ParseTOKENTYPE)
%%
end sub;

# parse accept code
sub yy_accept()
%%
end sub;

