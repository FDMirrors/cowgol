var changed: uint8;

sub do_label(iop: [LabelIop])
    if labels[iop.label] != pc then
        changed := 1;
        labels[iop.label] := pc;
    end if;
end sub;

sub pass12()
    sub do_bytes(iop: [BytesIop])
        pc := pc + (iop.byte_count as uint16);
    end sub;

    pc := 0;
    loop
        var iop: [Iop] := read_iop();
        var iopkind: uint8 := iop.iop_kind;

        if iopkind == IOP_END then
            break;
        elseif iopkind == IOP_BYTES then
            do_bytes(iop as [BytesIop]);
        elseif iopkind == IOP_ADDRESS then
            pc := pc + 2;
        elseif (iopkind == IOP_ADDRESSHI) or (iopkind == IOP_ADDRESSLO) then
            pc := pc + 1;
        elseif iopkind == IOP_LABEL then
            do_label(iop as [LabelIop]);
        else
            pc := pc + (arch_calculate_iop_size(iop) as uint16);
        end if;
    end loop;
end sub;

sub pass3()
    sub do_bytes(iop: [BytesIop])
        write_iop(iop as [Iop]);
        pc := pc + (iop.byte_count as uint16);
    end sub;

    pc := 0;
    loop
        var iop: [Iop] := read_iop();
        var iopkind: uint8 := iop.iop_kind;

        if iopkind == IOP_END then
            break;
        elseif iopkind == IOP_BYTES then
            do_bytes(iop as [BytesIop]);
        elseif iopkind == IOP_ADDRESS then
            write_iop(iop);
            pc := pc + 2;
        elseif (iopkind == IOP_ADDRESSHI) or (iopkind == IOP_ADDRESSLO) then
            write_iop(iop);
            pc := pc + 1;
        elseif iopkind == IOP_LABEL then
            do_label(iop as [LabelIop]);
        else
            pc := pc + (arch_generate_iop(iop) as uint16);
        end if;
    end loop;

    root.code_size := root.code_size + pc;
    write_untyped_iop(IOP_END);
end sub;

sub process_data()
    var id: uint16 := 1;
    loop
        var thing: [Thing] := &thing_table[id] as [Thing];
        if thing.thing_type == 0 then
            break;
        elseif thing.thing_type == THING_STRING then
            var stringthing: [StringThing] := thing as [StringThing];
            if stringthing.segment == SEGMENT_CONST then
                stringthing.address := root.const_size;
                # Remember the trailing zero!
                root.const_size := root.const_size + (stringthing.string_size as uint16) + 1;
            end if;
        elseif thing.thing_type == THING_NUMBER then
            var numberthing: [NumberThing] := thing as [NumberThing];
            if numberthing.segment == SEGMENT_CONST then
                numberthing.address := root.const_size;
                root.const_size := root.const_size + 4;
            end if;
        elseif thing.thing_type == THING_ADDRESSOF then
            var addressofthing: [AddressOfThing] := thing as [AddressOfThing];
            if addressofthing.segment == SEGMENT_CONST then
                addressofthing.address := root.const_size;
                root.const_size := root.const_size + 2;
            end if;
        end if;
        id := next_thing(id);
    end loop;
end sub;

sub process_subroutines()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        current_subroutine_id := iheader.thing_id;
        current_subroutine := find_thing(current_subroutine_id) as [SubroutineThing];
        if current_subroutine.segment <= SEGMENT_OMIT then
            print("bad subroutine segment");
            halt();
        else
            write_iop_header(iheader);

            current_subroutine.segment := SEGMENT_CODE;
            current_subroutine.address := root.code_size;
            zero_memory(&labels[0] as [int8], labels@bytes);

            var pos: uint32 := file_tell(iop_in_fd);
            pass := 1;
            pass12();

            pass := 2;
            var iterations: uint8 := 0;
            while iterations != 5 loop
                file_seek(iop_in_fd, pos);
                changed := 0;
                pass12();
                if changed == 0 then
                    break;
                end if;
                iterations := iterations + 1;
            end loop;

            file_seek(iop_in_fd, pos);
            pass := 3;
            pass3();
        end if;
    end loop;
    write_terminating_iop_header();
end sub;

process_data();
process_subroutines();
