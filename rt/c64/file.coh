# vim: ts=4 sw=4 et

record FCB is
end record;

const FCB_I_READ := 0x40;
const FCB_I_WRITE := 0x80;

include "fileio.coh";

@impl sub FCBRawRead is
    var gbpb: FCB_GBPB;
    gbpb.channel := fcb.channel;
	gbpb.bufferlo := &fcb.buffer[0];
    gbpb.bufferhi := 0;
    gbpb.count := len as uint16;
    gbpb.counthi := 0;
    gbpb.pos := pos;

	@asm "lda #3"; # read block with pointer
	@asm "ldx #<", gbpb;
	@asm "ldy #>", gbpb;
	@asm "jsr $ffd1"; # OSGBPB

    amount := (len as FCBIndexType) - (gbpb.count as FCBIndexType);
end sub;

@impl sub FCBRawWrite is
    var gbpb: FCB_GBPB;
    gbpb.channel := fcb.channel;
	gbpb.bufferlo := &fcb.buffer[0];
    gbpb.bufferhi := 0;
    gbpb.count := len as uint16;
    gbpb.counthi := 0;
    gbpb.pos := pos;

	@asm "lda #1"; # write block with pointer
	@asm "ldx #<", gbpb;
	@asm "ldy #>", gbpb;
	@asm "jsr $ffd1"; # OSGBPB
end sub;

(??)sub fcb_i_init(fcb: [FCB], filename: [uint8], mode: uint8): (errno: uint8) is
(??)    errno := 1;
(??)	var t := filename;
(??)	loop
(??)		if [t] == 0 then
(??)			break;
(??)		end if;
(??)		t := t + 1;
(??)	end loop;
(??)	[t] := 13; # change to MOS terminator
(??)
(??)	var channel: uint8;
(??)	@asm "lda", mode;
(??)	@asm "ldx 0+", filename;
(??)	@asm "ldy 1+", filename;
(??)	@asm "jsr $ffce"; # OSFIND
(??)	@asm "sta", channel;
(??)	[t] := 0; # change back to Cowgol terminator
(??)
(??)	MemZero(fcb as [uint8], @bytesof FCB);
(??)	fcb.mode := mode;
(??)	fcb.gbpb.channel := channel;
(??)	fcb.block := -1;
(??)	fcb.bufferptr := FCB_BUFFER_SIZE-1;
(??)    if channel != 0 then
(??)        errno := 0;
(??)    end if;
(??)end sub;
(??)
(??)sub fcb_i_gbpb(fcb: [FCB], a: uint8) is
(??)	fcb.gbpb.bufferlo := &fcb.buffer[0];
(??)	fcb.gbpb.count := FCB_BUFFER_SIZE;
(??)	fcb.gbpb.blocklo := 0;
(??)	fcb.gbpb.block := fcb.block;
(??)	
(??)	@asm "lda", a;
(??)	@asm "ldx 0+", fcb;
(??)	@asm "ldy 1+", fcb;
(??)	@asm "jsr $ffd1"; # OSGBPB
(??)end sub;
(??)
(??)sub fcb_i_blockin(fcb: [FCB]) is
(??)	MemSet(&fcb.buffer[0], 0, FCB_BUFFER_SIZE);
(??)	fcb_i_gbpb(fcb, 3); # read block with pointer
(??)	fcb.dirty := 0;
(??)end sub;
(??)
(??)sub fcb_i_blockout(fcb: [FCB]) is
(??)	if fcb.dirty != 0 then
(??)		fcb_i_gbpb(fcb, 1); # write block with pointer
(??)		fcb.dirty := 0;
(??)	end if;
(??)end sub;
(??)
(??)sub fcb_i_changeblock(fcb: [FCB], newblock: uint16) is
(??)	if newblock != fcb.block then
(??)		fcb_i_blockout(fcb);
(??)		fcb.block := newblock;
(??)        if newblock != 0xffff then
(??)            fcb_i_blockin(fcb);
(??)        end if;
(??)	end if;
(??)end sub;
(??)
sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	errno := 1;
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	errno := 1;
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	errno := 1;
end sub;
	
sub FCBClose(fcb: [FCB]): (errno: uint8) is
    errno := 1;
end sub;

sub FCBSeek(fcb: [FCB], pos: uint32) is
end sub;

sub FCBPos(fcb: [FCB]): (pos: uint32) is
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
end sub;

sub FCBGetChar(fcb: [FCB]): (c: uint8) is
end sub;

sub FCBPutChar(fcb: [FCB], c: uint8) is
end sub;

include "common-file.coh";


