var expr_true_label_id: uint16;
var expr_false_label_id: uint16;
var data_stack_size: uint8;

sub expression_state_machine()
    const STATE_BEFORE := 0;
    const STATE_AFTER := 1;

    var operator_stack: uint16[32];
    var operator_stack_pos: uint8 := 0;
    var state: uint8 := STATE_BEFORE;
    var current_parameter_count: uint8 := 0;
    var current_function_call: uint16 := 0;
    var nesting: uint8 := 0;
    data_stack_size := 0;

    sub peek_op(): (op_id: uint16)
        if operator_stack_pos == 0 then
            op_id := 0;
        else
            op_id := operator_stack[operator_stack_pos-1];
        end if;
    end sub;

    sub push_op(op: uint16)
        if operator_stack_pos == operator_stack@size then
            print("expression too complex");
            halt();
        end if;

        operator_stack[operator_stack_pos] := op;
        operator_stack_pos := operator_stack_pos + 1;
    end sub;

    sub discard_op()
        if operator_stack_pos == 0 then
            print("expression stack underflow");
            halt();
        end if;

        operator_stack_pos := operator_stack_pos - 1;
    end sub;

    sub pop_op(): (op: uint16)
        discard_op();
        op := operator_stack[operator_stack_pos];
    end sub;

    sub check_b_op()
        if (expr_true_label_id == 0) or (expr_false_label_id == 0) then
            print("boolean operator cannot be used in this context");
            halt();
        end if;
    end sub;

    sub check_alu_op(min_count: uint8)
        if data_stack_size < min_count then
            print("arithmetic operator cannot be used in this context");
            halt();
        end if;
    end sub;

    sub print_op_stack()
        print("op stack:");
        var i: uint8 := operator_stack_pos;
        while i > 0 loop
            print_char(' ');
            i := i - 1;
            var op: uint16 := operator_stack[i];
            var thing: [Thing] := find_thing(op);
            print_hex_i16(op);
            if thing.thing_type == THING_TOKEN then
                show_identifier(op);
            else
                print("<data>");
            end if;
        end loop;
        print_newline();
    end sub;

    sub apply_op()
        #print("applying "); print_op_stack();
        var op_id: uint16 := pop_op();
        var op: [Thing] := find_thing(op_id);

        sub alu_2op(iop: uint8)
            check_alu_op(2);
            emit_simple_typed(iop);
            data_stack_size := data_stack_size - 1;
        end sub;

        sub alu_1op(iop: uint8)
            check_alu_op(1);
            emit_simple_typed(iop);
        end sub;

        sub b_2op(iop: uint8)
            check_b_op();
            emit_conditional_branch(iop, expr_true_label_id, expr_false_label_id);
            data_stack_size := data_stack_size - 2;
        end sub;

        sub b_2op_reverse(iop: uint8)
            check_b_op();
            emit_conditional_branch(iop, expr_false_label_id, expr_true_label_id);
            data_stack_size := data_stack_size - 2;
        end sub;

        sub b_not()
            check_b_op();
            var t: uint16 := expr_true_label_id;
            expr_true_label_id := expr_false_label_id;
            expr_false_label_id := t;
        end sub;

        sub parameter()
            check_alu_op(1);
            emit_parameter(IOP_INPUTPARAM, current_function_call, current_parameter_count);
        end sub;

        sub comma()
            check_alu_op(1);
            current_parameter_count := current_parameter_count + 1;
        end sub;

        sub call()
            var i: uint8 := current_parameter_count;
            while i > 0 loop
                i := i - 1;
                emit_parameter(IOP_INPUTPARAM, current_function_call, i);
                emit_simple(IOP_ASSIGNTO);
                data_stack_size := data_stack_size - 1;
            end loop;

            var iop: [CallIop] := emit(IOP_CALL, CallIop@bytes) as [CallIop];
            iop.thing_id := current_function_call;
            iop.input_parameter_count := current_parameter_count;
            iop.output_parameter_count := 1;

            emit_parameter(IOP_OUTPUTPARAM, current_function_call, 0);
            emit_simple(IOP_MATERIALISE);
            data_stack_size := data_stack_size + 1;

            current_parameter_count := pop_op();
            current_function_call := pop_op();
        end sub;

        if op_id == TOKEN_PLUS then
            alu_2op(IOP_ADDOP);
        elseif op_id == TOKEN_MINUS then
            alu_2op(IOP_SUBOP);
        elseif op_id == TOKEN_STAR then
            alu_2op(IOP_MULOP);
        elseif op_id == TOKEN_SLASH then
            alu_2op(IOP_DIVOP);
        elseif op_id == TOKEN_PERCENT then
            alu_2op(IOP_MODOP);
        elseif op_id == TOKEN_PIPE then
            alu_2op(IOP_OROP);
        elseif op_id == TOKEN_AMPERSAND then
            alu_2op(IOP_ANDOP);
        elseif op_id == TOKEN_CARET then
            alu_2op(IOP_EOROP);
        elseif op_id == TOKEN_OPENSQUARE then
            alu_2op(IOP_INDEXOP);
        elseif op_id == TOKEN_OPENPAREN then
            # do nothing
        elseif op_id == TOKEN_TILDE then
            alu_1op(IOP_NOTOP);
        elseif op_id == TOKEN_UNARYAMPERSAND then
            alu_1op(IOP_ADDRESSOP);
        elseif op_id == TOKEN_UNARYMINUS then
            alu_1op(IOP_NEGOP);
        elseif op_id == TOKEN_EQOP then
            b_2op(IOP_BEQ);
        elseif op_id == TOKEN_NEOP then
            b_2op_reverse(IOP_BEQ);
        elseif op_id == TOKEN_LTOP then
            b_2op(IOP_BLT);
        elseif op_id == TOKEN_LEOP then
            b_2op_reverse(IOP_BGT);
        elseif op_id == TOKEN_GTOP then
            b_2op(IOP_BGT);
        elseif op_id == TOKEN_GEOP then
            b_2op_reverse(IOP_BLT);
        elseif op_id == TOKEN_NOT then
            b_not();
        elseif (op_id == TOKEN_AND) or (op_id == TOKEN_OR) then
            merge_label(expr_false_label_id, pop_op());
            merge_label(expr_true_label_id, pop_op());
        elseif op_id == TOKEN_AS then
            emit_cast(pop_op());
        elseif op_id == TOKEN_DOT then
            check_alu_op(1);
            emit_member(pop_op());
        elseif op_id == TOKEN_COMMA then
            comma();
        elseif op_id == TOKEN_CALL then
            call();
        elseif op_id == TOKEN_BYTES then
            alu_1op(IOP_BYTESOP);
        elseif op_id == TOKEN_SIZE then
            alu_1op(IOP_SIZEOP);
        else
            print("couldn't apply operator ");
            show_identifier(op_id);
            halt();
        end if;
    end sub;

    sub apply_higher_precedence_ops(op_id: uint16)
        var op_p: uint8 := get_token_flags(op_id) & TOKEN_FLAG_PRECEDENCE_MASK;
        while operator_stack_pos > 0 loop
            var topop_id: uint16 := peek_op();
            var topop_p: uint8 := get_token_flags(topop_id) & TOKEN_FLAG_PRECEDENCE_MASK;
            if topop_p <= op_p then
                break;
            end if;
            apply_op();
        end loop;
    end sub;

    sub apply_left_associative(op_id: uint16)
        var op_p: uint8 := get_token_flags(op_id) & TOKEN_FLAG_PRECEDENCE_MASK;
        while operator_stack_pos > 0 loop
            var topop_id: uint16 := peek_op();
            var topop_p: uint8 := get_token_flags(topop_id) & TOKEN_FLAG_PRECEDENCE_MASK;
            if topop_p < op_p then
                break;
            end if;
            apply_op();
        end loop;
    end sub;

    sub flush_ops()
        while operator_stack_pos > 0 loop
            apply_op();
        end loop;
    end sub;

    sub close_expression(opener_op: uint16)
        #print("looking for: "); show_identifier(opener_op); print_newline();
        apply_higher_precedence_ops(opener_op);
        #print("peeked: "); show_identifier(opener_op); print_newline();
        var peeked_op: uint16 := peek_op();
        if peeked_op == 0 then
            return;
        elseif (opener_op == TOKEN_OPENPAREN) and (peeked_op == TOKEN_CALL) then
            # special case; function calls are closed with ).
        elseif peeked_op != opener_op then
            print("expected a ");
            show_identifier(opener_op);
            print(", not a ");
            show_identifier(peeked_op);
            halt();
        end if;

        apply_op();
    end sub;

    sub thing_reference(type: [TypeThing]): (pushable_id: uint16)
        if current_token == TOKEN_BYTES then
            pushable_id := add_number_by_value(type.width);
        elseif current_token == TOKEN_SIZE then
            var array_type: [ArrayThing] := type as [ArrayThing];
            if array_type.thing_type != THING_ARRAY then
                show_identifier(current_token);
                print(" only works on arrays");
                halt();
            end if;
            pushable_id := add_number_by_value(array_type.element_count);
        else
            print("expected a type attribute, got ");
            show_identifier(current_token);
            halt();
        end if;
    end sub;

    var thing: [Thing];
    var thing_iop: [ThingIop];
    loop
        var token_flags: uint8;
        #print("seen: "); show_identifier(current_token); print_newline();
        #print("loop "); print_op_stack();
        if state == STATE_BEFORE then
            # Before a leaf.
            if current_token == TOKEN_MINUS then
                current_token := TOKEN_UNARYMINUS;
            elseif current_token == TOKEN_AMPERSAND then
                current_token := TOKEN_UNARYAMPERSAND;
            end if;
            token_flags := get_token_flags(current_token);

            if current_token == TOKEN_OPENPAREN then
                push_op(current_token);
                next_token();
                nesting := nesting + 1;
            elseif (token_flags & TOKEN_FLAG_POSTFIX_OP) != 0 then
                print("can't use ");
                show_identifier(current_token);
                print(" as a prefix operator");
                halt();
            elseif (token_flags & TOKEN_FLAG_PREFIX_OP) != 0 then
                push_op(current_token);
                next_token();
            else
                thing := find_thing(current_token);
                if (thing.thing_type == THING_IDENTIFIER) and (peeked_token == TOKEN_OPENPAREN) then
                    push_op(current_function_call);
                    push_op(current_parameter_count);
                    current_function_call := current_token;
                    push_op(TOKEN_CALL);
                    next_token();
                    expect_token(TOKEN_OPENPAREN);

                    if current_token == TOKEN_CLOSEPAREN then
                        apply_op();
                        next_token();
                        state := STATE_AFTER;
                        current_parameter_count := 0;
                    else
                        nesting := nesting + 1;
                        current_parameter_count := 1;
                    end if;
                elseif (thing.thing_type == THING_IDENTIFIER) or (thing.thing_type == THING_NUMBER)
                        or (thing.thing_type == THING_STRING) then
                    var pushable_id: uint16 := current_token;
                    if thing.thing_type == THING_IDENTIFIER then
                        var looked_up_id: uint16 := deref_symbol(pushable_id);
                        if looked_up_id != 0 then
                            var looked_up: [TypeThing] := find_thing(looked_up_id) as [TypeThing];
                            if (looked_up.thing_type & THING_TYPE) != 0 then
                                next_token();
                                pushable_id := thing_reference(looked_up);
                            end if;
                        end if;
                    end if;
                    thing_iop := emit(IOP_THING, ThingIop@bytes) as [ThingIop];
                    thing_iop.thing_id := pushable_id;
                    next_token();
                    state := STATE_AFTER;
                    data_stack_size := data_stack_size + 1;
                else
                    print("bad token ");
                    show_identifier(current_token);
                    halt();
                end if;
            end if;
        else
            # After a leaf (this is the only valid place to end an expression).
            token_flags := get_token_flags(current_token);
            if (token_flags & TOKEN_FLAG_EXPR_ENDER) != 0 then
                break;
            elseif (current_token == TOKEN_COMMA) and (nesting == 0) then
                break;
            elseif current_token == TOKEN_OPENSQUARE then
                push_op(TOKEN_OPENSQUARE);
                state := STATE_BEFORE;
                nesting := nesting + 1;
                next_token();
            elseif current_token == TOKEN_CLOSEPAREN then
                if nesting > 0 then
                    close_expression(TOKEN_OPENPAREN);
                    nesting := nesting - 1;
                    next_token();
                else
                    break;
                end if;
            elseif current_token == TOKEN_CLOSESQUARE then
                if nesting > 0 then
                    close_expression(TOKEN_OPENSQUARE);
                    nesting := nesting - 1;
                    next_token();
                else
                    break;
                end if;
            elseif (current_token == TOKEN_AND) or (current_token == TOKEN_OR) then
                check_b_op();
                apply_left_associative(current_token);

                if (current_token == TOKEN_AND) then
                    emit_label(expr_true_label_id);
                    push_op(create_label());
                    push_op(expr_false_label_id);
                else
                    emit_label(expr_false_label_id);
                    push_op(expr_true_label_id);
                    push_op(create_label());
                end if;
                push_op(current_token);

                expr_true_label_id := create_label();
                expr_false_label_id := create_label();

                next_token();
                state := STATE_BEFORE;
            elseif (token_flags & TOKEN_FLAG_BINARY_OP) != 0 then
                apply_left_associative(current_token);
                push_op(current_token);
                next_token();
                state := STATE_BEFORE;
            elseif current_token == TOKEN_AS then
                # 'as' is actually a *unary* operator. The thing on the right hand side is a type,
                # not an expression.
                apply_left_associative(current_token);
                next_token();
                check_alu_op(1);
                push_op(read_type());
                push_op(TOKEN_AS);
            elseif current_token == TOKEN_DOT then
                # '.' is actually a *unary* operator. The thing on the right hand side is an
                # identifier, not an expression.
                apply_left_associative(current_token);
                next_token();
                check_alu_op(1);
                push_op(expect_identifier());
                push_op(TOKEN_DOT);
            elseif (token_flags & TOKEN_FLAG_PREFIX_OP) != 0 then
                print("can't use ");
                show_identifier(current_token);
                print(" as a postfix operator");
                halt();
            elseif (token_flags & TOKEN_FLAG_POSTFIX_OP) != 0 then
                push_op(current_token);
                next_token();
            else
                print("couldn't parse operator ");
                show_identifier(current_token);
                halt();
            end if;
        end if;
    end loop;

    flush_ops();
    if operator_stack_pos != 0 then
        print("unmatched expression");
        halt();
    end if;
end sub;

sub do_expression()
    #print("expression start\n");
    expr_true_label_id := 0;
    expr_false_label_id := 0;
    expression_state_machine();
    if data_stack_size != 1 then
        print("expression left ");
        print_i8(data_stack_size);
        print(" items on the stack, but expected 1");
        halt();
    end if;
end sub;

sub do_conditional(): (true_label: uint16, false_label: uint16)
    #print("conditional start\n");
    expr_true_label_id := create_thing(THING_LABEL, LabelThing@bytes);
    expr_false_label_id := create_thing(THING_LABEL, LabelThing@bytes);

    expression_state_machine();

    true_label := expr_true_label_id;
    false_label := expr_false_label_id;
    if data_stack_size != 0 then
        print("expression left ");
        print_i8(data_stack_size);
        print(" items on the stack, but expected 0");
        halt();
    end if;
end sub;
