sub is_valid_byte_offset(ea: [EffectiveAddress]): (is_valid: uint8)
    is_valid := 0;

    var thing_type: uint8 := get_thing_type(ea.off_id);
    if (thing_type & THING_TYPED) != 0 then
        var type_id: uint16 := get_type_of_thing(ea.off_id);
        var type: [TypeThing] := find_thing(type_id) as [TypeThing];
        if (type.thing_type != THING_UNSIGNED) or (type.width != 1) then
            print("* invalid: var offset is not unsigned byte\n");
            return;
        end if;
    elseif thing_type == THING_NUMBER then
        if (ea.flags & EA_DEREF) != 0 then
            var value: int32 := get_value_of_number(ea.off_id);
            if (value < 0) or (value > 255) then
                print("* invalid: pointer offset out of range\n");
                return;
            end if;
        end if;
    end if;

    is_valid := 1;
end sub;

sub arch_validate_ea(iop: uint8, width: uint8, ea: [EffectiveAddress]): (is_valid: uint8)
    print("* checking ea validity: width=");
    print_i8(width);
    print(" ea=");
    print_ea(ea);
    print_newline();

    is_valid := 0;

    if width > 1 then
        if is_typed_thing(ea.off_id) != 0 then
            print("* invalid EA: non-constant offset\n");
            return;
        end if;

        if iop != IOP_BE_COPY then
            if (ea.flags & EA_DEREF) != 0 then
                print("* wide deref not allowed\n");
                return;
            end if;
        end if;
    else
        if is_valid_byte_offset(ea) == 0 then
            return;
        end if;
    end if;

    is_valid := 1;
end sub;

sub arch_validate_be_iop(iop: [BEIop]): (is_valid: uint8)
    var iopkind: uint8 := iop.iop_kind & IOP_TYPE_MASK;
    is_valid := 0;

    # You are allowed a single var offsetted EA. This can't be combined with a deref.
    if arch_validate_ea(iop.iop_kind, iop.width, &iop.left) == 0 then
        return;
    end if;

    if iopkind == IOP_TYPE_BACKEND_3OP then
        if arch_validate_ea(iop.iop_kind, iop.width, &iop.right) == 0 then
            return;
        end if;
    end if;

    if arch_validate_ea(iop.iop_kind, iop.width, &iop.dest) == 0 then
        return;
    end if;

    is_valid := 1;
end sub;
