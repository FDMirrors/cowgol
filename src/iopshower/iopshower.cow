load_thing_table("things.dat");
init_iop_reader(ARGV[1]);

sub print_identifier(identifier_id: uint16)
    var identifier: [IdentifierThing] := find_thing(identifier_id) as [IdentifierThing];
    show_string(identifier.string_id);
end sub;

sub print_label(label_id: uint16)
    loop
        print_hex_i16(label_id);

        var label: [LabelThing] := find_thing(label_id) as [LabelThing];
        if label.thing_type == THING_LABEL then
            break;
        end if;

        label_id := label.target;
        print(" -> 0x");
    end loop;
end sub;

sub do_filename(iop: [FilenameIop])
    print("FILENAME ");
    print_identifier(iop.thing_id);
end sub;

sub do_linenumber(iop: [LinenumberIop])
    print("LINENUMBER ");
    print_i16(iop.line_number);
end sub;

sub do_label(iop: [LabelIop])
    print("LABEL 0x");
    print_label(iop.label_id);
end sub;

sub do_fe_push(iop: [FEPushIop])
    print("FE_PUSH id=0x");
    print_hex_i16(iop.thing_id);
end sub;

sub do_call(iop: [CallIop])
    print("CALL id=0x");
    print_hex_i16(iop.thing_id);
    print(" input_parameter_count=");
    print_i8(iop.input_parameter_count);
    print(" output_parameter_count=");
    print_i8(iop.output_parameter_count);
end sub;

sub do_fe_parameter(kind: [int8], iop: [FEParameterIop])
    print(kind);
    print(" subroutine_id=0x");
    print_hex_i16(iop.subroutine_id);
    print(" parameter=");
    print_i8(iop.parameter);
end sub;

sub do_fe_member(iop: [FEMemberIop])
    print("FEX_MEMBER thing_id=0x");
    print_hex_i16(iop.thing_id);
end sub;

sub do_fe_cast(iop: [FECastIop])
    print("FEX_CAST type_id=0x");
    print_hex_i16(iop.type_id);
end sub;

sub do_fe_conditional(kind: [int8], iop: [FEConditionalIop])
    print(kind);
    print(" iftrue=0x");
    print_hex_i16(iop.iftrue_label_id);
    print(" iffalse=0x");
    print_hex_i16(iop.iffalse_label_id);
end sub;

sub do_be_2op(kind: [int8], iop: [BEIop])
    print(kind);
    print(" width=");
    print_i8(iop.width);
    print(" src=");
    print_ea(&iop.left);
    print(" dest=");
    print_ea(&iop.dest);
end sub;

sub do_be_3op(kind: [int8], iop: [BEIop])
    print(kind);
    print(" width=");
    print_i8(iop.width);
    print(" left=");
    print_ea(&iop.left);
    print(" right=");
    print_ea(&iop.right);
    print(" dest=");
    print_ea(&iop.dest);
end sub;

sub do_goto(iop: [GotoIop])
    print("GOTO label=0x");
    print_label(iop.label_id);
end sub;

sub do_bytes(iop: [BytesIop])
    print("BYTES");
    var i: uint8 := 0;
    while i < iop.byte_count loop
        print(" 0x");
        print_hex_i8(iop.bytes[i]);
        i := i + 1;
    end loop;
end sub;

sub do_address(iop: [AddressIop])
    print("ADDRESS thing_id=0x");
    print_hex_i16(iop.thing_id);
    print(" offset=0x");
    print_hex_i16(iop.offset);
end sub;

sub do_cg_6502_mem(iop: [CG6502MemIop])
    print("CG_6502_MEM opcode=0x");
    print_hex_i8(iop.opcode);
    print(" thing_id=0x");
    print_hex_i16(iop.thing_id);
    print(" offset=0x");
    print_hex_i16(iop.offset);
end sub;

sub do_cg_6502_zeropage(iop: [CG6502ZeroPageIop])
    print("CG_6502_ZEROPAGE thing_id=0x");
    print_hex_i16(iop.thing_id);
    print(" offset=0x");
    print_hex_i16(iop.offset);
end sub;

sub do_cg_6502_cond(iop: [CG6502ConditionalIop])
    print("CG_6502_COND opcode=0x");
    print_hex_i8(iop.opcode);
    print(" label_id=0x");
    print_hex_i16(iop.label_id);
end sub;

loop
    var header: [IHeader] := read_iop_header();
    if header.thing_id == 0 then
        break;
    end if;

    var subroutine: [SubroutineThing] := find_thing(header.thing_id) as [SubroutineThing];
    var symbol_id: uint16 := find_symbol_by_value(header.thing_id);
    print("OBJECT: id=0x");
    print_hex_i16(header.thing_id);
    print(", section=");
    print_i8(header.section);
    print(": ");
    if symbol_id != 0 then
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        print_identifier(symbol.name_id);
    else
        print("(main subroutine)");
    end if;
    print_newline();

    var offset: uint16 := IHeader@bytes;
    loop
        var iop: [Iop] := read_iop();
        var kind: uint8 := iop.iop_kind;
        print_hex_i16(offset);
        print(": ");
        print_hex_i8(kind);
        print_char(' ');

        if kind == IOP_END            then print("END");
        elseif kind == IOP_RETURN     then print("RETURN");
        elseif kind == IOP_FILENAME   then do_filename(iop as [FilenameIop]);
        elseif kind == IOP_LINENUMBER then do_linenumber(iop as [LinenumberIop]);
        elseif kind == IOP_LABEL      then do_label(iop as [LabelIop]);
        elseif kind == IOP_CALL       then do_call(iop as [CallIop]);
        elseif kind == IOP_GOTO       then do_goto(iop as [GotoIop]);

        elseif kind == IOP_FE_SWAP        then print("FE_SWAP");
        elseif kind == IOP_FE_ASSIGN      then print("FE_ASSIGN");
        elseif kind == IOP_FE_ADDRESSOF   then print("FE_ADDRESSOF");
        elseif kind == IOP_FE_BYTESOF     then print("FE_BYTESOF");
        elseif kind == IOP_FE_SIZEOF      then print("FE_SIZEOF");
        elseif kind == IOP_FE_OFFSET      then print("FE_OFFSET");
        elseif kind == IOP_FE_INDEX       then print("FE_INDEX");
        elseif kind == IOP_FE_ADD         then print("FE_ADD");
        elseif kind == IOP_FE_SUB         then print("FE_SUB");
        elseif kind == IOP_FE_MUL         then print("FE_MUL");
        elseif kind == IOP_FE_DIV         then print("FE_DIV");
        elseif kind == IOP_FE_MOD         then print("FE_MOD");
        elseif kind == IOP_FE_AND         then print("FE_AND");
        elseif kind == IOP_FE_OR          then print("FE_OR");
        elseif kind == IOP_FE_EOR         then print("FE_EOR");
        elseif kind == IOP_FE_NEG         then print("FE_NEG");
        elseif kind == IOP_FE_NOT         then print("FE_NOT");
        elseif kind == IOP_FE_MATERIALISE then print("FE_MATERIALISE");
        elseif kind == IOP_FE_ZEXT        then print("FE_ZEXT");
        elseif kind == IOP_FE_SEXT        then print("FE_SEXT");
        elseif kind == IOP_FE_LSHIFT      then print("FE_LSHIFT");
        elseif kind == IOP_FE_RSHIFT      then print("FE_RSHIFT");

        elseif kind == IOP_FEX_PUSH        then do_fe_push(iop as [FEPushIop]);
        elseif kind == IOP_FEX_INPUTPARAM  then do_fe_parameter("FEX_INPUTPARAM", iop as [FEParameterIop]);
        elseif kind == IOP_FEX_OUTPUTPARAM then do_fe_parameter("FEX_OUTPUTPARAM", iop as [FEParameterIop]);
        elseif kind == IOP_FEX_MEMBER      then do_fe_member(iop as [FEMemberIop]);
        elseif kind == IOP_FEX_CAST        then do_fe_cast(iop as [FECastIop]);
        elseif kind == IOP_FEX_BEQ         then do_fe_conditional("FEX_BEQ", iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BLT         then do_fe_conditional("FEX_BLT", iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BGT         then do_fe_conditional("FEX_BGT", iop as [FEConditionalIop]);

        elseif kind == IOP_BE_COPY         then do_be_2op("BE_COPY", iop as [BEIop]);
        elseif kind == IOP_BE_ADD          then do_be_3op("BE_ADD", iop as [BEIop]);
        elseif kind == IOP_BE_SUB          then do_be_3op("BE_SUB", iop as [BEIop]);
        elseif kind == IOP_BE_MUL          then do_be_3op("BE_MUL", iop as [BEIop]);
        elseif kind == IOP_BE_AND          then do_be_3op("BE_AND", iop as [BEIop]);
        elseif kind == IOP_BE_OR           then do_be_3op("BE_OR", iop as [BEIop]);
        elseif kind == IOP_BE_EOR          then do_be_3op("BE_EOR", iop as [BEIop]);
        elseif kind == IOP_BE_DIVS         then do_be_3op("BE_DIVS", iop as [BEIop]);
        elseif kind == IOP_BE_DIVU         then do_be_3op("BE_DIVU", iop as [BEIop]);
        elseif kind == IOP_BE_MODS         then do_be_3op("BE_MODS", iop as [BEIop]);
        elseif kind == IOP_BE_MODU         then do_be_3op("BE_MODU", iop as [BEIop]);
        elseif kind == IOP_BE_INDEX        then do_be_3op("BE_INDEX", iop as [BEIop]);

        elseif kind == IOP_CG_6502_MEM then
            do_cg_6502_mem(iop as [CG6502MemIop]);
        elseif kind == IOP_CG_6502_ZEROPAGE then
            do_cg_6502_zeropage(iop as [CG6502ZeroPageIop]);
        elseif kind == IOP_CG_6502_COND then
            do_cg_6502_cond(iop as [CG6502ConditionalIop]);
        else
            print("Unknown iop 0x");
            print_hex_i8(kind);
        end if;
        print_newline();
        offset := offset + iop.iop_size;
        if kind == IOP_END then
            break;
        end if;
    end loop;
    print_newline();
end loop;
