sub get_width_of_ea(ea: [EffectiveAddress]): (width: uint16)
    if ea.type_id == 0 then
        print("untyped EA ");
        print_ea(ea);
        halt();
    end if;

    width := get_width_of_type(ea.type_id);
end sub;

sub cant_do_2op(iop: [BEIop], op: [int8])
    print("can't do ");
    print_ea(&iop.left);
    print_char('(');
    print_i8(get_width_of_ea(&iop.left) as uint8);
    print(") ");
    print(op);
    print(" -> ");
    print_ea(&iop.dest);
    print_char('(');
    print_i8(get_width_of_ea(&iop.dest) as uint8);
    print(") width ");
    print_i8(iop.width);
    halt();
end sub;

sub cant_do_3op(iop: [BEIop], op: [int8])
    print("can't do ");
    print_ea(&iop.left);
    print_char('(');
    print_i8(get_width_of_ea(&iop.left) as uint8);
    print(") ");
    print(op);
    print(" ");
    print_ea(&iop.right);
    print_char('(');
    print_i8(get_width_of_ea(&iop.right) as uint8);
    print(") -> ");
    print_ea(&iop.dest);
    print_char('(');
    print_i8(get_width_of_ea(&iop.dest) as uint8);
    print(") width ");
    print_i8(iop.width);
    halt();
end sub;

sub arch_gen_before(ea: [EffectiveAddress])
    if (ea.obj_id != 0) and (ea.flags == EA_DEREF) then
		$if DEBUG
			print("* writing back precious values because of pointer access: ");
			print_ea(ea);
			print_newline();
		$endif

        write_back_precious_values(REG_MASK);
    end if;
end sub;

sub arch_gen_after(ea: [EffectiveAddress])
    if (ea.obj_id != 0) and (ea.flags == EA_DEREF) then
		$if DEBUG
			print("* flushing cached values because of pointer access: ");
			print_ea(ea);
			print_newline();
		$endif

        flush_cached_values(REG_MASK);
    end if;
end sub;

sub arch_gen_beginning_of_instruction()
	$if DEBUG
		print_newline();
		print_cache();
	$endif
    locked_registers := 0;
end sub;

sub arch_gen_return()
    flush_cached_values(REG_MASK);
    write_byte(0x60); # RTS
end sub;

sub arch_gen_call(iop: [CallIop])
    flush_cached_values(REG_MASK);
    write_byte(0x20); # JSR
    write_address_iop(IOP_ADDRESS, iop.thing_id, 0);
end sub;

sub arch_gen_tail_call(iop: [CallIop])
    flush_cached_values(REG_MASK);
    write_byte(0x4C); # JMP
    write_address_iop(IOP_ADDRESS, iop.thing_id, 0);
end sub;

sub arch_gen_label(iop: [LabelIop])
    flush_cached_values(REG_MASK);
    write_iop(iop as [Iop]);
end sub;

sub arch_gen_goto(iop: [GotoIop])
    flush_cached_values(REG_MASK);
    write_cg_6502_conditional_iop(0x80, iop.label); # BRA (actually a 65C102 opcode)
end sub;

sub arch_gen_copy(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_copy_byte(iop);
    elseif iop.width == 2 then
        arch_gen_copy_word(iop);
    else
        arch_gen_copy_wide(iop);
    end if;
end sub;

sub arch_gen_not(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_not_byte(iop);
    else
        cant_do_2op(iop, "not");
    end if;
end sub;

sub arch_gen_and(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_and_byte(iop);
    elseif iop.width == 2 then
        regular_alu_word_op(iop, 0x2D); # AND abs
    else
        regular_alu_wide_op(iop, 0x2D); # AND abs
    end if;
end sub;

sub arch_gen_or(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_or_byte(iop);
    elseif iop.width == 2 then
        regular_alu_word_op(iop, 0x0D); # ORA abs
    else
        regular_alu_wide_op(iop, 0x0D); # ORA abs
    end if;
end sub;

sub arch_gen_eor(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_eor_byte(iop);
    elseif iop.width == 2 then
        regular_alu_word_op(iop, 0x4D); # EOR abs
    else
        regular_alu_wide_op(iop, 0x4D); # EOR abs
    end if;
end sub;

sub arch_gen_add(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_add_byte(iop);
    elseif iop.width == 2 then
        if iop.dest.flags == EA_VALUE then
            if (get_value_of_number(iop.left.obj_id) == 1) and (is_same_ea_ignoring_type(&iop.right, &iop.dest) != 0) then
                fast_increment_word(&iop.right, &iop.dest);
                return;
            elseif (get_value_of_number(iop.right.obj_id) == 1) and (is_same_ea_ignoring_type(&iop.left, &iop.dest) != 0) then
                fast_increment_word(&iop.left, &iop.dest);
                return;
            end if;
        end if;
        write_byte(0x18); # CLC
        regular_alu_word_op(iop, 0x6D); # ADC abs
    else
        arch_gen_add_wide(iop);
    end if;
end sub;

sub arch_gen_sub(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_sub_byte(iop);
    elseif iop.width == 2 then
        write_byte(0x38); # SEC
        regular_alu_word_op(iop, 0xED); # SBC abs
    else
        arch_gen_sub_wide(iop);
    end if;
end sub;

sub arch_gen_lsl(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_lsl_byte(iop);
    else
        arch_gen_lsl_wide(iop);
    end if;
end sub;

sub arch_gen_lsr(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_lsr_byte(iop);
    else
        arch_gen_lsr_wide(iop);
    end if;
end sub;

sub arch_gen_asr(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_asr_byte(iop);
    else
        arch_gen_asr_wide(iop);
    end if;
end sub;

sub arch_gen_divu(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_divu_byte(iop);
    elseif iop.width == 2 then
        arch_gen_simple_wide(iop, TOKEN_DIVU16);
    elseif iop.width == 4 then
        arch_gen_simple_wide(iop, TOKEN_DIVU32);
    else
        cant_do_3op(iop, "divu");
    end if;
end sub;

sub arch_gen_divs(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_divu_byte(iop);
    elseif iop.width == 2 then
        arch_gen_simple_wide(iop, TOKEN_DIVS16);
    elseif iop.width == 4 then
        arch_gen_simple_wide(iop, TOKEN_DIVS32);
    else
        cant_do_3op(iop, "divs");
    end if;
end sub;

sub arch_gen_modu(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_modu_byte(iop);
    elseif iop.width == 2 then
        arch_gen_simple_wide(iop, TOKEN_MODU16);
    elseif iop.width == 4 then
        arch_gen_simple_wide(iop, TOKEN_MODU32);
    else
        cant_do_3op(iop, "modu");
    end if;
end sub;

sub arch_gen_mods(iop: [BEIop])
    if iop.width == 2 then
        arch_gen_simple_wide(iop, TOKEN_MODS16);
    elseif iop.width == 4 then
        arch_gen_simple_wide(iop, TOKEN_MODS32);
    else
        cant_do_3op(iop, "mods");
    end if;
end sub;

sub arch_gen_mul(iop: [BEIop])
    if iop.width == 1 then
        arch_gen_simple_wide(iop, TOKEN_MUL8);
    elseif iop.width == 2 then
        arch_gen_simple_wide(iop, TOKEN_MUL16);
    elseif iop.width == 4 then
        arch_gen_simple_wide(iop, TOKEN_MUL32);
    else
        cant_do_3op(iop, "mul");
    end if;
end sub;

sub arch_gen_cmp(ciop: [BEConditionalIop], liop: [LabelIop])
    var width: uint8 := ciop.width;
    write_back_precious_values(REG_MASK);

    if width != 1 then
        check_wide_ea(&ciop.left);
        check_wide_ea(&ciop.right);
    end if;

    var fallthrough_label: uint8;
    var iopkind: uint8 := ciop.iop_kind;

    sub emit_comparison(ea: [EffectiveAddress])
        if (iopkind & IOP_TYPE_COMPARISON_S) != 0 then
            write_byte(0x38); # SEC
            if width != 1 then
                aluop_value_with_index(ea, REG_Y, 0xED); # SBC abs
            else
                aluop_value(ea, 0xED); # SBC abs
            end if;
            write_word(0x0250); # BVC .+2
            write_word(0x8049); # EOR #80
        else
            if width != 1 then
                aluop_value_with_index(ea, REG_Y, 0xCD); # CMP abs
            else
                aluop_value(ea, 0xCD); # CMP abs
            end if;
        end if;
    end sub;

    if width != 1 then
        find_or_load_fixed_int(ciop.width-1, REG_Y);
    end if;

    allocate_fixed_reg(REG_A);

    if width != 1 then
        var label: uint8 := create_label();
        write_label_iop(label);

        if (iopkind & IOP_TYPE_COMPARISON_GT) == 0 then
            load_value_with_index(REG_A, &ciop.left, REG_Y);
            emit_comparison(&ciop.right);
        else
            load_value_with_index(REG_A, &ciop.right, REG_Y);
            emit_comparison(&ciop.left);
        end if;
    else
        if (iopkind & IOP_TYPE_COMPARISON_GT) == 0 then
            aluop_value(&ciop.left, 0xAD); # LDA abs
            emit_comparison(&ciop.right);
        else
            aluop_value(&ciop.right, 0xAD); # LDA abs
            emit_comparison(&ciop.left);
        end if;
    end if;

    # Remember, with BEQ we don't care about the order.
    # After this point, assume we're comparing LT.

    if iopkind == IOP_BE_BEQ then
        write_cg_6502_conditional_iop(0xD0, ciop.iffalse_label); # BNE
        fallthrough_label := ciop.iftrue_label;
    else
        fallthrough_label := ciop.iffalse_label;
        if (iopkind & IOP_TYPE_COMPARISON_S) == 0 then
            # BLTU
            write_cg_6502_conditional_iop(0x90, ciop.iftrue_label); # BCC, branch if less than
        else
            # BLTS
            write_cg_6502_conditional_iop(0x30, ciop.iftrue_label); # BMI, branch if negative
            write_word(0x8049); # EOR #80; put Z flag back how it was
        end if;
        write_cg_6502_conditional_iop(0xD0, ciop.iffalse_label); # BNE, branch if greater than
    end if;

    if width != 1 then
        write_byte(0x88); # DEY
        write_cg_6502_conditional_iop(0x10, label); # BPL rel
    end if;

    if liop.label != fallthrough_label then
        write_cg_6502_conditional_iop(0x80, fallthrough_label);
    end if;
end sub;
