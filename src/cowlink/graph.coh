const STACK_SIZE := 128;
var stack: [Subroutine][STACK_SIZE];
var sp: uint8 := 0;

sub CalculateDependencyGraph(coo: [Coo])
	sp := 1;
	stack[0] := FindSub(coo, 0);

	loop
		if sp == 0 then
			break;
		end if;

		sp := sp - 1;
		var subroutine := stack[sp];
		if subroutine.used == 0 then
			subroutine.used := 1;

			var ref := subroutine.refs;
			loop
				if ref == (0 as [Reference]) then
					break;
				end if;

				if ref.requires.used == 0 then
					stack[sp] := ref.requires;
					sp := sp + 1;
					if sp == STACK_SIZE then
						print("error: dependency graph overflow\n");
						ExitWithError();
					end if;
				end if;
				ref := ref.next;
			end loop;
		end if;
	end loop;

	subroutine := coo.subroutines;
	var total: uint16 := 0;
	var used: uint16 := 0;
	loop
		if subroutine == (0 as [Subroutine]) then
			break;
		end if;
		if subroutine.used != 0 then
			used := used + 1;
		end if;
		total := total + 1;
		subroutine := subroutine.next;
	end loop;
	print_i16(total);
	print(" subroutines total, of which ");
	print_i16(used);
	print(" are used\n");
end sub;

