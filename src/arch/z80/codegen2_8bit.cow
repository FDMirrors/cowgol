# Returns a pointer to the value in ea.
sub setup_pointer(pointerregs: RegSet, ea: [EffectiveAddress]): (pointerreg: RegSet)
    var indea: EffectiveAddress;
    copy_ea(ea, &indea);
    if ea.flags == EA_VALUE then
        indea.flags := EA_LEA;
    else
        indea.flags := EA_VALUE;
    end if;
    indea.numoff_id := 0;
    pointerreg := reg_find_or_load(pointerregs, &indea);
end sub;

sub load_complex_8bit_value(regs: RegSet, ea: [EffectiveAddress]): (reg: RegSet)
    # If the value is already in a register, load it.

    if reg_is_cached(ea) != 0 then
        reg := reg_find_or_load(regs, ea);
        return;
    end if;
        
    # If the value can be trivially loaded, do so.

    if ea.flags == EA_VALUE then
        if is_number_thing(ea.obj_id) != 0 then
            reg := reg_find_or_load(regs, ea);
            return;
        elseif (regs & REG_A) != 0 then
            reg := reg_find_or_load(REG_A, ea);
            return;
        end if;
    end if;

    # The value is going to have to be indirected through a pointer of
    # some description, as we can't refer to it directly.

    var pointer: RegSet;
    if get_value_of_number(ea.numoff_id) != 0 then
        pointer := REG_INDEX;
    elseif (regs & REG_A) != 0 then
        pointer := REG_16BIT;
    else
        pointer := REG_HL;
    end if;
    pointer := setup_pointer(pointer, ea);

    # Now the pointer is in a register, dereference it.

    reg := reg_alloc(regs);
    insn_init();
    insn.datareg := reg;
    insn.otherreg := pointer;
    insn.mode := MODE_IND;
    insn.offset := get_value_of_number(ea.numoff_id) as int16;
    insn_load_object();

    reg_free(pointer);
end sub;

sub setup_8bit_rhs_insn(ea: [EffectiveAddress]): (otherreg: RegSet)
    # If the RHS is already in a register, use that.

    if reg_is_cached(ea) != 0 then
        otherreg := reg_find_or_load(REG_8BIT, ea);

        insn_init();
        insn.datareg := REG_A;
        insn.otherreg := otherreg;
        insn.mode := MODE_DIR;
        return;
    end if;
        
    # If the RHS is a constant, use *that*.

    if (ea.flags == EA_VALUE) and (is_number_thing(ea.obj_id) != 0) then
        insn_init_from_ea(ea);
        otherreg := 0;
        return;
    end if;

    # The RHS is a value in memory of some description. We can't load or
    # refer to it directly, so instead get the address in an indexable
    # register and use an indirection.

    if get_value_of_number(ea.numoff_id) != 0 then
        otherreg := REG_INDEX;
    else
        otherreg := REG_HL;
    end if;
    otherreg := setup_pointer(otherreg, ea);

    insn_init();
    insn.datareg := REG_A;
    insn.otherreg := otherreg;
    insn.mode := MODE_IND;
end sub;

sub arch_gen_copy_byte(iop: [BEIop])
    $if DEBUG
        print("* GENERATE copy byte: ");
        print_ea(&iop.left);
        print(" -> ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    var location: RegSet := load_complex_8bit_value(REG_A, &iop.left);
    reg_value_is_changing(&iop.dest);
    reg_cache_value(location, &iop.dest);
    reg_value_is_precious(&iop.dest);
end sub;

sub arch_gen_regular_alu_byte(iop: [BEIop], opcode: uint8)
    $if DEBUG
        print("* GENERATE regular alu byte op 0x");
        print_hex_i8(opcode);
        print(": ");
        print_ea(&iop.left);
        print(",");
        print_ea(&iop.right);
        print(" -> ");
        print_ea(&iop.dest);
        print_newline();
    $endif

    reg_find_or_load_fixed(REG_A, &iop.left);

    var indreg: RegSet := setup_8bit_rhs_insn(&iop.right);
    reg_value_is_changing(&iop.dest);
    reg_evict(REG_A);

    insn_8bit_aluop(opcode);
    reg_cache_value(REG_A, &iop.dest);
    reg_value_is_precious(&iop.dest);
end sub;

sub arch_gen_cmp_8bit(ciop: [BEConditionalIop], liop: [LabelIop])
    $if DEBUG
        print("* GENERATE: compare bytes 0x");
        print_hex_i8(ciop.iop_kind);
        print(": ");
        print_ea(&ciop.left);
        print(", ");
        print_ea(&ciop.right);
        print(" => label 0x");
        print_hex_i8(liop.label);
        print_newline();
    $endif

    var fallthrough_label: uint8;
    var iopkind: uint8 := ciop.iop_kind;

    reg_find_or_load_fixed(REG_A, &ciop.left);
    var indreg: RegSet := setup_8bit_rhs_insn(&ciop.right);

    var invertflag: uint8;
    var destlabel: uint8;
    if liop.label == ciop.iftrue_label then
        invertflag := 0x00;
        fallthrough_label := ciop.iftrue_label;
        destlabel := ciop.iffalse_label;
    else
        invertflag := 0x08;
        fallthrough_label := ciop.iffalse_label;
        destlabel := ciop.iftrue_label;
    end if;

    if iopkind == IOP_BE_BEQ then
        insn_8bit_aluop(0xFE); # cp *
        write_cg_conditional_iop(0xC2 ^ invertflag, destlabel); # jp nz
    else
        if (iopkind & IOP_TYPE_COMPARISON_S) != 0 then
            # BLTS
            reg_evict(REG_A);
            insn_8bit_aluop(0xD6); # sub *

            var skipxorlabel: uint8 := create_label();
            write_cg_conditional_iop(0xE2 ^ invertflag, skipxorlabel); # jp po
            write_word(0x80EE); # xor 0x80
            write_label_iop(skipxorlabel);

            write_cg_conditional_iop(0xF2 ^ invertflag, destlabel); # jp p
        else
            # BLTU
            insn_8bit_aluop(0xFE); # cp *
            write_cg_conditional_iop(0xD2 ^ invertflag, destlabel); # jp c
        end if;
    end if;

    if liop.label != fallthrough_label then
        write_cg_conditional_iop(0xC3, fallthrough_label); # jp
    end if;
end sub;
