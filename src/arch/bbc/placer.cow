sub arch_calculate_iop_size(iop: [Iop]): (size: uint8)
    sub do_cond(iop: [CG6502ConditionalIop])
        if iop.opcode == 0x80 then
            # BRA is special; it always turns into a JMP abs instruction.
            size := 3;
        elseif pass == 1 then
            # Worst case.
            size := 5; # Long branch
        else
            var target: uint16 := labels[iop.label];
            var offset: int16 := target - (pc + 2);
            if (offset < -128) or (offset > 127) then
                size := 5;
            else
                size := 2;
            end if;
        end if;
    end sub;

    var iopkind: uint8 := iop.iop_kind;
    if iopkind == IOP_CG_6502_COND then
        do_cond(iop as [CG6502ConditionalIop]);
    else
        print("unhandled iop 0x");
        print_hex_i8(iopkind);
        halt();
    end if;
end sub;

sub arch_generate_iop(iop: [Iop]): (size: uint8)
    sub do_cond(iop: [CG6502ConditionalIop])
        var buf: uint8[3];
        if iop.opcode == 0x80 then
            size := 3;
            write_byte(0x4C); # JMP abs
            write_address_iop(IOP_ADDRESS, current_subroutine_id, labels[iop.label]);
        else
            var target: uint16 := labels[iop.label];
            var offset: int16 := target - (pc + 2);
            if (offset < -128) or (offset > 127) then
                size := 5;
                buf[0] := iop.opcode ^ 0x10; # invert condition
                buf[1] := 3;                 # skip jump
                buf[2] := 0x4C;              # JMP abs
                write_bytes_iop(3, &buf[0]);
                write_address_iop(IOP_ADDRESS, current_subroutine_id, labels[iop.label]);
            else
                size := 2;
                buf[0] := iop.opcode;
                buf[1] := offset;
                write_bytes_iop(2, &buf[0]);
            end if;
        end if;
    end sub;

    var iopkind: uint8 := iop.iop_kind;
    if iopkind == IOP_CG_6502_COND then
        do_cond(iop as [CG6502ConditionalIop]);
    else
        print("unhandled iop 0x");
        print_hex_i8(iopkind);
        halt();
    end if;
end sub;

