var membase: [int8] := LOMEM;

var current_arg: int8 := 1;
var current_filename: [int8];
var current_fd: int8 := -1;
var current_byte: int8 := -1;
var peeked_byte: int8 := -1;
var line_number: int16;

sub next_byte()
    current_byte := peeked_byte;

    loop
        if current_fd != -1 then
            file_getchar(current_fd, peeked_byte);
            if peeked_byte == -1 then
                file_close(current_fd);
                current_fd := -1;
                peeked_byte := 10;
            end if;
            return;
        end if;

        current_filename := ARGV[current_arg];
        if current_filename != 0 then
            current_arg := current_arg + 1;
            file_openin(current_filename, current_fd);
            line_number := 1;
        end if;

        if current_fd == -1 then
            peeked_byte := -1;
            return;
        end if;
    end loop;
end sub;

sub error_with_location()
    print(", at about line ");
    print_i16(line_number);
    print(" of ");
    print(current_filename);
    print_newline();
    exit(1);
end sub;

var input_buffer: int8[256];
var buffer_index: int8 := 0;

sub read_identifier()
    loop
        input_buffer[buffer_index] := current_byte;
        buffer_index := buffer_index + 1;

        var type: int8;
        classify_char_type(peeked_byte, type);
        if (type != ALPHABETIC) & (type != DIGIT) then
            break;
        end if;
        next_byte();
    end loop;

    input_buffer[buffer_index] := 0;
    print("identifier<>");
end sub;

sub read_number()
    loop
        input_buffer[buffer_index] := current_byte;
        buffer_index := buffer_index + 1;

        var type: int8;
        classify_char_type(peeked_byte, type);
        if (type != DIGIT) then
            break;
        end if;
        next_byte();
    end loop;

    input_buffer[buffer_index] := 0;
    print("number<>");
end sub;

sub read_symbol()
    if current_byte == '-' then
        var type: int8;
        classify_char_type(peeked_byte, type);
        if type == DIGIT then
            read_number();
            return;
        end if;
    end if;

    input_buffer[0] := current_byte;
    if peeked_byte == '=' then
        input_buffer[1] := peeked_byte;
        input_buffer[2] := 0;
        next_byte();
    else
        input_buffer[1] := 0;
    end if;

    print("symbol<");
    print_char(input_buffer[0]);
    print_char(input_buffer[1]);
    print(">");
end sub;

next_byte();
next_byte();
loop
    if current_byte == -1 then
        break;
    end if;

    var type: int8;
    classify_char_type(current_byte, type);
    if type == NEWLINE then
        line_number := line_number + 1;
    elseif type == WHITESPACE then
    elseif type == ALPHABETIC then
        read_identifier();
    elseif type == SYMBOL then
        read_symbol();
    elseif type == DIGIT then
        read_number();
    else
        print("unknown char type ");
        print_i8(type);
        error_with_location();
    end if;
    next_byte();
end loop;
print_newline();
