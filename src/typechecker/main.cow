sub check_type_compatibility(left_type_id: uint16, right_type_id: uint16): (result_type_id: uint16)
    var left: uint16 := left_type_id;
    var right: uint16 := right_type_id;

    loop
        if left == right then
            result_type_id := left_type_id;
            return;
        elseif (is_number_type_thing(left) != 0) and (right == constant_type) then
            result_type_id := left_type_id;
            return;
        elseif (is_number_type_thing(right) != 0) and (left == constant_type) then
            result_type_id := right_type_id;
            return;
        end if;

        var left_type: [PointerThing] := find_thing(left) as [PointerThing];
        var right_type: [PointerThing] := find_thing(right) as [PointerThing];
        if (left_type.thing_type != THING_POINTERT) or (right_type.thing_type != THING_POINTERT) then
            break;
        end if;

        left:= left_type.element_type_id;
        right:= right_type.element_type_id;
    end loop;

    print_thing(left_type_id);
    print_type_name(left_type_id);
    print(" and ");
    print_thing(right_type_id);
    print_type_name(right_type_id);
    print(" are not compatible in this context");
    halt();
end sub;

sub process_subroutine()
    var subroutine: [SubroutineThing] := find_thing(current_subroutine_id) as [SubroutineThing];
    init_stack();
    current_namespace_id := subroutine.namespace_id;

    sub special_named_goto(iop: [NamedGotoIop])
        var label_id: uint16 := deref_symbol_or_fail(iop.label_id);
        var labelthing: [LabelThing] := find_thing(label_id) as [LabelThing];
        if labelthing.thing_type != THING_LABEL then
            print("not a label");
            halt();
        end if;

        var goto_iop: [GotoIop] := iop as [GotoIop];
        goto_iop.iop_size := GotoIop@bytes;
        goto_iop.iop_kind := IOP_GOTO;
        goto_iop.label := labelthing.label;
    end sub;

    sub fex_push(iop: [FEPushIop])
        var thing: [Thing] := find_thing(iop.thing_id);
        if thing.thing_type == THING_IDENTIFIER then
            iop.thing_id := deref_symbol_or_fail(iop.thing_id);
            thing := find_thing(iop.thing_id);
        end if;

        var is_rvalue: uint8;
        if thing.thing_type == THING_NUMBER then
            iop.type_id := constant_type;
            is_rvalue := 1;
        elseif thing.thing_type == THING_STRING then
            iop.type_id := pointer_of(int8_type, uint8_type);
            is_rvalue := 1;
        elseif (thing.thing_type & THING_TYPED) != 0 then
            var typed_thing: [TypedThing] := thing as [TypedThing];
            if typed_thing.type_id == 0 then
                print("forward reference to type inferred value");
                halt();
            end if;
            iop.type_id := typed_thing.type_id;
            is_rvalue := 0;
        else
            print("can't push things of type 0x");
            print_hex_i8(thing.thing_type);
            halt();
        end if;

        push_type(iop.type_id, is_rvalue);
    end sub;

    sub fex_swap()
        var t1: uint16;
        var r1: uint8;
        (t1, r1) := pop_type();
        var t2: uint16;
        var r2: uint8;
        (t2, r2) := pop_type();
        push_type(t1, r1);
        push_type(t2, r2);
    end sub;

    sub fex_assign()
        var src_type_id: uint16;
        var src_is_rvalue: uint8;
        (src_type_id, src_is_rvalue) := pop_type();
        var dest_type_id: uint16;
        var dest_is_rvalue: uint8;
        (dest_type_id, dest_is_rvalue) := pop_type();

        if dest_is_rvalue != 0 then
            print("cannot assign to rvalue");
            halt();
        end if;

        var type_id: uint16 := check_type_compatibility(src_type_id, dest_type_id);
    end sub;

    sub fe_simple_alu2op(iop: [FETypedIop])
        var right_type_id: uint16;
        var right_is_rvalue: uint8;
        (right_type_id, right_is_rvalue) := pop_type();
        var left_type_id: uint16;
        var left_is_rvalue: uint8;
        (left_type_id, left_is_rvalue) := pop_type();

        # if you change this, change the non-pointer case in addsub as well
        iop.type_id := check_type_compatibility(left_type_id, right_type_id);
        push_type(iop.type_id, 1);
    end sub;

    sub fe_simple_alu1op(iop: [FETypedIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();

        if (is_number_type_thing(type_id) == 0) then
            print("can't do this to non-numeric type ");
            print_type_name(type_id);
            halt();
        end if;

        iop.type_id := type_id;
        push_type(type_id, 1);
    end sub;

    sub maybe_signed_biop(iop: [Iop], signed_feiop: uint8, unsigned_feiop: uint8)
        var right_type_id: uint16;
        var right_is_rvalue: uint8;
        (right_type_id, right_is_rvalue) := pop_type();
        var left_type_id: uint16;
        var left_is_rvalue: uint8;
        (left_type_id, left_is_rvalue) := pop_type();

        if (get_thing_type(left_type_id) == THING_SIGNEDT)
            or (get_thing_type(right_type_id) == THING_SIGNEDT)
        then
            iop.iop_kind := signed_feiop;
        else
            iop.iop_kind := unsigned_feiop;
        end if;

        push_type(left_type_id, left_is_rvalue);
        push_type(right_type_id, right_is_rvalue);
    end sub;

    sub fe_addsub(iop: [FETypedIop])
        var right_type_id: uint16;
        var right_is_rvalue: uint8;
        (right_type_id, right_is_rvalue) := pop_type();
        var left_type_id: uint16;
        var left_is_rvalue: uint8;
        (left_type_id, left_is_rvalue) := pop_type();

        var type_id: uint16;

        var left_type: [PointerThing] := find_thing(left_type_id) as [PointerThing];
        var right_type: [PointerThing] := find_thing(right_type_id) as [PointerThing];
        if left_type.thing_type != THING_POINTERT then
            # this is the same as simple_alu2op above
            type_id := check_type_compatibility(left_type_id, right_type_id);
        elseif (iop.iop_kind == IOP_FE_SUB)
                and (left_type.thing_type == THING_POINTERT)
                and (right_type.thing_type == THING_POINTERT) then
            # Pointer difference.
            type_id := check_type_compatibility(left_type_id, right_type_id);
            type_id := int16_type;
        elseif (left_type.thing_type == THING_POINTERT)
            and (is_number_type_thing(right_type_id) != 0)
        then
            # Pointer offsetting.
            type_id := check_type_compatibility(int16_type, right_type_id);
            type_id := left_type_id;
        else
            print("unsupported add/sub combination");
            halt();
        end if;

        iop.type_id := type_id;
        push_type(type_id, 1);
    end sub;

    sub fe_index(iop: [FETypedIop])
        var right_type_id: uint16;
        var right_is_rvalue: uint8;
        (right_type_id, right_is_rvalue) := pop_type();
        var left_type_id: uint16;
        var left_is_rvalue: uint8;
        (left_type_id, left_is_rvalue) := pop_type();

        var left_type: [WithElementsThing] := find_thing(left_type_id) as [WithElementsThing];
        if is_indexable_type_thing(left_type_id) == 0 then
            print_type_name(left_type_id);
            print(" is not indexable");
            halt();
        end if;
        var right_type: [TypeThing] := find_thing(right_type_id) as [TypeThing];
        var element_type: [TypeThing] := find_thing(left_type.element_type_id) as [TypeThing];

        var index_type_id: uint16 := check_type_compatibility(right_type_id, left_type.index_type_id);
        if is_number_type_thing(index_type_id) == 0 then
            print("index type ");
            print_type_name(index_type_id);
            print(" is not numeric");
            halt();
        end if;

        iop.type_id := left_type.element_type_id;
        push_type(iop.type_id, 0);
    end sub;

    sub fe_addressof(iop: [FETypedIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();

        if is_rvalue != 0 then
            print("cannot take the address of an rvalue");
            halt();
        end if;

        iop.type_id := pointer_of(type_id, uint16_type);
        push_type(iop.type_id, 1);
    end sub;

    sub fex_memberof(iop: [FEMemberIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();

        var type: [Thing] := find_thing(type_id);
        if type.thing_type == THING_POINTERT then
            # Implicit dereference of pointer.
            var pointer_type: [PointerThing] := type as [PointerThing];
            type_id := pointer_type.element_type_id;
            type := find_thing(type_id);
        end if;
        if type.thing_type != THING_RECORDT then
            print_type_name(type_id);
            print(" is not a record type or a pointer to a record type");
            halt();
        end if;
        var record_type: [RecordThing] := type as [RecordThing];

        var symbol_id: uint16 := find_symbol_recursively(iop.thing_id, record_type.namespace_id);
        if symbol_id == 0 then
            show_identifier(iop.thing_id);
            print(" is not a member of ");
            print_type_name(type_id);
            halt();
        end if;
        var symbol: [SymbolThing] := find_thing(symbol_id) as [SymbolThing];
        var member: [MemberThing] := find_thing(symbol.value_id) as [MemberThing];

        iop.type_id := member.type_id;
        iop.thing_id := symbol.value_id;
        push_type(iop.type_id, 0);
    end sub;

    sub fex_parameter(direction: uint8, iop: [FEParameterIop])
        var thing_id: uint16 := iop.subroutine_id;
        var thing: [Thing] := find_thing(thing_id);
        if thing.thing_type == THING_IDENTIFIER then
            thing_id := deref_symbol_or_fail(thing_id);
            thing := find_thing(thing_id);
        end if;
        if thing.thing_type != THING_SUBROUTINE then
            print("subroutine_id not a subroutine");
            halt();
        end if;

        var parameter_id: uint16 := find_nth_parameter(
            thing_id, direction, iop.parameter);
        if parameter_id == 0 then
            print("invalid parameter id");
            halt();
        end if;
        var parameter: [ParameterThing] := find_thing(parameter_id) as [ParameterThing];

        var push_iop: [FEPushIop] := iop as [FEPushIop];
        push_iop.iop_size := FEPushIop@bytes;
        push_iop.iop_kind := IOP_FEX_PUSH;
        push_iop.type_id := parameter.type_id;
        push_iop.thing_id := parameter_id;
        push_type(parameter.type_id, 0);
    end sub;

    sub fe_materialise(iop: [FETypedIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();

        iop.type_id := type_id;
        push_type(type_id, 1);
    end sub;

    sub fe_conditional(iop: [FEConditionalIop])
        var right_type_id: uint16;
        var right_is_rvalue: uint8;
        (right_type_id, right_is_rvalue) := pop_type();
        var left_type_id: uint16;
        var left_is_rvalue: uint8;
        (left_type_id, left_is_rvalue) := pop_type();

        var type_id: uint16 := check_type_compatibility(left_type_id, right_type_id);
        check_stack_is_empty();
    end sub;

    sub fe_cast(iop: [FETypedIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();

        var input_type: [TypeThing] := find_thing(type_id) as [TypeThing];
        var output_type: [TypeThing] := find_thing(iop.type_id) as [TypeThing];
        if input_type.width < output_type.width then
            if input_type.thing_type == THING_SIGNEDT then
                iop.iop_kind := IOP_FE_SEXT;
            else
                iop.iop_kind := IOP_FE_ZEXT;
            end if;
        end if;

        push_type(iop.type_id, 1);
    end sub;

    sub fe_shift(iop: [FETypedIop], signed_feiop: uint8, unsigned_feiop: uint8)
        var right_type_id: uint16;
        var right_is_rvalue: uint8;
        (right_type_id, right_is_rvalue) := pop_type();
        var left_type_id: uint16;
        var left_is_rvalue: uint8;
        (left_type_id, left_is_rvalue) := pop_type();

        var left_type: [TypeThing] := find_thing(left_type_id) as [TypeThing];
        if left_type_id == constant_type then
            print("you must cast constants to a real type before you can shift them");
            halt();
        end if;
        if is_number_type_thing(left_type_id) == 0 then
            print("can't shift non-numeric type ");
            print_type_name(left_type_id);
            halt();
        end if;

        var right_type: [TypeThing] := find_thing(right_type_id) as [TypeThing];
        if (right_type_id != uint8_type) and (right_type_id != constant_type) then
            print("shift type ");
            print_type_name(left_type_id);
            print(" is not uint8");
            halt();
        end if;

        if left_type.thing_type == THING_SIGNEDT then
            iop.iop_kind := signed_feiop;
        else
            iop.iop_kind := unsigned_feiop;
        end if;

        iop.type_id := left_type_id;
        push_type(left_type_id, 1);
    end sub;

    sub fe_call(iop: [CallIop])
        var thing: [SubroutineThing] := find_thing(iop.thing_id) as [SubroutineThing];
        if thing.thing_type == THING_IDENTIFIER then
            iop.thing_id := deref_symbol_or_fail(iop.thing_id);
            thing := find_thing(iop.thing_id) as [SubroutineThing];
        end if;
        if thing.thing_type != THING_SUBROUTINE then
            print("subroutine_id not pointing at subroutine");
            halt();
        end if;

        if (thing.input_parameter_count != iop.input_parameter_count)
                or (thing.output_parameter_count != iop.output_parameter_count) then
            show_name_of(iop.thing_id);
            print(" has ");
            print_i8(thing.input_parameter_count);
            print(" inputs and ");
            print_i8(thing.output_parameter_count);
            print(" outputs, but was called with ");
            print_i8(iop.input_parameter_count);
            print(" and ");
            print_i8(iop.output_parameter_count);
            halt();
        end if;
    end sub;

    sub fe_bytesof(iop: [FETypedIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();
        var width: uint16 := get_width_of_type(type_id);

        $if DEBUG
            print("* pushing width of type ");
            print_type_name(type_id);
            print(" = 0x");
            print_hex_i16(width);
            print_newline();
        $endif

        write_untyped_iop(IOP_FEX_DROP);
        
        var push_iop: [FEPushIop] := iop as [FEPushIop];
        push_iop.iop_size := FEPushIop@bytes;
        push_iop.iop_kind := IOP_FEX_PUSH;
        push_iop.type_id := constant_type;
        push_iop.thing_id := add_number_by_value(width as int32);

        push_type(constant_type, 1);
    end sub;

    sub fe_sizeof(iop: [FETypedIop])
        var type_id: uint16;
        var is_rvalue: uint8;
        (type_id, is_rvalue) := pop_type();

        var left_type: [ArrayThing] := find_thing(type_id) as [ArrayThing];
        if (left_type.thing_type != THING_ARRAYT) then
            print("@size only works on arrays");
            halt();
        end if;

        write_untyped_iop(IOP_FEX_DROP);

        var push_iop: [FEPushIop] := iop as [FEPushIop];
        push_iop.iop_size := FEPushIop@bytes;
        push_iop.iop_kind := IOP_FEX_PUSH;
        push_iop.type_id := constant_type;
        push_iop.thing_id := add_number_by_value(left_type.element_count as int32);

        push_type(constant_type, 1);
    end sub;

    loop
        var iop: [Iop] := read_iop();
        $if DEBUG
            print_newline();
            print_stack();
            print("* read iop 0x");
            print_hex_i8(iop.iop_kind);
            print_newline();
        $endif

        var kind: uint8 := iop.iop_kind;
        var ioptype: uint8 := kind & IOP_TYPE_MASK;

        if ioptype == IOP_TYPE_UNTYPED then
            # do nothing
        elseif (kind == IOP_END) or
            (kind == IOP_ADDRESS)
            or (kind == IOP_ADDRESSLO)
            or (kind == IOP_ADDRESSHI)
        then
            check_stack_is_empty();
        elseif kind == IOP_CALL then
            fe_call(iop as [CallIop]);
        elseif kind == IOP_NAMEDGOTO then
            special_named_goto(iop as [NamedGotoIop]);
        elseif ioptype == IOP_TYPE_UNTYPED then
            write_iop(iop);
        elseif kind == IOP_FEX_SWAP then
            fex_swap();
        elseif kind == IOP_FEX_PUSH then
            fex_push(iop as [FEPushIop]);
        elseif kind == IOP_FEX_ASSIGN then
            fex_assign();
        elseif (kind == IOP_FE_ADD) or (kind == IOP_FE_SUB) then
            fe_addsub(iop as [FETypedIop]);
        elseif (kind == IOP_FE_MUL)
            or (kind == IOP_FE_AND)
            or (kind == IOP_FE_OR)
            or (kind == IOP_FE_EOR)
        then
            fe_simple_alu2op(iop as [FETypedIop]);
        elseif (kind == IOP_FE_DIV) or (kind == IOP_FE_DIVS) or (kind == IOP_FE_DIVU) then
            maybe_signed_biop(iop, IOP_FE_DIVS, IOP_FE_DIVU);
            fe_simple_alu2op(iop as [FETypedIop]);
        elseif (kind == IOP_FE_MOD) or (kind == IOP_FE_MODS) or (kind == IOP_FE_MODU) then
            maybe_signed_biop(iop, IOP_FE_MODS, IOP_FE_MODU);
            fe_simple_alu2op(iop as [FETypedIop]);
        elseif (kind == IOP_FE_NEG) or (kind == IOP_FE_NOT) then
            fe_simple_alu1op(iop as [FETypedIop]);
        elseif kind == IOP_FE_LSHIFT then
            fe_shift(iop as [FETypedIop], IOP_FE_LSHIFT, IOP_FE_LSHIFT);
        elseif (kind == IOP_FE_RSHIFT) or (kind == IOP_FE_RSHIFTS) or (kind == IOP_FE_RSHIFTU) then
            fe_shift(iop as [FETypedIop], IOP_FE_RSHIFTS, IOP_FE_RSHIFTU);
        elseif kind == IOP_FE_INDEX then
            fe_index(iop as [FETypedIop]);
        elseif kind == IOP_FEX_INPUTPARAM then
            fex_parameter(DIRECTION_IN, iop as [FEParameterIop]);
        elseif kind == IOP_FEX_OUTPUTPARAM then
            fex_parameter(DIRECTION_OUT, iop as [FEParameterIop]);
        elseif kind == IOP_FE_MATERIALISE then
            fe_materialise(iop as [FETypedIop]);
        elseif kind == IOP_FE_ADDRESSOF then
            fe_addressof(iop as [FETypedIop]);
        elseif kind == IOP_FEX_MEMBEROF then
            fex_memberof(iop as [FEMemberIop]);
        elseif kind == IOP_FE_BYTESOF then
            fe_bytesof(iop as [FETypedIop]);
        elseif kind == IOP_FE_SIZEOF then
            fe_sizeof(iop as [FETypedIop]);
        elseif kind == IOP_FEX_BEQ then
            fe_conditional(iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BGT then
            maybe_signed_biop(iop, IOP_FEX_BGTS, IOP_FEX_BGTU);
            fe_conditional(iop as [FEConditionalIop]);
        elseif kind == IOP_FEX_BLT then
            maybe_signed_biop(iop, IOP_FEX_BLTS, IOP_FEX_BLTU);
            fe_conditional(iop as [FEConditionalIop]);
        elseif kind == IOP_FE_CAST then
            fe_cast(iop as [FETypedIop]);
        else
            print("unsupported iop 0x");
            print_hex_i8(kind);
            halt();
        end if;
        write_iop(iop);
        if kind == IOP_END then
            break;
        end if;
    end loop;
end sub;

sub process()
    loop
        var iheader: [IHeader] := read_iop_header();
        if iheader.thing_id == 0 then
            break;
        end if;

        write_iop_header(iheader);
        current_subroutine_id := iheader.thing_id;

        $if DEBUG
            print("\n******* SUBROUTINE ");
            show_name_of(current_subroutine_id);
            print_newline();
            print_newline();
        $endif

        process_subroutine();
    end loop;
    write_terminating_iop_header();
end sub;

process();
