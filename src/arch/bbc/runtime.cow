sub print(ptr: [int8])
    var index: uint8 := 0;
    loop
        var c: int8 := ptr[index];
        if c == 0 then
            return;
        end if;
        print_char(c);
        index := index + 1;
    end loop;
end sub;

sub print_char(char: uint8)
    @bytes 0xAD;   # LDA abs
    @words &char;
    @bytes 0x4C;   # JMP abs
    @words 0xFFE3; # OSASCII
end sub;

sub print_newline()
    @bytes 0x4c;   # JMP abs
    @words 0xFFE7; # OSNEWL
end sub;

sub print_i8(value: uint8)
end sub;

sub print_i16(value: uint16)
end sub;

sub print_i32(value: uint32)
end sub;

sub print_hex_i8(value: uint8)
end sub;

sub print_hex_i16(value: uint16)
end sub;

sub print_hex_i32(value: uint32)
end sub;

sub file_openin(filename: [int8]): (fd: uint8)
end sub;

sub file_openout(filename: [int8]): (fd: uint8)
end sub;

sub file_getblock(fd: uint8, ptr: [int8], length: uint16)
end sub;

sub file_putblock(fd: uint8, ptr: [int8], length: uint16)
end sub;

sub file_seek(fd: uint8, pos: uint32)
end sub;

sub file_ext(fd: uint8): (length: uint32)
end sub;

sub file_eof(fd: uint8): (eof: uint8)
end sub;

sub file_getchar(fd: uint8): (char: int8)
end sub;

sub file_close(fd: uint8)
end sub;

sub exit(status: uint8)
end sub;

sub __mul8u(left: uint8, right: uint8): (result: uint8)
    @bytes 0xA9, 0x00; # LDA #0
    @bytes 0xF0, 0x07; # BEQ start

    # add:
    @bytes 0x18; # CLC
    @bytes 0x6D; # ADC abs
    @words &left;
    # loop:
    @bytes 0x0E; # ASL abs
    @words &left;
    # start:
    @bytes 0x4E; # LSR abs
    @words &right;
    @bytes 0xB0, 0xF4; # BCS add
    @bytes 0xD0, 0xF6; # BNE loop
    @bytes 0x8D; # STA abs
    @words &result;
end sub;

var LOMEM: [int8];
var HIMEM: [int8];
