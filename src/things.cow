const SECTION_UNKNOWN := 0;
const SECTION_CODE := 1;
const SECTION_ROMDATA := 2;
const SECTION_RAMDATA := 3;
const SECTION_NONINITDATA := 4;
const SECTION_POINTERS := 5;

const THING_SYMBOL     := 0x10; # bitfield
const THING_DATA       := 0x30; # bitfield
const THING_TYPEDDATA  := 0x38; # bitfield
const THING_TYPE       := 0x70; # bitfield
const THING_NUMERIC    := 0xf0; # bitfield

const THING_STRING     := 0x01;
const THING_IDENTIFIER := 0x02;
const THING_NUMBER     := 0x03;
const THING_NAMESPACE  := 0x04;

const THING_SUBROUTINE := 0x30;
const THING_LABEL      := 0x31;

const THING_VARIABLE   := 0x38; # bitfield
const THING_PARAMETER  := 0x39;
const THING_ARRAY      := 0x3a;

const THING_RECORD     := 0x70;
const THING_POINTER    := 0x71;

const THING_UNSIGNED   := 0xf0;
const THING_SIGNED     := 0xf1;

record Thing
    thing_size: uint8;
    thing_type: uint8;
    payload: int8[0];
end record;

record NamespaceThing: Thing
    previous_namespace: uint16;
    first_symbol: uint16;
end record;

record SymbolThing: Thing
    name: uint16;
    next_symbol: uint16;
end record;

record TypeThing: SymbolThing
    width: uint8;
end record;

record NumericThing: TypeThing
end record;

record PointerThing: TypeThing
    element_id: uint16;
end record;

record DataThing: SymbolThing
    section: uint8;
end record;

record SubroutineThing: DataThing
    namespace: uint16;
end record;

record TypedThing: DataThing
    type: uint16;
end record;

record VariableThing: TypedThing
end record;

record ParameterThing: VariableThing
    inout: uint8;
end record;

var thing_table: [int8] := LOMEM;
var thing_table_top: uint16 := 1;
thing_table[thing_table_top] := 0;

sub create_thing(type: uint8, size: uint8, out id: uint16)
    id := thing_table_top;
    var thing: [Thing] := &thing_table[id] as [Thing];
    zero_memory(thing as [int8], size + 1);
    thing.thing_size := size;
    thing.thing_type := type;
    thing_table_top := id + size;
end sub;

sub find_thing(id: uint16, out thing: [Thing])
    if id >= thing_table_top then
        print("thing id ");
        print_hex_i16(id);
        print(" out of bounds");
        exit(1);
    end if;

    thing := &thing_table[id] as [Thing];
end sub;

sub print_string_thing(id: uint16)
    var thing: [Thing] := find_thing(id);
    var len: uint8 := thing.thing_size - 2;
    var i: uint8 := 0;
    while i < len loop
        print_char(thing.payload[i]);
        i := i + 1;
    end loop;
end sub;

sub find_thing_by_value(type: uint8, length: uint8, value: [int8], out id: uint16)
    var thing: [Thing];
    id := 1;
    loop
        thing := &thing_table[id] as [Thing];
        if thing.thing_size == 0 then
            break;
        end if;
        if thing.thing_size == (length+2) then
            if thing.thing_type == type then
                if compare_memory(value, &thing_table[id+2], length) == 0 then
                    return;
                end if;
            end if;
        end if;

        id := id + thing.thing_size;
    end loop;

    id := create_thing(type, length+2);
    copy_memory(value, &thing_table[id+2], length);
end sub;

sub save_thing_table(filename: [int8])
    var fd: uint8 := file_openout(filename);
    file_putblock(fd, &thing_table[0], thing_table_top);
    file_close(fd);
end sub;

sub load_thing_table(filename: [int8])
    var fd: uint8 := file_openin(filename);
    thing_table_top := file_ext(fd);
    file_getblock(fd, &thing_table[0], thing_table_top);
    file_close(fd);
    thing_table[thing_table_top] := 0;
end sub;
