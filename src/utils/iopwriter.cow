var iop_out_fcb: FCB;
var old_filename_id: uint16;
var old_linenumber: uint16;

sub init_iop_writer(filename: [int8])
    if fcb_openout(&iop_out_fcb, filename) != 0 then
        print("cannot open output iop file");
        halt();
    end if;
end sub;

sub deinit_iop_writer()
    fcb_close(&iop_out_fcb);
end sub;

sub write_iop_header(header: [IHeader])
    iop_out_fcb.address := header as [int8];
    iop_out_fcb.count := IHeader@bytes;
    fcb_write(&iop_out_fcb);
    old_filename_id := 0;
    old_linenumber := 0;
end sub;

sub write_terminating_iop_header()
    var buf: IHeader[1];
    buf[0].thing_id := 0;
    write_iop_header(&buf[0]);
end sub;

sub raw_write_iop(iop: [Iop])
    iop_out_fcb.address := iop as [int8];
    iop_out_fcb.count := iop.iop_size as uint16;
    fcb_write(&iop_out_fcb);
end sub;

sub write_iop(iop: [Iop])
    if current_filename_id != old_filename_id then
        var fbuf: FilenameIop;
        fbuf.iop_size := FilenameIop@bytes;
        fbuf.iop_kind := IOP_FILENAME;
        fbuf.thing_id := current_filename_id;
        raw_write_iop(&fbuf as [Iop]);
        old_filename_id := current_filename_id;
    end if;

    if current_linenumber != old_linenumber then
        var lbuf: LinenumberIop;
        lbuf.iop_size := LinenumberIop@bytes;
        lbuf.iop_kind := IOP_LINENUMBER;
        lbuf.line_number := current_linenumber;
        raw_write_iop(&lbuf as [Iop]);
        old_linenumber := current_linenumber;
    end if;

    raw_write_iop(iop);
end sub;

sub write_untyped_iop(kind: uint8)
    var obuf: Iop[1];
    obuf[0].iop_kind := kind;
    obuf[0].iop_size := Iop@bytes;
    write_iop(&obuf[0] as [Iop]);
end sub;

sub write_bytes_iop(byte_count: uint8, bytes: [uint8])
    var buf: BytesIop[1];
    buf[0].iop_size := BytesIop@bytes;
    buf[0].iop_kind := IOP_BYTES;
    buf[0].byte_count := byte_count;
    copy_memory(bytes as [int8], &buf[0].bytes[0] as [int8], byte_count as uint16);
    write_iop(&buf[0] as [Iop]);
end sub;

sub write_byte(byte: uint8)
    var buf: uint8[1];
    buf[0] := byte;
    write_bytes_iop(1, &buf[0] as [uint8]);
end sub;

sub write_word(word: uint16)
    var buf: uint16[1];
    buf[0] := word;
    write_bytes_iop(2, &buf[0] as [uint8]);
end sub;

sub write_goto_iop(label: uint8)
    var buf: GotoIop;
    buf.iop_size := GotoIop@bytes;
    buf.iop_kind := IOP_GOTO;
    buf.label := label;
    write_iop(&buf as [Iop]);
end sub;

sub write_address_iop(beiop: uint8, thing_id: uint16, offset: uint16)
    var buf: AddressIop;
    buf.iop_size := AddressIop@bytes;
    buf.iop_kind := beiop;
    buf.thing_id := thing_id;
    buf.offset := offset;
    write_iop(&buf as [Iop]);
end sub;

sub write_label_iop(label: uint8)
    var buf: LabelIop;
    buf.iop_size := LabelIop@bytes;
    buf.iop_kind := IOP_LABEL;
    buf.label := label;
    write_iop(&buf as [Iop]);
end sub;

sub write_cg_6502_mem_iop(opcode: uint8, thing_id: uint16, offset: uint16)
    var buf: CG6502MemIop;
    buf.iop_size := CG6502MemIop@bytes;
    buf.iop_kind := IOP_CG_6502_MEM;
    buf.opcode := opcode;
    buf.thing_id := thing_id;
    buf.offset := offset;
    write_iop(&buf as [Iop]);
end sub;

sub write_cg_6502_conditional_iop(opcode: uint8, label: uint8)
    var buf: CG6502ConditionalIop;
    buf.iop_size := CG6502ConditionalIop@bytes;
    buf.iop_kind := IOP_CG_6502_COND;
    buf.opcode := opcode;
    buf.label := label;
    write_iop(&buf as [Iop]);
end sub;

