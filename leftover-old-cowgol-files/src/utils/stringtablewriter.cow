const FIRST_STRING_ID := 2;
var stringtab: uint8[STRINGTABLE_SIZE];
var stringtab_top: uint16 := FIRST_STRING_ID;
var input_buffer: int8[256];
var buffer_index: uint8 := 0;

sub lookup_string(buffer_ptr: [int8], buffer_len: uint8): (stringid: uint16)
    var ptr: [uint8];

    stringid := FIRST_STRING_ID;
    while stringid != stringtab_top loop
        ptr := &stringtab[stringid] as [uint8];
        var len: uint8 := ptr[0] - 1;
        if len == buffer_len then
            if compare_memory(buffer_ptr, &ptr[1] as [int8], len as uint16) == 0 then
                return;
            end if;
        end if;
        stringid := stringid + (len as uint16) + 1;
    end loop;

    stringid := stringtab_top;
    stringtab_top := stringtab_top + (buffer_len as uint16) + 1;
    if stringtab_top > stringtab@size then
        print("string table overflow\n");
        exit(1);
    end if;

    ptr := &stringtab[stringid] as [uint8];
    ptr[0] := buffer_len + 1;
    copy_memory(buffer_ptr, &ptr[1] as [int8], buffer_len as uint16);
end sub;

sub load_string_table(filename: [int8])
    print("reading string table: ");

    var ptr: [uint16] := &stringtab[0] as [uint16];
    stringtab_top := file_load(filename, ptr as [int8], STRINGTABLE_SIZE);
    stringtab_top := ptr[0];
    print_i16(stringtab_top);
    print(" bytes\n");
end sub;

sub save_string_table(filename: [int8])
    print("writing string table: ");
    print_i16(stringtab_top);
    print(" bytes\n");

    var ptr: [uint16] := &stringtab[0] as [uint16];
    ptr[0] := stringtab_top;
    file_save(filename, ptr as [int8], stringtab_top);
end sub;

sub show_string(string_id: uint16)
    print("[a string]");
end sub;
