include "cowgol.coh";
include "argv.coh";
include "malloc.coh";
include "strings.coh";
include "file.coh";

typedef string := [uint8];

var inputfile: string := (0 as string);
var outputfile: string := (0 as string);

include "src/cowcom/types.coh";
include "src/cowcom/allocator.coh";
include "inssel.decl.coh";
include "parser.tokens.coh";
include "src/cowcom/lexer.coh";
include "src/cowcom/midcodec.coh";
include "src/cowcom/emitter.coh";
include "src/cowcom/codegen.coh";
include "src/cowcom/symbols.coh";
include "src/cowcom/expressions.coh";
include "parser.coh";

sub PrintFreeMemory()
	print_i16((GetFreeMemory() >> 10) as uint16);
	print("kB free\n");
end sub;

sub SyntaxError()
	print("syntax error: cowcom [-Ipath] <infile> <outfile>\n");
	ExitWithError();
end sub;

sub ParseArguments()
	ArgvInit();

	loop
		var arg := ArgvNext();
		if arg == (0 as string) then
			break;
		end if;

		if [arg] == '-' then
			arg := arg + 1;
			if [arg] == 'I' then
				arg := arg + 1;
				LexerAddIncludePath(arg);
			else
				SyntaxError();
			end if;
		else
			if inputfile == (0 as string) then
				inputfile := arg;
			elseif outputfile == (0 as string) then
				outputfile := arg;
			else
				SyntaxError();
			end if;
		end if;
	end loop;

	if (inputfile == (0 as string)) or (outputfile == (0 as string)) then
		SyntaxError();
	end if;
end sub;

# This routine is a hack and shouldn't be here.

	sub ArchInitTypes()
		uint32_type := MakeNumberType(4, 0, "uint32");
		int32_type := MakeNumberType(4, 1, "int32");
		uint16_type := MakeNumberType(2, 0, "uint16");
		int16_type := MakeNumberType(2, 1, "int16");
		uint8_type := MakeNumberType(1, 0, "uint8");
		int8_type := MakeNumberType(1, 1, "int8");

		intptr_type := uint16_type;
		AddAliasString("intptr", intptr_type);
	end sub;

print("COWCOM: ");
PrintFreeMemory();

ParseArguments();
LexerAddIncludePath("./");
LexerIncludeFile(inputfile);

current_subr := Alloc(@bytesof Subroutine) as [Subroutine];
current_subr.name := "__main";
current_subr.externname := "cmain";

ArchInitTypes();
EmitterOpenfile(outputfile);
EmitterDeclareSubroutine(current_subr);
Generate(MidStartfile());
Generate(MidStartsub(current_subr));

ParserInit();
loop
	var justbefore: uint32 := 1;
	var yymajor := LexerReadToken();
	case yymajor is
		when NUMBER:
			ParserFeedToken(yymajor, MakeNumberTokenData());

		when ID:
			ParserFeedToken(yymajor, MakeStringTokenData());

		when STRING:
			ParserFeedToken(yymajor, MakeStringTokenData());

		when else:
			ParserFeedToken(yymajor, 0 as [Token]);
	end case;
	if yymajor == 0 then
		break;
	end if;
end loop;
ParserDeinit();

Generate(MidEndsub(current_subr));
Generate(MidEndfile());
EmitterClosefile();

print("done: ");
PrintFreeMemory();

