# %include sections from the grammar
%%

# makeheaders token definitions
%%

# control settings
%%

record yyStackEntry
	stateno: YYACTIONTYPE;
	major: YYCODETYPE;
	minor: YYMINORTYPE;
end record;

var yytos: [yyStackEntry];
var yystack: yyStackEntry[YYSTACKDEPTH];
var yystackend: [yyStackEntry];
var yyerrcnt: int8;
typedef YYSTACKPTR := @indexof yystack;

# parsing tables
%%

# fallback rules
%%

# token names
var yyTokenName: [uint8][] := { 
%%
};

# rule names
var yyRuleName: [uint8][YYNRULE] := {
%%
};

# destructors
sub yy_destructor(yymajor: YYCODETYPE, yypminor: [YYMINORTYPE])
%%
end sub;

# stack overflow code

sub yy_pop_parser_stack()
	yytos := yytos - @bytesof yyStackEntry;
	yy_destructor(yytos.major, &yytos.minor);
end sub;

sub yy_pop_all_parser_stack()
	while yytos != &yystack[0] loop
		yy_pop_parser_stack();
	end loop;
end sub;

sub yy_stack_overflow()
	yy_pop_all_parser_stack();
%%
end sub;

# For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
# of that rule
var yyRuleInfoLhs: YYCODETYPE[] := {
%%
};

# For rule J, yyRuleInfoNRhs[J] contains the negative of the number
# of symbols on the right-hand side of that rule.
var yyRuleInfoNRhs: int8[] := {
%%
};

# reduce actions
sub yy_reduce(action: YYACTIONTYPE, major: YYCODETYPE, minor: ParseTOKENTYPE): (newaction: YYACTIONTYPE)
%%
end sub;

# parse failure code
sub yy_parse_failed()
	yy_pop_all_parser_stack();
%%
end sub;

# syntax error code
sub yy_syntax_error(yymajor: YYCODETYPE, yyminor: ParseTOKENTYPE)
%%
end sub;

# parse accept code
sub yy_accept()
%%
end sub;

