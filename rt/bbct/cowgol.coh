var LOMEM: [uint8];
var _args: [uint8];
@asm "lda #<LOMEM";
@asm "sta ", LOMEM;
@asm "sta ", _args;
@asm "lda #>LOMEM";
@asm "sta ", LOMEM, "+1";
@asm "sta ", _args, "+1";

var HIMEM: [uint8] := 0xf800 as [uint8];

sub _ReadArguments() is
	# The system provides a zero-page block for calling MOS routines.

	record MosBlock is
		ioptr: uint16;
		hiptr: uint16;
		value: uint8;
	end record;
	var p: [MosBlock];

	@asm "lda #<mos";
	@asm "sta 0+", p;
	@asm "lda #0";
	@asm "sta 1+", p;

	@asm "lda #1";
	@asm "ldy #0";
	@asm "ldx #<mos";
	@asm "jsr $ffda"; # OSARGS

	# OSARGS has written a 32-byte address into ioptr and hiptr. We can
	# now use OSWORD to read bytes from the I/O processor into language
	# processor memory where we can get at it

	loop
		@asm "lda #5";
		@asm "ldx #<mos";
		@asm "ldy #>mos";
		@asm "jsr $fff1";

		var c := p.value as intptr as uint8;
		if c == 13 then
			[LOMEM] := 0;
			break;
		end if;
		[LOMEM] := c;
		p.ioptr := p.ioptr + 1;
		LOMEM := @next LOMEM;
	end loop;
	LOMEM := @next LOMEM;
end sub;
_ReadArguments();

sub ExitWithError() is
	@asm "brk";
	@asm ".byte 0, 65, 66, 69, 78, 68, 0";
end sub;

sub AlignUp(in: intptr): (out: intptr) is
	out := in;
end sub;

sub print_char(c: uint8) is
	@asm "lda ", c;
	@asm "cmp #$0a";
	@asm "bne *+4";
	@asm "lda #$0d";
	@asm "jsr $ffe3"; # OSASCII
end sub;

sub MemSet(buf: [uint8], byte: uint8, len: uint16) is
	var bufend := buf + len;
	loop
		if buf == bufend then
			return;
		end if;
		[buf] := byte;
		buf := buf + 1;
	end loop;
end sub;

include "common.coh";

