var LOMEM: [uint8];
var HIMEM: [uint8];

@asm "\tmov bss_end+2,", LOMEM;
@asm "\tmov r0,", HIMEM;

sub Exit() is
	@asm "\tbr exit";
end sub;

sub ExitWithError() is
	@asm "\tmov #1, r0";
	@asm "\ttrap 0";
end sub;

sub AlignUp(in: intptr): (out: intptr) is
	out := (in + 1) & ~1;
end sub;

sub print_char(c: uint8) is
	@asm "\tmov #1, r0";
	@asm "\tmov (r0), (sp)+";
	@asm "\tmov ", c, ", (sp)+";
	@asm "\ttrap 4";
end sub;

sub MemSet(buf: [uint8], byte: uint8, len: uint16) is
	var bufend := buf + len;
	loop
		if buf == bufend then
			return;
		end if;
		[buf] := byte;
		buf := buf + 1;
	end loop;
end sub;

sub print_oct_i16(value: uint16) is
    var i: uint8 := 5;
	print_char(((value >> 15) + '0') as uint8);
    loop
        var digit := (((value >> 12) & 7) + '0') as uint8;
        print_char(digit);
        value := value << 3;
        i := i - 1;
        if i == 0 then
            break;
        end if;
    end loop;
end sub;

include "common.coh";

